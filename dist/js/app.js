/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={676:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:()=>r})},3349:(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,{Z:()=>r})},5991:(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,{Z:()=>o})},6156:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},2122:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:()=>r})},3552:(e,t,n)=>{"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})},1253:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9756);function o(e,t){if(null==e)return{};var n,o,i=(0,r.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},9756:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},4699:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2961);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},7329:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(676);var o=n(2961);function i(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},484:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,{Z:()=>r})},2961:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(676);function o(e,t){if(e){if("string"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?(0,r.Z)(e,t):void 0}}},5318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}}},862:(e,t,n)=>{var r=n(8);function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var l=i?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(n,a,l):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}},8:e=>{function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=t=function(e){return typeof e}:e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(n)}e.exports=t},9693:(e,t,n)=>{"use strict";n.d(t,{mi:()=>l,U1:()=>u,_j:()=>c,$n:()=>d});var r=n(288);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error((0,r.Z)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function a(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function l(e,t){var n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function s(e){var t="hsl"===(e=i(e)).type?i(function(e){var t=(e=i(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),s=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-l*Math.max(Math.min(t-3,9-t,1),-1)},u="rgb",c=[Math.round(255*s(0)),Math.round(255*s(8)),Math.round(255*s(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),a({type:u,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function d(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return a(e)}},9277:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Y});var r=n(1253),o=n(5953),i=n(2122),a=["xs","sm","md","lg","xl"];function l(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,o=e.unit,l=void 0===o?"px":o,s=e.step,u=void 0===s?5:s,c=(0,r.Z)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function f(e,t){var r=a.indexOf(t);return r===a.length-1?d(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(l,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[a[r+1]]?n[a[r+1]]:t)-u/100).concat(l,")")}return(0,i.Z)({keys:a,values:n,up:d,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];return t===a.length?d("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(l,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)}var s=n(6156);function u(e,t,n){var r;return(0,i.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.Z)({paddingLeft:t(2),paddingRight:t(2)},n,(0,s.Z)({},e.up("sm"),(0,i.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,s.Z)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,s.Z)(r,e.up("sm"),{minHeight:64}),r)},n)}var c=n(288);const d={black:"#000",white:"#fff"};const f={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};const p={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};const h={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};const m={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};const v={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};const g={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};const y={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};var b=n(9693),w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.white,default:f[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},k={text:{primary:d.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:f[800],default:"#303030"},action:{active:d.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function x(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,b.$n)(e.main,o):"dark"===t&&(e.dark=(0,b._j)(e.main,i)))}function E(e){var t=e.primary,n=void 0===t?{light:p[300],main:p[500],dark:p[700]}:t,a=e.secondary,l=void 0===a?{light:h.A200,main:h.A400,dark:h.A700}:a,s=e.error,u=void 0===s?{light:m[300],main:m[500],dark:m[700]}:s,E=e.warning,S=void 0===E?{light:v[300],main:v[500],dark:v[700]}:E,C=e.info,P=void 0===C?{light:g[300],main:g[500],dark:g[700]}:C,O=e.success,R=void 0===O?{light:y[300],main:y[500],dark:y[700]}:O,T=e.type,M=void 0===T?"light":T,Z=e.contrastThreshold,N=void 0===Z?3:Z,_=e.tonalOffset,L=void 0===_?.2:_,A=(0,r.Z)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function j(e){return(0,b.mi)(e,k.text.primary)>=N?k.text.primary:w.text.primary}var I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,i.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error((0,c.Z)(4,t));if("string"!=typeof e.main)throw new Error((0,c.Z)(5,JSON.stringify(e.main)));return x(e,"light",n,L),x(e,"dark",r,L),e.contrastText||(e.contrastText=j(e.main)),e},D={dark:k,light:w};return(0,o.Z)((0,i.Z)({common:d,type:M,primary:I(n),secondary:I(l,"A400","A200","A700"),error:I(u),warning:I(S),info:I(P),success:I(R),grey:f,contrastThreshold:N,getContrastText:j,augmentColor:I,tonalOffset:L},D[M]),A)}function S(e){return Math.round(1e5*e)/1e5}var C={textTransform:"uppercase"},P='"Roboto", "Helvetica", "Arial", sans-serif';function O(e,t){var n="function"==typeof t?t(e):t,a=n.fontFamily,l=void 0===a?P:a,s=n.fontSize,u=void 0===s?14:s,c=n.fontWeightLight,d=void 0===c?300:c,f=n.fontWeightRegular,p=void 0===f?400:f,h=n.fontWeightMedium,m=void 0===h?500:h,v=n.fontWeightBold,g=void 0===v?700:v,y=n.htmlFontSize,b=void 0===y?16:y,w=n.allVariants,k=n.pxToRem,x=(0,r.Z)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var E=u/14,O=k||function(e){return"".concat(e/b*E,"rem")},R=function(e,t,n,r,o){return(0,i.Z)({fontFamily:l,fontWeight:e,fontSize:O(t),lineHeight:n},l===P?{letterSpacing:"".concat(S(r/t),"em")}:{},o,w)},T={h1:R(d,96,1.167,-1.5),h2:R(d,60,1.2,-.5),h3:R(p,48,1.167,0),h4:R(p,34,1.235,.25),h5:R(p,24,1.334,0),h6:R(m,20,1.6,.15),subtitle1:R(p,16,1.75,.15),subtitle2:R(m,14,1.57,.1),body1:R(p,16,1.5,.15),body2:R(p,14,1.43,.15),button:R(m,14,1.75,.4,C),caption:R(p,12,1.66,.4),overline:R(p,12,2.66,1,C)};return(0,o.Z)((0,i.Z)({htmlFontSize:b,pxToRem:O,round:S,fontFamily:l,fontSize:u,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:m,fontWeightBold:g},T),x,{clone:!1})}function R(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const T=["none",R(0,2,1,-1,0,1,1,0,0,1,3,0),R(0,3,1,-2,0,2,2,0,0,1,5,0),R(0,3,3,-2,0,3,4,0,0,1,8,0),R(0,2,4,-1,0,4,5,0,0,1,10,0),R(0,3,5,-1,0,5,8,0,0,1,14,0),R(0,3,5,-1,0,6,10,0,0,1,18,0),R(0,4,5,-2,0,7,10,1,0,2,16,1),R(0,5,5,-3,0,8,10,1,0,3,14,2),R(0,5,6,-3,0,9,12,1,0,3,16,2),R(0,6,6,-3,0,10,14,1,0,4,18,3),R(0,6,7,-4,0,11,15,1,0,4,20,3),R(0,7,8,-4,0,12,17,2,0,5,22,4),R(0,7,8,-4,0,13,19,2,0,5,24,4),R(0,7,9,-4,0,14,21,2,0,5,26,4),R(0,8,9,-5,0,15,22,2,0,6,28,5),R(0,8,10,-5,0,16,24,2,0,6,30,5),R(0,8,11,-5,0,17,26,2,0,6,32,5),R(0,9,11,-5,0,18,28,2,0,7,34,6),R(0,9,12,-6,0,19,29,2,0,7,36,6),R(0,10,13,-6,0,20,31,3,0,8,38,7),R(0,10,13,-6,0,21,33,3,0,8,40,7),R(0,10,14,-6,0,22,35,3,0,8,42,7),R(0,11,14,-7,0,23,36,3,0,9,44,8),R(0,11,15,-7,0,24,38,3,0,9,46,8)];const M={borderRadius:4};var Z=n(4699),N=n(484),_=(n(5697),{xs:0,sm:600,md:960,lg:1280,xl:1920}),L={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(_[e],"px)")}};const A=function(e,t){return t?(0,o.Z)(e,t,{clone:!1}):e};var j,I,D={m:"margin",p:"padding"},z={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},W={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},F=(j=function(e){if(e.length>2){if(!W[e])return[e];e=W[e]}var t=e.split(""),n=(0,Z.Z)(t,2),r=n[0],o=n[1],i=D[r],a=z[o]||"";return Array.isArray(a)?a.map((function(e){return i+e})):[i+a]},I={},function(e){return void 0===I[e]&&(I[e]=j(e)),I[e]}),B=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function $(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function H(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function U(e){var t=$(e.theme);return Object.keys(e).map((function(n){if(-1===B.indexOf(n))return null;var r=H(F(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||L;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===(0,N.Z)(t)){var o=e.theme.breakpoints||L;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(A,{})}U.propTypes={},U.filterProps=B;function V(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=$({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var q=n(3366),K=n(2781);const Y=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,i=e.mixins,a=void 0===i?{}:i,s=e.palette,c=void 0===s?{}:s,d=e.spacing,f=e.typography,p=void 0===f?{}:f,h=(0,r.Z)(e,["breakpoints","mixins","palette","spacing","typography"]),m=E(c),v=l(n),g=V(d),y=(0,o.Z)({breakpoints:v,direction:"ltr",mixins:u(v,g,a),overrides:{},palette:m,props:{},shadows:T,typography:O(m,p),spacing:g,shape:M,transitions:q.ZP,zIndex:K.Z},h),b=arguments.length,w=new Array(b>1?b-1:0),k=1;k<b;k++)w[k-1]=arguments[k];return y=w.reduce((function(e,t){return(0,o.Z)(e,t)}),y)}},9700:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(9277).Z)()},3366:(e,t,n)=>{"use strict";n.d(t,{x9:()=>i,ZP:()=>l});var r=n(1253),o={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function a(e){return"".concat(Math.round(e),"ms")}const l={easing:o,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,l=void 0===n?i.standard:n,s=t.easing,u=void 0===s?o.easeInOut:s,c=t.delay,d=void 0===c?0:c;(0,r.Z)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof l?l:a(l)," ").concat(u," ").concat("string"==typeof d?d:a(d))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}}},4670:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(2122),o=n(1253),i=n(7294),a=(n(5697),n(8679)),l=n.n(a),s=n(115),u=n(3869),c=n(159);const d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var a=t.defaultTheme,d=t.withTheme,f=void 0!==d&&d,p=t.name,h=(0,o.Z)(t,["defaultTheme","withTheme","name"]);var m=p,v=(0,s.Z)(e,(0,r.Z)({defaultTheme:a,Component:n,name:p||n.displayName,classNamePrefix:m},h)),g=i.forwardRef((function(e,t){e.classes;var l,s=e.innerRef,d=(0,o.Z)(e,["classes","innerRef"]),h=v((0,r.Z)({},n.defaultProps,e)),m=d;return("string"==typeof p||f)&&(l=(0,c.Z)()||a,p&&(m=(0,u.Z)({theme:l,name:p,props:d})),f&&!m.theme&&(m.theme=l)),i.createElement(n,(0,r.Z)({ref:s||t,classes:h},m))}));return l()(g,n),g}};var f=n(9700);const p=function(e,t){return d(e,(0,r.Z)({defaultTheme:f.Z},t))}},2781:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},3871:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(288);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},2568:(e,t,n)=>{"use strict";function r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}n.d(t,{Z:()=>r})},5209:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(2122),o=n(7294),i=n(1253),a=(n(5697),n(6010)),l=n(4670),s=n(3871),u=o.forwardRef((function(e,t){var n=e.children,l=e.classes,u=e.className,c=e.color,d=void 0===c?"inherit":c,f=e.component,p=void 0===f?"svg":f,h=e.fontSize,m=void 0===h?"default":h,v=e.htmlColor,g=e.titleAccess,y=e.viewBox,b=void 0===y?"0 0 24 24":y,w=(0,i.Z)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return o.createElement(p,(0,r.Z)({className:(0,a.Z)(l.root,u,"inherit"!==d&&l["color".concat((0,s.Z)(d))],"default"!==m&&l["fontSize".concat((0,s.Z)(m))]),focusable:"false",viewBox:b,color:v,"aria-hidden":!g||void 0,role:g?"img":void 0,ref:t},w),n,g?o.createElement("title",null,g):null)}));u.muiName="SvgIcon";const c=(0,l.Z)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(u);function d(e,t){var n=function(t,n){return o.createElement(c,(0,r.Z)({ref:n},t),e)};return n.muiName=c.muiName,o.memo(o.forwardRef(n))}},9437:(e,t,n)=>{"use strict";function r(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,l=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}n.d(t,{Z:()=>r})},8546:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>o.Z,createSvgIcon:()=>i.Z,debounce:()=>a.Z,deprecatedPropType:()=>l,isMuiElement:()=>s.Z,ownerDocument:()=>u.Z,ownerWindow:()=>c.Z,requirePropFactory:()=>d,setRef:()=>f.Z,unstable_useId:()=>g.Z,unsupportedProp:()=>p,useControlled:()=>h.Z,useEventCallback:()=>m.Z,useForkRef:()=>v.Z,useIsFocusVisible:()=>y.Z});var r=n(3871),o=n(2568),i=n(5209),a=n(9437);function l(e,t){return function(){return null}}var s=n(3711),u=n(626),c=n(713);function d(e){return function(){return null}}var f=n(4236);function p(e,t,n,r,o){return null}var h=n(2775),m=n(5192),v=n(3834),g=n(5001),y=n(4896)},3711:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},626:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},713:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(626);function o(e){return(0,r.Z)(e).defaultView||window}},4236:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},5001:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e){var t=r.useState(e),n=t[0],o=t[1],i=e||n;return r.useEffect((function(){null==n&&o("mui-".concat(Math.round(1e5*Math.random())))}),[n]),i}},2775:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e){var t=e.controlled,n=e.default,o=(e.name,e.state,r.useRef(void 0!==t).current),i=r.useState(n),a=i[0],l=i[1];return[o?t:a,r.useCallback((function(e){o||l(e)}),[])]}},5192:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function i(e){var t=r.useRef(e);return o((function(){t.current=e})),r.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}},3834:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(4236);function i(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){(0,o.Z)(e,n),(0,o.Z)(t,n)}}),[e,t])}},4896:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7294),o=n(3935),i=!0,a=!1,l=null,s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function u(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function c(){i=!1}function d(){"hidden"===this.visibilityState&&a&&(i=!0)}function f(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return i||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!s[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function p(){a=!0,window.clearTimeout(l),l=window.setTimeout((function(){a=!1}),100)}function h(){return{isFocusVisible:f,onBlurVisible:p,ref:r.useCallback((function(e){var t,n=o.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",u,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",d,!0))}),[])}}},4152:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"}),"Assignment");t.Z=a},9875:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"ChevronLeft");t.Z=a},2576:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"}),"FolderOpen");t.Z=a},8884:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu");t.Z=a},8042:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore");t.Z=a},8121:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext");t.Z=a},3770:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M6 19h4V5H6v14zm8-14v14h4V5h-4z"}),"Pause");t.Z=a},6652:(e,t,n)=>{"use strict";var r=n(5318),o=n(862);t.Z=void 0;var i=o(n(7294)),a=(0,r(n(2108)).default)(i.createElement("path",{d:"M8 5v14l11-7z"}),"PlayArrow");t.Z=a},2108:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(8546)},7076:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__"},3869:(e,t,n)=>{"use strict";function r(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}n.d(t,{Z:()=>r})},115:(e,t,n)=>{"use strict";n.d(t,{Z:()=>pn});var r=n(1253),o=n(2122),i=n(7294),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const l="object"===("undefined"==typeof window?"undefined":a(window))&&"object"===("undefined"==typeof document?"undefined":a(document))&&9===document.nodeType;var s=n(5991),u=n(3552),c=n(3349),d=n(9756),f={}.constructor;function p(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(p);if(e.constructor!==f)return e;var t={};for(var n in e)t[n]=p(e[n]);return t}function h(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=p(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var m=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},v=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=m(e[r]," ");else n=m(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function g(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function y(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var s=a[l];for(var u in s){var c=s[u];null!=c&&(r&&(r+="\n"),r+=""+g(u+": "+v(c)+";",i))}}else for(var d in a){var f=a[d];null!=f&&(r&&(r+="\n"),r+=""+g(d+": "+v(f)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+g(p+": "+v(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),g(e+" {"+r,--i)+g("}",i)):r}var b=/([[\].#*$><+~=|^:(),"'`\s])/g,w="undefined"!=typeof CSS&&CSS.escape,k=function(e){return w?w(e):e.replace(b,"\\$1")},x=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var s=this.options.sheet;return s&&s.attached,this},e}(),E=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,s=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=s((0,c.Z)((0,c.Z)(o)),l),o.selectorText="."+k(o.id)),o}(0,u.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=v(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return y(this.selectorText,this.style,n)},(0,s.Z)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(x),S={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new E(e,t,n)}},C={indent:1,children:!0},P=/@([\w-]+)/,O=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(P);for(var i in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Q((0,o.Z)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=C),null==e.indent&&(e.indent=C.indent),null==e.children&&(e.children=C.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),R=/@media|@supports\s+/,T={onCreateRule:function(e,t,n){return R.test(e)?new O(e,t,n):null}},M={indent:1,children:!0},Z=/@keyframes\s+([\w-]+)/,N=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(Z);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var s in this.id=!1===i?this.name:k(l(this,a)),this.rules=new Q((0,o.Z)({},n,{parent:this})),t)this.rules.add(s,t[s],(0,o.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=M),null==e.indent&&(e.indent=M.indent),null==e.children&&(e.children=M.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),_=/@keyframes\s+/,L=/\$([\w-]+)/g,A=function(e,t){return"string"==typeof e?e.replace(L,(function(e,n){return n in t?t[n]:e})):e},j=function(e,t,n){var r=e[t],o=A(r,n);o!==r&&(e[t]=o)},I={onCreateRule:function(e,t,n){return"string"==typeof e&&_.test(e)?new N(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&j(e,"animation-name",n.keyframes),"animation"in e&&j(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return A(e,r.keyframes);default:return e}}},D=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,u.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return y(this.key,this.style,n)},t}(x),z={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new D(e,t,n):null}},W=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=y(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return y(this.at,this.style,e)},e}(),F=/@font-face/,B={onCreateRule:function(e,t,n){return F.test(e)?new W(e,t,n):null}},$=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return y(this.key,this.style,e)},e}(),H={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new $(e,t,n):null}},U=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),V={"@charset":!0,"@import":!0,"@namespace":!0},q=[S,T,I,z,B,H,{onCreateRule:function(e,t,n){return e in V?new U(e,t,n):null}}],K={process:!0},Y={force:!0,process:!0},Q=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,a=r.sheet,l=r.jss,s=r.Renderer,u=r.generateId,c=r.scoped,d=(0,o.Z)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:s,generateId:u,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(d.selector="."+k(this.classes[f]));var p=h(f,t,d);if(!p)return null;this.register(p);var m=void 0===d.index?this.index.length:d.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof E?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof N&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof E?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof N&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=K);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,s=l.style;if(i.onUpdate(n,t,a,r),r.process&&s&&s!==l.style){for(var u in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[u];c!==s[u]&&l.prop(u,c,Y)}for(var d in s){var f=l.style[d],p=s[d];null==f&&f!==p&&l.prop(d,null,Y)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),X=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,o.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Q(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),G=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),J=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,d.Z)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},(0,s.Z)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ee="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),te="2f1acc6c3a606b082e5eef5e54414ffb";null==ee[te]&&(ee[te]=0);var ne=ee[te]++,re=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ne+o+t:i+n.key+"-"+ne+(o?"-"+o:"")+"-"+t}},oe=function(e){var t;return function(){return t||(t=e()),t}},ie=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ae=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=v(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},le=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},se=function(e,t){return e.selectorText=t,e.selectorText===t},ue=oe((function(){return document.querySelector("head")}));function ce(e){var t=J.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=ue(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var de=oe((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),fe=function(e,t,n){try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},pe=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},he=function(){function e(e){this.getPropertyValue=ie,this.setProperty=ae,this.removeProperty=le,this.setSelector=se,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&J.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=de();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=ce(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else ue().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=pe(n,t);if(!1===(o=fe(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var l=pe(n,t),s=fe(n,a,l);return!1!==s&&(this.hasInsertedRules=!0,this.refCssRule(e,l,s),s)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof X&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),me=0,ve=function(){function e(e){this.id=me++,this.version="10.5.1",this.plugins=new G,this.options={id:{minify:!1},createGenerateId:re,Renderer:l?he:null,plugins:[]},this.generateId=re({minify:!1});for(var t=0;t<q.length;t++)this.plugins.use(q[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,o.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===J.index?0:J.index+1);var r=new X(e,(0,o.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),J.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=(0,o.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=h(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function ge(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=ge(r);i&&(t||(t={}),t[n]=i)}}return t}var ye="object"==typeof CSS&&null!=CSS&&"number"in CSS,be=function(e){return new ve(e)};be();var we=n(5835);const ke={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var xe=n(159),Ee=(n(5697),n(7076)),Se=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Ce=Date.now(),Pe="fnValues"+Ce,Oe="fnStyle"+ ++Ce;const Re=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=h(e,{},n);return r[Oe]=t,r},onProcessStyle:function(e,t){if(Pe in t||Oe in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Pe]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Oe];i&&(o.style=i(e)||{});var a=o[Pe];if(a)for(var l in a)o.prop(l,a[l](e),r)}}};var Te="@global",Me="@global ",Ze=function(){function e(e,t,n){for(var r in this.type="global",this.at=Te,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Q((0,o.Z)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ne=function(){function e(e,t,n){this.type="global",this.at=Te,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(Me.length);this.rule=n.jss.createRule(r,t,(0,o.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),_e=/\s*,\s*/g;function Le(e,t){for(var n=e.split(_e),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}const Ae=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Te)return new Ze(e,t,n);if("@"===e[0]&&e.substr(0,Me.length)===Me)return new Ne(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,i=r?r[Te]:null;if(i){for(var a in i)t.addRule(a,i[a],(0,o.Z)({},n,{selector:Le(a,e.selector)}));delete r[Te]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var i in r)if("@"===i[0]&&i.substr(0,Te.length)===Te){var a=Le(i.substr(Te.length),e.selector);t.addRule(a,r[i],(0,o.Z)({},n,{selector:a})),delete r[i]}}(e,t))}}};var je=/\s*,\s*/g,Ie=/&/g,De=/\$([\w-]+)/g;const ze=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(je),r=e.split(je),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var s=r[l];o&&(o+=", "),o+=-1!==s.indexOf("&")?s.replace(Ie,a):a+" "+s}return o}function n(e,t,n){if(n)return(0,o.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var i=(0,o.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(r,i,a){if("style"!==i.type)return r;var l,s,u=i,c=u.options.parent;for(var d in r){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(l=n(u,c,l),f){var h=t(d,u.selector);s||(s=e(c,a)),h=h.replace(De,s),c.addRule(h,r[d],(0,o.Z)({},l,{selector:h}))}else p&&c.addRule(d,{},l).addRule(u.key,r[d],{selector:u.selector});delete r[d]}}return r}}};var We=/[A-Z]/g,Fe=/^ms-/,Be={};function $e(e){return"-"+e.toLowerCase()}const He=function(e){if(Be.hasOwnProperty(e))return Be[e];var t=e.replace(We,$e);return Be[e]=Fe.test(t)?"-"+t:t};function Ue(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:He(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ue):t.fallbacks=Ue(e.fallbacks)),t}const Ve=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ue(e[t]);return e}return Ue(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=He(t);return t===r?e:(n.prop(r,e),null)}}};var qe=ye&&CSS?CSS.px:"px",Ke=ye&&CSS?CSS.ms:"ms",Ye=ye&&CSS?CSS.percent:"%";function Qe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Xe=Qe({"animation-delay":Ke,"animation-duration":Ke,"background-position":qe,"background-position-x":qe,"background-position-y":qe,"background-size":qe,border:qe,"border-bottom":qe,"border-bottom-left-radius":qe,"border-bottom-right-radius":qe,"border-bottom-width":qe,"border-left":qe,"border-left-width":qe,"border-radius":qe,"border-right":qe,"border-right-width":qe,"border-top":qe,"border-top-left-radius":qe,"border-top-right-radius":qe,"border-top-width":qe,"border-width":qe,"border-block":qe,"border-block-end":qe,"border-block-end-width":qe,"border-block-start":qe,"border-block-start-width":qe,"border-block-width":qe,"border-inline":qe,"border-inline-end":qe,"border-inline-end-width":qe,"border-inline-start":qe,"border-inline-start-width":qe,"border-inline-width":qe,"border-start-start-radius":qe,"border-start-end-radius":qe,"border-end-start-radius":qe,"border-end-end-radius":qe,margin:qe,"margin-bottom":qe,"margin-left":qe,"margin-right":qe,"margin-top":qe,"margin-block":qe,"margin-block-end":qe,"margin-block-start":qe,"margin-inline":qe,"margin-inline-end":qe,"margin-inline-start":qe,padding:qe,"padding-bottom":qe,"padding-left":qe,"padding-right":qe,"padding-top":qe,"padding-block":qe,"padding-block-end":qe,"padding-block-start":qe,"padding-inline":qe,"padding-inline-end":qe,"padding-inline-start":qe,"mask-position-x":qe,"mask-position-y":qe,"mask-size":qe,height:qe,width:qe,"min-height":qe,"max-height":qe,"min-width":qe,"max-width":qe,bottom:qe,left:qe,top:qe,right:qe,inset:qe,"inset-block":qe,"inset-block-end":qe,"inset-block-start":qe,"inset-inline":qe,"inset-inline-end":qe,"inset-inline-start":qe,"box-shadow":qe,"text-shadow":qe,"column-gap":qe,"column-rule":qe,"column-rule-width":qe,"column-width":qe,"font-size":qe,"font-size-delta":qe,"letter-spacing":qe,"text-decoration-thickness":qe,"text-indent":qe,"text-stroke":qe,"text-stroke-width":qe,"word-spacing":qe,motion:qe,"motion-offset":qe,outline:qe,"outline-offset":qe,"outline-width":qe,perspective:qe,"perspective-origin-x":Ye,"perspective-origin-y":Ye,"transform-origin":Ye,"transform-origin-x":Ye,"transform-origin-y":Ye,"transform-origin-z":Ye,"transition-delay":Ke,"transition-duration":Ke,"vertical-align":qe,"flex-basis":qe,"shape-margin":qe,size:qe,gap:qe,grid:qe,"grid-gap":qe,"row-gap":qe,"grid-row-gap":qe,"grid-column-gap":qe,"grid-template-rows":qe,"grid-template-columns":qe,"grid-auto-rows":qe,"grid-auto-columns":qe,"box-shadow-x":qe,"box-shadow-y":qe,"box-shadow-blur":qe,"box-shadow-spread":qe,"font-line-height":qe,"text-shadow-x":qe,"text-shadow-y":qe,"text-shadow-blur":qe});function Ge(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Ge(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Ge(o,t[o],n);else for(var i in t)t[i]=Ge(e+"-"+i,t[i],n);else if("number"==typeof t&&!Number.isNaN(t)){var a=n[e]||Xe[e];return!a||0===t&&a===qe?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}const Je=function(e){void 0===e&&(e={});var t=Qe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Ge(r,e[r],t);return e},onChangeValue:function(e,n){return Ge(n,e,t)}}};var et=n(7329),tt="",nt="",rt="",ot="",it=l&&"ontouchstart"in document.documentElement;if(l){var at={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},lt=document.createElement("p").style;for(var st in at)if(st+"Transform"in lt){tt=st,nt=at[st];break}"Webkit"===tt&&"msHyphens"in lt&&(tt="ms",nt=at.ms,ot="edge"),"Webkit"===tt&&"-apple-trailing-word"in lt&&(rt="apple")}var ut=tt,ct=nt,dt=rt,ft=ot,pt=it;var ht={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ut?"-webkit-"+e:ct+e)}},mt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ut?ct+"print-"+e:e)}},vt=/[-\s]+(.)?/g;function gt(e,t){return t?t.toUpperCase():""}function yt(e){return e.replace(vt,gt)}function bt(e){return yt("-"+e)}var wt,kt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ut){var n="mask-image";if(yt(n)in t)return e;if(ut+bt(n)in t)return ct+e}return e}},xt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==dt||pt?e:ct+e)}},Et={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:ct+e)}},St={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:ct+e)}},Ct={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ut||"ms"===ut&&"edge"!==ft?ct+e:e)}},Pt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ut||"ms"===ut||"apple"===dt?ct+e:e)}},Ot={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ut?"WebkitColumn"+bt(e)in t&&ct+"column-"+e:"Moz"===ut&&("page"+bt(e)in t&&"page-"+e))}},Rt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ut)return e;var n=e.replace("-inline","");return ut+bt(n)in t&&ct+n}},Tt={supportedProperty:function(e,t){return yt(e)in t&&e}},Mt={supportedProperty:function(e,t){var n=bt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ut+n in t?ct+e:"Webkit"!==ut&&"Webkit"+n in t&&"-webkit-"+e}},Zt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ut?""+ct+e:e)}},Nt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ut?ct+"scroll-chaining":e)}},_t={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Lt={supportedProperty:function(e,t){var n=_t[e];return!!n&&(ut+bt(n)in t&&ct+n)}},At={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},jt=Object.keys(At),It=function(e){return ct+e},Dt=[ht,mt,kt,xt,Et,St,Ct,Pt,Ot,Rt,Tt,Mt,Zt,Nt,Lt,{supportedProperty:function(e,t,n){var r=n.multiple;if(jt.indexOf(e)>-1){var o=At[e];if(!Array.isArray(o))return ut+bt(o)in t&&ct+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(ut+bt(o[0])in t))return!1;return o.map(It)}return!1}}],zt=Dt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Wt=Dt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,(0,et.Z)(t.noPrefill)),e}),[]),Ft={};if(l){wt=document.createElement("p");var Bt=window.getComputedStyle(document.documentElement,"");for(var $t in Bt)isNaN($t)||(Ft[Bt[$t]]=Bt[$t]);Wt.forEach((function(e){return delete Ft[e]}))}function Ht(e,t){if(void 0===t&&(t={}),!wt)return e;if(null!=Ft[e])return Ft[e];"transition"!==e&&"transform"!==e||(t[e]=e in wt.style);for(var n=0;n<zt.length&&(Ft[e]=zt[n](e,wt.style,t),!Ft[e]);n++);try{wt.style[e]=""}catch(e){return!1}return Ft[e]}var Ut,Vt={},qt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Kt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Yt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?Ht(t):", "+Ht(n);return r||(t||n)}function Qt(e,t){var n=t;if(!Ut||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Vt[r])return Vt[r];try{Ut.style[e]=n}catch(e){return Vt[r]=!1,!1}if(qt[e])n=n.replace(Kt,Yt);else if(""===Ut.style[e]&&("-ms-flex"===(n=ct+n)&&(Ut.style[e]="-ms-flexbox"),Ut.style[e]=n,""===Ut.style[e]))return Vt[r]=!1,!1;return Ut.style[e]="",Vt[r]=n,Vt[r]}l&&(Ut=document.createElement("p"));const Xt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Ht(n);i&&i!==n&&(o=!0);var a=!1,l=Qt(i,v(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===ut?e:"@"+ct+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Qt(t,v(e))||e}}};const Gt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};var Jt=be({plugins:[Re(),Ae(),ze(),Ve(),Je(),"undefined"==typeof window?null:Xt(),Gt()]}),en={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),s=0,u=function(){return s+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Se.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Ee.Z]&&""===a?"".concat(i,"-").concat(u()):i}return"".concat(l).concat(o).concat(u())}}(),jss:Jt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},tn=i.createContext(en);var nn=-1e9;function rn(){return nn+=1}var on=n(5953);function an(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var a=n.overrides[r],l=(0,o.Z)({},i);return Object.keys(a).forEach((function(e){l[e]=(0,on.Z)(l[e],a[e])})),l},options:{}}}const ln={};function sn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=(0,we.Z)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function un(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var s=ke.get(i.sheetsManager,a,r);s||(s={refs:0,staticSheet:null,dynamicStyles:null},ke.set(i.sheetsManager,a,r,s));var u=(0,o.Z)({},a.options,i,{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});u.generateId=u.serverGenerateClassName||u.generateClassName;var c=i.sheetsRegistry;if(0===s.refs){var d;i.sheetsCache&&(d=ke.get(i.sheetsCache,a,r));var f=a.create(r,l);d||((d=i.jss.createStyleSheet(f,(0,o.Z)({link:!1},u))).attach(),i.sheetsCache&&ke.set(i.sheetsCache,a,r,d)),c&&c.add(d),s.staticSheet=d,s.dynamicStyles=ge(f)}if(s.dynamicStyles){var p=i.jss.createStyleSheet(s.dynamicStyles,(0,o.Z)({link:!0},u));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=(0,we.Z)({baseClasses:s.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=s.staticSheet.classes;s.refs+=1}}function cn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function dn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=ke.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(ke.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function fn(e,t){var n,r=i.useRef([]),o=i.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.useEffect((function(){return function(){n&&n()}}),[o])}function pn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,a=t.classNamePrefix,l=t.Component,s=t.defaultTheme,u=void 0===s?ln:s,c=(0,r.Z)(t,["name","classNamePrefix","Component","defaultTheme"]),d=an(e),f=n||a||"makeStyles";d.options={index:rn(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(0,xe.Z)()||u,r=(0,o.Z)({},i.useContext(tn),c),a=i.useRef(),s=i.useRef();fn((function(){var o={name:n,state:{},stylesCreator:d,stylesOptions:r,theme:t};return un(o,e),s.current=!1,a.current=o,function(){dn(o)}}),[t,d]),i.useEffect((function(){s.current&&cn(a.current,e),s.current=!0}));var f=sn(a.current,e.classes,l);return f};return p}},5835:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2122);function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var o=(0,r.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}},3800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},159:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(3800);function i(){return r.useContext(o.Z)}},5953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(2122),o=n(484);function i(e){return e&&"object"===(0,o.Z)(e)&&e.constructor===Object}function a(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?(0,r.Z)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(i(t[r])&&r in e?o[r]=a(e[r],t[r],n):o[r]=t[r])})),o}},288:(e,t,n)=>{"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o})},2148:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"h1{color:aqua}header{-webkit-app-region:drag}button{-webkit-app-region:no-drag}","",{version:3,sources:["webpack://./src/js/index.scss"],names:[],mappings:"AAAA,GACE,UAAA,CAGF,OACE,uBAAA,CAGF,OACE,0BAAA",sourcesContent:["h1 {\n  color: cyan;\n}\n\nheader {\n  -webkit-app-region: drag;\n}\n\nbutton {\n  -webkit-app-region: no-drag;\n}\n"],sourceRoot:""}]);const l=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},4015:e=>{"use strict";function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),l="/*# ".concat(a," */"),s=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(s).concat([l]).join("\n")}return[r].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var l=s(t),m=s(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=f(n,g);try{u(t,g,y)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case v:case m:case s:return e;default:return t}}case o:return t}}}function x(e){return k(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===u},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===f},t.isFragment=function(e){return k(e)===i},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===a},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=k},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,s=o(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(s[c]=a[c]);if(t){l=t(a);for(var d=0;d<l.length;d++)r.call(a,l[d])&&(s[l[d]]=a[l[d]])}}return s}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,E=60106,S=60107,C=60108,P=60114,O=60109,R=60110,T=60112,M=60113,Z=60120,N=60115,_=60116,L=60121,A=60128,j=60129,I=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;x=z("react.element"),E=z("react.portal"),S=z("react.fragment"),C=z("react.strict_mode"),P=z("react.profiler"),O=z("react.provider"),R=z("react.context"),T=z("react.forward_ref"),M=z("react.suspense"),Z=z("react.suspense_list"),N=z("react.memo"),_=z("react.lazy"),L=z("react.block"),z("react.scope"),A=z("react.opaque.id"),j=z("react.debug_trace_mode"),I=z("react.offscreen"),D=z("react.legacy_hidden")}var W,F="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function $(e){if(void 0===W)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);W=t&&t[1]||""}return"\n"+W+e}var H=!1;function U(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function V(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return e=U(e.type,!1);case 11:return e=U(e.type.render,!1);case 22:return e=U(e.type._render,!1);case 1:return e=U(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case P:return"Profiler";case C:return"StrictMode";case M:return"Suspense";case Z:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case R:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case N:return q(e.type);case L:return q(e._render);case _:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ue(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml",fe="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve,ge=(ve=function(e,t){if(e.namespaceURI!==fe||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ke(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Pe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Re=null,Te=null;function Me(e){if(e=eo(e)){if("function"!=typeof Oe)throw Error(a(280));var t=e.stateNode;t&&(t=no(t),Oe(e.stateNode,e.type,t))}}function Ze(e){Re?Te?Te.push(e):Te=[e]:Re=e}function Ne(){if(Re){var e=Re,t=Te;if(Te=Re=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function _e(e,t){return e(t)}function Le(e,t,n,r,o){return e(t,n,r,o)}function Ae(){}var je=_e,Ie=!1,De=!1;function ze(){null===Re&&null===Te||(Ae(),Ne())}function We(e,t){var n=e.stateNode;if(null===n)return null;var r=no(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Fe=!1;if(d)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function $e(e,t,n,r,o,i,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var He=!1,Ue=null,Ve=!1,qe=null,Ke={onError:function(e){He=!0,Ue=e}};function Ye(e,t,n,r,o,i,a,l,s){He=!1,Ue=null,$e.apply(Ke,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Qe(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var tt,nt,rt,ot,it=!1,at=[],lt=null,st=null,ut=null,ct=new Map,dt=new Map,ft=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ht(t,n,r,o,i),null!==t&&(null!==(t=eo(t))&&nt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Jr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void ot(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){rt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=eo(n))&&nt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){yt(e)&&n.delete(t)}function wt(){for(it=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==lt&&yt(lt)&&(lt=null),null!==st&&yt(st)&&(st=null),null!==ut&&yt(ut)&&(ut=null),ct.forEach(bt),dt.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,wt)))}function xt(e){function t(t){return kt(t,e)}if(0<at.length){kt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==st&&kt(st,e),null!==ut&&kt(ut,e),ct.forEach(t),dt.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)gt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},Ct={},Pt={};function Ot(e){if(Ct[e])return Ct[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Pt)return Ct[e]=n[t];return e}d&&(Pt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Rt=Ot("animationend"),Tt=Ot("animationiteration"),Mt=Ot("animationstart"),Zt=Ot("transitionend"),Nt=new Map,_t=new Map,Lt=["abort","abort",Rt,"animationEnd",Tt,"animationIteration",Mt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Zt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),_t.set(r,t),Nt.set(r,o),u(o,[r])}}(0,i.unstable_now)();var jt=8;function It(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!==(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!==(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!==(t=4186112&e)?(jt=6,t):0!==(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!==(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=jt=15;else if(0!==(i=134217727&n)){var s=i&~a;0!==s?(r=It(s),o=jt):0!==(l&=i)&&(r=It(l),o=jt)}else 0!==(i=n&~a)?(r=It(i),o=jt):0!==l&&(r=It(l),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(It(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ht(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Wt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Wt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Wt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ut(e)/Vt|0)|0},Ut=Math.log,Vt=Math.LN2;var qt=i.unstable_UserBlockingPriority,Kt=i.unstable_runWithPriority,Yt=!0;function Qt(e,t,n,r){Ie||Ae();var o=Gt,i=Ie;Ie=!0;try{Le(o,e,t,n,r)}finally{(Ie=i)||ze()}}function Xt(e,t,n,r){Kt(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Yt)if((o=0==(4&t))&&0<at.length&&-1<pt.indexOf(e))e=ht(null,e,t,n,r),at.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&mt(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ht(i,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return lt=vt(lt,e,t,n,r,o),!0;case"dragenter":return st=vt(st,e,t,n,r,o),!0;case"mouseover":return ut=vt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,dt.set(i,vt(dt.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;mt(e,r)}Nr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Pe(r);if(null!==(o=Jr(o))){var i=Qe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Xe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var en=null,tn=null,nn=null;function rn(){if(nn)return nn;var e,t,n=tn,r=n.length,o="value"in en?en.value:en.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return nn=o.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function ln(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?an:ln,this.isPropagationStopped=ln,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var un,cn,dn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=sn(fn),hn=o({},fn,{view:0,detail:0}),mn=sn(hn),vn=o({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==dn&&(dn&&"mousemove"===e.type?(un=e.screenX-dn.screenX,cn=e.screenY-dn.screenY):cn=un=0,dn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),gn=sn(vn),yn=sn(o({},vn,{dataTransfer:0})),bn=sn(o({},hn,{relatedTarget:0})),wn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),kn=sn(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=sn(o({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function On(){return Pn}var Rn=sn(o({},hn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=sn(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=sn(o({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Zn=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=sn(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),_n=[9,13,27,32],Ln=d&&"CompositionEvent"in window,An=null;d&&"documentMode"in document&&(An=document.documentMode);var jn=d&&"TextEvent"in window&&!An,In=d&&(!Ln||An&&8<An&&11>=An),Dn=String.fromCharCode(32),zn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1;var $n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Un(e,t,n,r){Ze(r),0<(t=Lr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,qn=null;function Kn(e){Pr(e,0)}function Yn(e){if(X(to(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(d){var Gn;if(d){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function tr(){Vn&&(Vn.detachEvent("onpropertychange",nr),qn=Vn=null)}function nr(e){if("value"===e.propertyName&&Yn(qn)){var t=[];if(Un(t,qn,e,Pe(e)),e=Kn,Ie)e(t);else{Ie=!0;try{_e(e,t)}finally{Ie=!1,ze()}}}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Vn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function ir(e,t){if("click"===e)return Yn(t)}function ar(e,t){if("input"===e||"change"===e)return Yn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!lr(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=d&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||("selectionStart"in(r=vr)&&hr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Lr(gr,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(Lt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<kr.length;xr++)_t.set(kr[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Cr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,s,u){if(Ye.apply(this,arguments),He){if(!He)throw Error(a(198));var c=Ue;He=!1,Ue=null,Ve||(Ve=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&o.isPropagationStopped())break e;Cr(o,l,u),i=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,u=l.currentTarget,l=l.listener,s!==i&&o.isPropagationStopped())break e;Cr(o,l,u),i=s}}}if(Ve)throw e=qe,Ve=!1,qe=null,e}function Or(e,t){var n=ro(t),r=e+"__bubble";n.has(r)||(Zr(t,e,2,!1),n.add(r))}var Rr="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[Rr]||(e[Rr]=!0,l.forEach((function(t){Sr.has(t)||Mr(t,!1,e,null),Mr(t,!0,e,null)})))}function Mr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=ro(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Zr(i,e,o,t),a.add(l))}function Zr(e,t,n,r){var o=_t.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Jr(l)))return;if(5===(s=a.tag)||6===s){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e(t,n);De=!0;try{je(e,t,n)}finally{De=!1,ze()}}((function(){var r=i,o=Pe(n),a=[];e:{var l=Nt.get(e);if(void 0!==l){var s=pn,u=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":s=Rn;break;case"focusin":u="focus",s=bn;break;case"focusout":u="blur",s=bn;break;case"beforeblur":case"afterblur":s=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Mn;break;case Rt:case Tt:case Mt:s=wn;break;case Zt:s=Zn;break;case"scroll":s=mn;break;case"wheel":s=Nn;break;case"copy":case"cut":case"paste":s=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Tn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&(null!=(m=We(h,f))&&c.push(_r(h,m,p)))),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Jr(u)&&!u[Xr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Jr(u):null)&&(u!==(d=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=gn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:to(s),p=null==u?l:to(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,Jr(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Ar(p))h++;for(p=0,m=f;m;m=Ar(m))p++;for(;0<h-p;)c=Ar(c),h--;for(;0<p-h;)f=Ar(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Ar(c),f=Ar(f)}c=null}else c=null;null!==s&&jr(a,l,s,c,!1),null!==u&&null!==d&&jr(a,d,u,c,!0)}if("select"===(s=(l=r?to(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var v=Qn;else if(Hn(l))if(Xn)v=ar;else{v=or;var g=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ir);switch(v&&(v=v(e,r))?Un(a,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?to(r):window,e){case"focusin":(Hn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Wn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=rn()):(tn="value"in(en=o)?en.value:en.textContent,Bn=!0)),0<(g=Lr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:g}),y?b.data=y:null!==(y=Fn(n))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(zn=!0,Dn);case"textInput":return(e=t.data)===Dn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Ln&&Wn(e,t)?(e=rn(),nn=tn=en=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Lr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y))}Pr(a,t)}))}function _r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=We(e,n))&&r.unshift(_r(e,i,o)),null!=(i=We(e,t))&&r.push(_r(e,i,o))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=We(n,i))&&a.unshift(_r(n,s,l)):o||null!=(s=We(n,i))&&a.push(_r(n,s,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Ir(){}var Dr=null,zr=null;function Wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Ur(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Vr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0;var Kr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Kr,Qr="__reactProps$"+Kr,Xr="__reactContainer$"+Kr,Gr="__reactEvents$"+Kr;function Jr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Vr(e);null!==e;){if(n=e[Yr])return n;e=Vr(e)}return t}n=(e=n).parentNode}return null}function eo(e){return!(e=e[Yr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function no(e){return e[Qr]||null}function ro(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var oo=[],io=-1;function ao(e){return{current:e}}function lo(e){0>io||(e.current=oo[io],oo[io]=null,io--)}function so(e,t){io++,oo[io]=e.current,e.current=t}var uo={},co=ao(uo),fo=ao(!1),po=uo;function ho(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function mo(e){return null!=(e=e.childContextTypes)}function vo(){lo(fo),lo(co)}function go(e,t,n){if(co.current!==uo)throw Error(a(168));so(co,t),so(fo,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return o({},n,r)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,po=co.current,so(co,e),so(fo,fo.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yo(e,t,po),r.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(co),so(co,e)):lo(fo),so(fo,n)}var ko=null,xo=null,Eo=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Co=i.unstable_cancelCallback,Po=i.unstable_shouldYield,Oo=i.unstable_requestPaint,Ro=i.unstable_now,To=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,Zo=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,_o=i.unstable_LowPriority,Lo=i.unstable_IdlePriority,Ao={},jo=void 0!==Oo?Oo:function(){},Io=null,Do=null,zo=!1,Wo=Ro(),Fo=1e4>Wo?Ro:function(){return Ro()-Wo};function Bo(){switch(To()){case Mo:return 99;case Zo:return 98;case No:return 97;case _o:return 96;case Lo:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return Mo;case 98:return Zo;case 97:return No;case 96:return _o;case 95:return Lo;default:throw Error(a(332))}}function Ho(e,t){return e=$o(e),Eo(e,t)}function Uo(e,t,n){return e=$o(e),So(e,t,n)}function Vo(){if(null!==Do){var e=Do;Do=null,Co(e)}qo()}function qo(){if(!zo&&null!==Io){zo=!0;var e=0;try{var t=Io;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),So(Mo,Vo),t}finally{zo=!1}}}var Ko=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qo=ao(null),Xo=null,Go=null,Jo=null;function ei(){Jo=Go=Xo=null}function ti(e){var t=Qo.current;lo(Qo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ri(e,t){Xo=e,Jo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(La=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Xo)throw Error(a(308));Go=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function si(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function di(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?a=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(f=i.baseState,l=0,d=c=u=null;;){s=a.lane;var p=a.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,s);break e}f=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,f,s):h))break e;f=o({},f,s);break e;case 2:ii=!0}}null!==a.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[a]:s.push(a))}else p={eventTime:p,lane:s,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=p,u=f):d=d.next=p,l|=s;if(null===(a=a.next)){if(null===(s=i.shared.pending))break;a=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===d&&(u=f),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,Dl|=l,e.lanes=l,e.memoizedState=f}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var pi=(new r.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mi={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),i=si(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),ds(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),i=si(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),ds(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=us(),r=cs(e),o=si(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),ds(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!ur(n,r)||!ur(o,i))}function gi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=mo(t)?po:co.current,i=(r=null!=(r=t.contextTypes))?ho(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function yi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mi.enqueueReplaceState(t,t.state,null)}function bi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=pi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=mo(t)?po:co.current,o.context=ho(e,i)),di(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&mi.enqueueReplaceState(o,o.state,null),di(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var wi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===pi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function xi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=$s(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=qs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Hs(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ks(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Us(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Hs(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case E:return(t=Ks(t,e.mode,n)).return=e,t}if(wi(t)||B(t))return(t=Us(t,e.mode,n,null)).return=e,t;xi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===S?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(wi(n)||B(n))return null!==o?null:d(e,t,n,r,null);xi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||B(r))return d(t,e=e.get(n)||null,r,o,null);xi(t,r)}return null}function m(o,a,l,s){for(var u=null,c=null,d=a,m=a=0,v=null;null!==d&&m<l.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var g=p(o,d,l[m],s);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(o,d),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g,d=v}if(m===l.length)return n(o,d),u;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],s))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<l.length;m++)null!==(v=h(d,o,m,l[m],s))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),u}function v(o,l,s,u){var c=B(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,m=l,v=l=0,g=null,y=s.next();null!==m&&!y.done;v++,y=s.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===d?c=b:d.sibling=b,d=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=s.next())null!==(y=f(o,y.value,u))&&(l=i(y,l,v),null===d?c=y:d.sibling=y,d=y);return c}for(m=r(o,m);!y.done;v++,y=s.next())null!==(y=h(m,o,v,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===S&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case x:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===S){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=ki(e,u,i),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===S?((r=Us(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Hs(i.type,i.key,i.props,null,e.mode,s)).ref=ki(e,r,i),s.return=e,e=s)}return l(e);case E:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ks(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=qs(i,e.mode,s)).return=e,e=r),l(e);if(wi(i))return m(e,r,i,s);if(B(i))return v(e,r,i,s);if(c&&xi(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var Si=Ei(!0),Ci=Ei(!1),Pi={},Oi=ao(Pi),Ri=ao(Pi),Ti=ao(Pi);function Mi(e){if(e===Pi)throw Error(a(174));return e}function Zi(e,t){switch(so(Ti,t),so(Ri,e),so(Oi,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Oi),so(Oi,t)}function Ni(){lo(Oi),lo(Ri),lo(Ti)}function _i(e){Mi(Ti.current);var t=Mi(Oi.current),n=he(t,e.type);t!==n&&(so(Ri,e),so(Oi,n))}function Li(e){Ri.current===e&&(lo(Oi),lo(Ri))}var Ai=ao(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ii=null,Di=null,zi=!1;function Wi(e,t){var n=Fs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Bi(e){if(zi){var t=Di;if(t){var n=t;if(!Fi(e,t)){if(!(t=Ur(n.nextSibling))||!Fi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Ii=e);Wi(Ii,n)}Ii=e,Di=Ur(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Ii=e}}function $i(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ii=e}function Hi(e){if(e!==Ii)return!1;if(!zi)return $i(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fr(t,e.memoizedProps))for(t=Di;t;)Wi(e,t),t=Ur(t.nextSibling);if($i(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Di=Ur(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Di=null}}else Di=Ii?Ur(e.stateNode.nextSibling):null;return!0}function Ui(){Di=Ii=null,zi=!1}var Vi=[];function qi(){for(var e=0;e<Vi.length;e++)Vi[e]._workInProgressVersionPrimary=null;Vi.length=0}var Ki=k.ReactCurrentDispatcher,Yi=k.ReactCurrentBatchConfig,Qi=0,Xi=null,Gi=null,Ji=null,ea=!1,ta=!1;function na(){throw Error(a(321))}function ra(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function oa(e,t,n,r,o,i){if(Qi=i,Xi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ki.current=null===e||null===e.memoizedState?Ma:Za,e=n(r,o),ta){i=0;do{if(ta=!1,!(25>i))throw Error(a(301));i+=1,Ji=Gi=null,t.updateQueue=null,Ki.current=Na,e=n(r,o)}while(ta)}if(Ki.current=Ta,t=null!==Gi&&null!==Gi.next,Qi=0,Ji=Gi=Xi=null,ea=!1,t)throw Error(a(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ji?Xi.memoizedState=Ji=e:Ji=Ji.next=e,Ji}function aa(){if(null===Gi){var e=Xi.alternate;e=null!==e?e.memoizedState:null}else e=Gi.next;var t=null===Ji?Xi.memoizedState:Ji.next;if(null!==t)Ji=t,Gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Gi=e).memoizedState,baseState:Gi.baseState,baseQueue:Gi.baseQueue,queue:Gi.queue,next:null},null===Ji?Xi.memoizedState=Ji=e:Ji=Ji.next=e}return Ji}function la(e,t){return"function"==typeof t?t(e):t}function sa(e){var t=aa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=i=null,u=o;do{var c=u.lane;if((Qi&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=d,i=r):s=s.next=d,Xi.lanes|=c,Dl|=c}u=u.next}while(null!==u&&u!==o);null===s?i=r:s.next=l,lr(r,t.memoizedState)||(La=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=aa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(La=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Qi&e)===e)&&(t._workInProgressVersionPrimary=r,Vi.push(t))),e)return n(t._source);throw Vi.push(t),Error(a(350))}function da(e,t,n,r){var o=Ml;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),s=Ki.current,u=s.useState((function(){return ca(o,t,n)})),c=u[1],d=u[0];u=Ji;var f=e.memoizedState,p=f.refs,h=p.getSnapshot,m=f.source;f=f.subscribe;var v=Xi;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!lr(l,e)){e=n(t._source),lr(d,e)||(c(e),e=cs(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var s=31-Ht(a),u=1<<s;r[s]|=e,a&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cs(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),lr(h,n)&&lr(m,t)&&lr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:d}).dispatch=c=Ra.bind(null,Xi,e),u.queue=e,u.baseQueue=null,d=ca(o,t,n),u.memoizedState=u.baseState=d),d}function fa(e,t,n){return da(aa(),e,t,n)}function pa(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Ra.bind(null,Xi,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xi.updateQueue)?(t={lastEffect:null},Xi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ma(e){return e={current:e},ia().memoizedState=e}function va(){return aa().memoizedState}function ga(e,t,n,r){var o=ia();Xi.flags|=e,o.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function ya(e,t,n,r){var o=aa();r=void 0===r?null:r;var i=void 0;if(null!==Gi){var a=Gi.memoizedState;if(i=a.destroy,null!==r&&ra(r,a.deps))return void ha(t,n,i,r)}Xi.flags|=e,o.memoizedState=ha(1|t,n,i,r)}function ba(e,t){return ga(516,4,e,t)}function wa(e,t){return ya(516,4,e,t)}function ka(e,t){return ya(4,2,e,t)}function xa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,xa.bind(null,t,e),n)}function Sa(){}function Ca(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pa(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Bo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function Ra(e,t,n){var r=us(),o=cs(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Xi||null!==a&&a===Xi)ta=ea=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=a(l,n);if(i.eagerReducer=a,i.eagerState=s,lr(s,l))return}catch(e){}ds(e,o,r)}}var Ta={readContext:oi,useCallback:na,useContext:na,useEffect:na,useImperativeHandle:na,useLayoutEffect:na,useMemo:na,useReducer:na,useRef:na,useState:na,useDebugValue:na,useDeferredValue:na,useTransition:na,useMutableSource:na,useOpaqueIdentifier:na,unstable_isNewReconciler:!1},Ma={readContext:oi,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:oi,useEffect:ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ga(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ra.bind(null,Xi,e),[r.memoizedState,e]},useRef:ma,useState:pa,useDebugValue:Sa,useDeferredValue:function(e){var t=pa(e),n=t[0],r=t[1];return ba((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=pa(!1),t=e[0];return ma(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},da(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(a(355))})),n=pa(t)[1];return 0==(2&Xi.mode)&&(Xi.flags|=516,ha(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return pa(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Za={readContext:oi,useCallback:Ca,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Pa,useReducer:sa,useRef:va,useState:function(){return sa(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=sa(la),n=t[0],r=t[1];return wa((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=sa(la)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return sa(la)[0]},unstable_isNewReconciler:!1},Na={readContext:oi,useCallback:Ca,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Pa,useReducer:ua,useRef:va,useState:function(){return ua(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(la),n=t[0],r=t[1];return wa((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ua(la)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},_a=k.ReactCurrentOwner,La=!1;function Aa(e,t,n,r){t.child=null===e?Ci(t,null,n,r):Si(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=oa(e,t,n,r,i,o),null===e||La?(t.flags|=1,Aa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ia(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hs(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?nl(e,t,i):(t.flags|=1,(e=$s(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,o,i){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(La=!1,0==(i&o))return t.lanes=e.lanes,nl(e,t,i);0!=(16384&e.flags)&&(La=!0)}return Fa(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bs(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bs(t,e),null;t.memoizedState={baseLanes:0},bs(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bs(t,r);return Aa(e,t,o,n),t.child}function Wa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Fa(e,t,n,r,o){var i=mo(n)?po:co.current;return i=ho(t,i),ri(t,o),n=oa(e,t,n,r,i,o),null===e||La?(t.flags|=1,Aa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ba(e,t,n,r,o){if(mo(n)){var i=!0;bo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),gi(t,n,r),bi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=oi(u):u=ho(t,u=mo(n)?po:co.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&yi(t,a,r,u),ii=!1;var f=t.memoizedState;a.state=f,di(t,r,a,o),s=t.memoizedState,l!==r||f!==s||fo.current||ii?("function"==typeof c&&(hi(t,n,c,r),s=t.memoizedState),(l=ii||vi(t,n,l,r,f,s,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,li(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Yo(t.type,l),a.props=u,d=t.pendingProps,f=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=oi(s):s=ho(t,s=mo(n)?po:co.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==s)&&yi(t,a,r,s),ii=!1,f=t.memoizedState,a.state=f,di(t,r,a,o);var h=t.memoizedState;l!==d||f!==h||fo.current||ii?("function"==typeof p&&(hi(t,n,p,r),h=t.memoizedState),(u=ii||vi(t,n,u,r,f,h,s))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return $a(e,t,n,r,i,o)}function $a(e,t,n,r,o,i){Wa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&wo(t,n,!1),nl(e,t,i);r=t.stateNode,_a.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):Aa(e,t,l,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Ha(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Zi(e,t.containerInfo)}var Ua,Va,qa,Ka={dehydrated:null,retryLane:0};function Ya(e,t,n){var r,o=t.pendingProps,i=Ai.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),so(Ai,1&i),null===e?(void 0!==o.fallback&&Bi(t),e=o.children,i=o.fallback,a?(e=Qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,e):"number"==typeof o.unstable_expectedLoadTime?(e=Qa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,t.lanes=33554432,e):((n=Vs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Ga(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ka,o):(n=Xa(e,t,o.children,n),t.memoizedState=null,n))}function Qa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vs(t,o,0,null),n=Us(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xa(e,t,n,r){var o=e.child;return e=o.sibling,n=$s(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Ga(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=$s(a,l),null!==e?r=$s(e,r):(r=Us(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ni(e.return,t)}function el(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Aa(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,i,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=$s(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$s(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mo(t.type)&&vo(),null;case 3:return Ni(),lo(fo),lo(co),qi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Hi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Li(t);var i=Mi(Ti.current);if(n=t.type,null!==e&&null!=t.stateNode)Va(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Mi(Oi.current),Hi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Yr]=t,r[Qr]=l,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Or(Er[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,l),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Or("invalid",r);break;case"textarea":se(r,l),Or("invalid",r)}for(var u in Se(n,l),e=null,l)l.hasOwnProperty(u)&&(i=l[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Or("scroll",r));switch(n){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Qr]=r,Ua(e,t),t.stateNode=e,u=Ce(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<Er.length;i++)Or(Er[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":se(e,r),i=le(e,r),Or("invalid",e);break;default:i=r}Se(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?xe(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Or("scroll",e):null!=d&&w(e,l,d,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Ir)}Wr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Mi(Ti.current),Mi(Oi.current),Hi(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return lo(Ai),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Hi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?0===Al&&(Al=3):(0!==Al&&3!==Al||(Al=4),null===Ml||0==(134217727&Dl)&&0==(134217727&zl)||ms(Ml,Nl))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return ti(t),null;case 17:return mo(t.type)&&vo(),null;case 19:if(lo(Ai),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)rl(r,!1);else{if(0!==Al||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=ji(e))){for(t.flags|=64,rl(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return so(Ai,1&Ai.current|2),t.child}e=e.sibling}null!==r.tail&&Fo()>$l&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=ji(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>$l&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=Ai.current,so(Ai,l?1&t|2:1&t),n):null;case 23:case 24:return ws(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function il(e){switch(e.tag){case 1:mo(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),lo(fo),lo(co),qi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Li(e),null;case 13:return lo(Ai),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(Ai),null;case 4:return Ni(),null;case 10:return ti(e),null;case 23:case 24:return ws(),null;default:return null}}function al(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Va=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Mi(Oi.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(d in Se(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Or("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===A?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var sl="function"==typeof WeakMap?WeakMap:Map;function ul(e,t,n){(n=si(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ql||(ql=!0,Kl=r),ll(0,t)},n}function cl(e,t,n){(n=si(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var dl="function"==typeof WeakSet?WeakSet:Set;function fl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Is(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ls(n,e),_s(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Wr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ke("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vl(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ls(t,n);else{r=t;try{o()}catch(e){Is(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Is(t,e)}break;case 5:fl(t);break;case 4:xl(e,t)}}function gl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):kl(e,n,t)}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function kl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(kl(e,t,n),e=e.sibling;null!==e;)kl(e,t,n),e=e.sibling}function xl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(vl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function El(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,o),t=Ce(e,r),o=0;o<i.length;o+=2){var l=i[o],s=i[o+1];"style"===l?xe(n,s):"dangerouslySetInnerHTML"===l?ge(n,s):"children"===l?ye(n,s):w(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),ml(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(a(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new dl),t.forEach((function(t){var r=zs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Cl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Pl=Math.ceil,Ol=k.ReactCurrentDispatcher,Rl=k.ReactCurrentOwner,Tl=0,Ml=null,Zl=null,Nl=0,_l=0,Ll=ao(0),Al=0,jl=null,Il=0,Dl=0,zl=0,Wl=0,Fl=null,Bl=0,$l=1/0;function Hl(){$l=Fo()+500}var Ul,Vl=null,ql=!1,Kl=null,Yl=null,Ql=!1,Xl=null,Gl=90,Jl=[],es=[],ts=null,ns=0,rs=null,os=-1,is=0,as=0,ls=null,ss=!1;function us(){return 0!=(48&Tl)?Fo():-1!==os?os:os=Fo()}function cs(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===is&&(is=Il),0!==Ko.transition){0!==as&&(as=null!==Fl?Fl.pendingLanes:0),e=is;var t=4186112&~as;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!=(4&Tl)&&98===e?e=Wt(12,is):e=Wt(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),is),e}function ds(e,t,n){if(50<ns)throw ns=0,rs=null,Error(a(185));if(null===(e=fs(e,t)))return null;$t(e,t,n),e===Ml&&(zl|=t,4===Al&&ms(e,Nl));var r=Bo();1===t?0!=(8&Tl)&&0==(48&Tl)?vs(e):(ps(e,n),0===Tl&&(Hl(),Vo())):(0==(4&Tl)||98!==r&&99!==r||(null===ts?ts=new Set([e]):ts.add(e)),ps(e,n)),Fl=e}function fs(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ps(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Ht(l),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,It(u);var d=jt;i[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Dt(e,e===Ml?Nl:0),t=jt,0===r)null!==n&&(n!==Ao&&Co(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ao&&Co(n)}15===t?(n=vs.bind(null,e),null===Io?(Io=[n],Do=So(Mo,qo)):Io.push(n),n=Ao):14===t?n=Uo(99,vs.bind(null,e)):n=Uo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),hs.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function hs(e){if(os=-1,as=is=0,0!=(48&Tl))throw Error(a(327));var t=e.callbackNode;if(Ns()&&e.callbackNode!==t)return null;var n=Dt(e,e===Ml?Nl:0);if(0===n)return null;var r=n,o=Tl;Tl|=16;var i=Es();for(Ml===e&&Nl===r||(Hl(),ks(e,r));;)try{Ps();break}catch(t){xs(e,t)}if(ei(),Ol.current=i,Tl=o,null!==Zl?r=0:(Ml=null,Nl=0,r=Al),0!=(Il&zl))ks(e,0);else if(0!==r){if(2===r&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=zt(e))&&(r=Ss(e,n))),1===r)throw t=jl,ks(e,0),ms(e,n),ps(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ts(e);break;case 3:if(ms(e,n),(62914560&n)===n&&10<(r=Bl+500-Fo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){us(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(Ts.bind(null,e),r);break}Ts(e);break;case 4:if(ms(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Ht(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Fo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Pl(n/1960))-n)){e.timeoutHandle=Br(Ts.bind(null,e),n);break}Ts(e);break;case 5:Ts(e);break;default:throw Error(a(329))}}return ps(e,Fo()),e.callbackNode===t?hs.bind(null,e):null}function ms(e,t){for(t&=~Wl,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function vs(e){if(0!=(48&Tl))throw Error(a(327));if(Ns(),e===Ml&&0!=(e.expiredLanes&Nl)){var t=Nl,n=Ss(e,t);0!=(Il&zl)&&(n=Ss(e,t=Dt(e,t)))}else n=Ss(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Tl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=zt(e))&&(n=Ss(e,t))),1===n)throw n=jl,ks(e,0),ms(e,t),ps(e,Fo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ts(e),ps(e,Fo()),null}function gs(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Vo())}}function ys(e,t){var n=Tl;Tl&=-2,Tl|=8;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Vo())}}function bs(e,t){so(Ll,_l),_l|=t,Il|=t}function ws(){_l=Ll.current,lo(Ll)}function ks(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Zl)for(n=Zl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ni(),lo(fo),lo(co),qi();break;case 5:Li(r);break;case 4:Ni();break;case 13:case 19:lo(Ai);break;case 10:ti(r);break;case 23:case 24:ws()}n=n.return}Ml=e,Zl=$s(e.current,null),Nl=_l=Il=t,Al=0,jl=null,Wl=zl=Dl=0}function xs(e,t){for(;;){var n=Zl;try{if(ei(),Ki.current=Ta,ea){for(var r=Xi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ea=!1}if(Qi=0,Ji=Gi=Xi=null,ta=!1,Rl.current=null,null===n||null===n.return){Al=1,jl=t,Zl=null;break}e:{var i=e,a=n.return,l=n,s=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Ai.current),f=a;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=f.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(p){var v=f.updateQueue;if(null===v){var g=new Set;g.add(u),f.updateQueue=g}else v.add(u);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=si(-1,1);y.tag=2,ui(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new sl,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var w=Ds.bind(null,i,u,l);u.then(w,w)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Al&&(Al=2),s=al(s,l),f=a;do{switch(f.tag){case 3:i=s,f.flags|=4096,t&=-t,f.lanes|=t,ci(f,ul(0,i,t));break e;case 1:i=s;var k=f.type,x=f.stateNode;if(0==(64&f.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Yl||!Yl.has(x)))){f.flags|=4096,t&=-t,f.lanes|=t,ci(f,cl(f,i,t));break e}}f=f.return}while(null!==f)}Rs(n)}catch(e){t=e,Zl===n&&null!==n&&(Zl=n=n.return);continue}break}}function Es(){var e=Ol.current;return Ol.current=Ta,null===e?Ta:e}function Ss(e,t){var n=Tl;Tl|=16;var r=Es();for(Ml===e&&Nl===t||ks(e,t);;)try{Cs();break}catch(t){xs(e,t)}if(ei(),Tl=n,Ol.current=r,null!==Zl)throw Error(a(261));return Ml=null,Nl=0,Al}function Cs(){for(;null!==Zl;)Os(Zl)}function Ps(){for(;null!==Zl&&!Po();)Os(Zl)}function Os(e){var t=Ul(e.alternate,e,_l);e.memoizedProps=e.pendingProps,null===t?Rs(e):Zl=t,Rl.current=null}function Rs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,_l)))return void(Zl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&_l)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=il(t)))return n.flags&=2047,void(Zl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Zl=t);Zl=t=e}while(null!==t);0===Al&&(Al=5)}function Ts(e){var t=Bo();return Ho(99,Ms.bind(null,e,t)),null}function Ms(e,t){do{Ns()}while(null!==Xl);if(0!=(48&Tl))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-Ht(i),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,i&=~c}if(null!==ts&&0==(24&r)&&ts.has(e)&&ts.delete(e),e===Ml&&(Zl=Ml=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Tl,Tl|=32,Rl.current=null,Dr=Yt,hr(l=pr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,f=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==s||0!==i&&3!==v.nodeType||(f=d+i),v!==u||0!==c&&3!==v.nodeType||(p=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===s&&++h===i&&(f=d),g===u&&++m===c&&(p=d),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}s=-1===f||-1===p?null:{start:f,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;zr={focusedElem:l,selectionRange:s},Yt=!1,ls=null,ss=!1,Vl=r;do{try{Zs()}catch(e){if(null===Vl)throw Error(a(330));Is(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);ls=null,Vl=r;do{try{for(l=e;null!==Vl;){var b=Vl.flags;if(16&b&&ye(Vl.stateNode,""),128&b){var w=Vl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl(Vl),Vl.flags&=-3;break;case 6:bl(Vl),Vl.flags&=-3,El(Vl.alternate,Vl);break;case 1024:Vl.flags&=-1025;break;case 1028:Vl.flags&=-1025,El(Vl.alternate,Vl);break;case 4:El(Vl.alternate,Vl);break;case 8:xl(l,s=Vl);var x=s.alternate;gl(s),null!==x&&gl(x)}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Is(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);if(k=zr,w=pr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&hr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),s=b.textContent.length,x=Math.min(l.start,s),l=void 0===l.end?x:Math.min(l.end,s),!k.extend&&x>l&&(s=l,l=x,x=s),s=dr(b,x),i=dr(b,l),s&&i&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==i.node||k.focusOffset!==i.offset)&&((w=w.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),x>l?(k.addRange(w),k.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!Dr,zr=Dr=null,e.current=n,Vl=r;do{try{for(b=e;null!==Vl;){var E=Vl.flags;if(36&E&&hl(b,Vl.alternate,Vl),128&E){w=void 0;var S=Vl.ref;if(null!==S){var C=Vl.stateNode;switch(Vl.tag){case 5:w=C;break;default:w=C}"function"==typeof S?S(w):S.current=w}}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Is(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=null,jo(),Tl=o}else e.current=n;if(Ql)Ql=!1,Xl=e,Gl=t;else for(Vl=r;null!==Vl;)t=Vl.nextEffect,Vl.nextEffect=null,8&Vl.flags&&((E=Vl).sibling=null,E.stateNode=null),Vl=t;if(0===(r=e.pendingLanes)&&(Yl=null),1===r?e===rs?ns++:(ns=0,rs=e):ns=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(ps(e,Fo()),ql)throw ql=!1,e=Kl,Kl=null,e;return 0!=(8&Tl)||Vo(),null}function Zs(){for(;null!==Vl;){var e=Vl.alternate;ss||null===ls||(0!=(8&Vl.flags)?et(Vl,ls)&&(ss=!0):13===Vl.tag&&Cl(e,Vl)&&et(Vl,ls)&&(ss=!0));var t=Vl.flags;0!=(256&t)&&pl(e,Vl),0==(512&t)||Ql||(Ql=!0,Uo(97,(function(){return Ns(),null}))),Vl=Vl.nextEffect}}function Ns(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,Ho(e,As)}return!1}function _s(e,t){Jl.push(t,e),Ql||(Ql=!0,Uo(97,(function(){return Ns(),null})))}function Ls(e,t){es.push(t,e),Ql||(Ql=!0,Uo(97,(function(){return Ns(),null})))}function As(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!=(48&Tl))throw Error(a(331));var t=Tl;Tl|=32;var n=es;es=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Is(i,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===i)throw Error(a(330));Is(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Tl=t,Vo(),!0}function js(e,t,n){ui(e,t=ul(0,t=al(n,t),1)),t=us(),null!==(e=fs(e,1))&&($t(e,1,t),ps(e,t))}function Is(e,t){if(3===e.tag)js(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){js(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){var o=cl(n,e=al(t,e),1);if(ui(n,o),o=us(),null!==(n=fs(n,1)))$t(n,1,o),ps(n,o);else if("function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ds(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=us(),e.pingedLanes|=e.suspendedLanes&n,Ml===e&&(Nl&n)===n&&(4===Al||3===Al&&(62914560&Nl)===Nl&&500>Fo()-Bl?ks(e,0):Wl|=n),ps(e,t)}function zs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===is&&(is=Il),0===(t=Ft(62914560&~is))&&(t=4194304))),n=us(),null!==(e=fs(e,t))&&($t(e,t,n),ps(e,n))}function Ws(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fs(e,t,n,r){return new Ws(e,t,n,r)}function Bs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $s(e,t){var n=e.alternate;return null===n?((n=Fs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hs(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Bs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Us(n.children,o,i,t);case j:l=8,o|=16;break;case C:l=8,o|=1;break;case P:return(e=Fs(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=i,e;case M:return(e=Fs(13,n,t,o)).type=M,e.elementType=M,e.lanes=i,e;case Z:return(e=Fs(19,n,t,o)).elementType=Z,e.lanes=i,e;case I:return Vs(n,o,i,t);case D:return(e=Fs(24,n,t,o)).elementType=D,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case R:l=9;break e;case T:l=11;break e;case N:l=14;break e;case _:l=16,r=null;break e;case L:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fs(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Us(e,t,n,r){return(e=Fs(7,e,r,t)).lanes=n,e}function Vs(e,t,n,r){return(e=Fs(23,e,r,t)).elementType=I,e.lanes=n,e}function qs(e,t,n){return(e=Fs(6,e,null,t)).lanes=n,e}function Ks(e,t,n){return(t=Fs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ys(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Qs(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Xs(e,t,n,r){var o=t.current,i=us(),l=cs(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(mo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var u=n.type;if(mo(u)){n=yo(n,u,s);break e}}n=s}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),ds(o,l,i),l}function Gs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Js(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Js(e,t),(e=e.alternate)&&Js(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ys(e,t,null!=n&&!0===n.hydrate),t=Fs(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ai(t),e[Xr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Gs(a);l.call(e)}}Xs(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Gs(a);s.call(e)}}ys((function(){Xs(t,a,e,o)}))}return Gs(a)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return Qs(e,t,null,n)}Ul=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)La=!0;else{if(0==(n&r)){switch(La=!1,t.tag){case 3:Ha(t),Ui();break;case 5:_i(t);break;case 1:mo(t.type)&&bo(t);break;case 4:Zi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;so(Qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ya(e,t,n):(so(Ai,1&Ai.current),null!==(t=nl(e,t,n))?t.sibling:null);so(Ai,1&Ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),so(Ai,Ai.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return nl(e,t,n)}La=0!=(16384&e.flags)}else La=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,co.current),ri(t,n),o=oa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mo(r)){var i=!0;bo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&hi(t,r,l,e),o.updater=mi,t.stateNode=o,o._reactInternals=t,bi(t,r,e,n),t=$a(null,t,r,!0,i,n)}else t.tag=0,Aa(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bs(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===N)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=Fa(null,t,o,e,n);break e;case 1:t=Ba(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=Ia(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Ha(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),di(t,r,null,n),(r=t.memoizedState.element)===o)Ui(),t=nl(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Di=Ur(t.stateNode.containerInfo.firstChild),Ii=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Vi.push(i);for(n=Ci(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Aa(e,t,r,n),Ui();t=t.child}return t;case 5:return _i(t),null===e&&Bi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,Fr(r,o)?l=null:null!==i&&Fr(r,i)&&(t.flags|=16),Wa(e,t),Aa(e,t,l,n),t.child;case 6:return null===e&&Bi(t),null;case 13:return Ya(e,t,n);case 4:return Zi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Aa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var s=t.type._context;if(so(Qo,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0===(i=lr(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===o.children&&!fo.current){t=nl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=si(-1,n&-n)).tag=2,ui(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ni(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Aa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.flags|=1,Aa(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Ia(e,t,o,i=Yo(o.type,i),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mo(r)?(e=!0,bo(t)):e=!1,ri(t,n),gi(t,r,o),bi(t,r,o,n),$a(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Xs(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xs(null,e,null,(function(){t[Xr]=null}))},tt=function(e){13===e.tag&&(ds(e,4,us()),eu(e,4))},nt=function(e){13===e.tag&&(ds(e,67108864,us()),eu(e,67108864))},rt=function(e){if(13===e.tag){var t=us(),n=cs(e);ds(e,n,t),eu(e,n)}},ot=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=no(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},_e=gs,Le=function(e,t,n,r,o){var i=Tl;Tl|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(Tl=i)&&(Hl(),Vo())}},Ae=function(){0==(49&Tl)&&(function(){if(null!==ts){var e=ts;ts=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ps(e,Fo())}))}Vo()}(),Ns())},je=function(e,t){var n=Tl;Tl|=2;try{return e(t)}finally{0===(Tl=n)&&(Hl(),Vo())}};var iu={Events:[eo,to,no,Ze,Ne,Ns,{current:!1}]},au={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lu={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var su=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!su.isDisabled&&su.supportsFiber)try{ko=su.inject(lu),xo=su}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=iu,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Tl;if(0!=(48&n))return e(t);Tl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Tl=n,Vo()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(ys((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=gs,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.1"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,l=60109,s=60110,u=60112,c=60113,d=60120,f=60115,p=60116,h=60121,m=60122,v=60117,g=60129,y=60131;if("function"==typeof Symbol&&Symbol.for){var b=Symbol.for;n=b("react.element"),r=b("react.portal"),o=b("react.fragment"),i=b("react.strict_mode"),a=b("react.profiler"),l=b("react.provider"),s=b("react.context"),u=b("react.forward_ref"),c=b("react.suspense"),d=b("react.suspense_list"),f=b("react.memo"),p=b("react.lazy"),h=b("react.block"),m=b("react.server.block"),v=b("react.fundamental"),g=b("react.debug_trace_mode"),y=b("react.legacy_hidden")}function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case c:case d:return e;default:switch(e=e&&e.$$typeof){case s:case u:case p:case f:case l:return e;default:return t}}case r:return t}}}},9864:(e,t,n)=>{"use strict";n(9921)},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===r?"."+P(s,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),O(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+P(l=e[u],u);s+=O(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(l=e.next()).done;)s+=O(l=l.value,t,n,c=r+P(l,u++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function R(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function Z(){var e=M.current;if(null===e)throw Error(p(321));return e}var N={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)k.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return Z().useCallback(e,t)},t.useContext=function(e,t){return Z().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return Z().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return Z().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return Z().useLayoutEffect(e,t)},t.useMemo=function(e,t){return Z().useMemo(e,t)},t.useReducer=function(e,t,n){return Z().useReducer(e,t,n)},t.useRef=function(e){return Z().useRef(e)},t.useState=function(e){return Z().useState(e)},t.version="17.0.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?k.postMessage(null):(m=!1,v=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,k.postMessage(null))},r=function(e,n){g=f((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,s=e[l];if(void 0!==a&&0>C(a,n))void 0!==s&&0>C(s,a)?(e[r]=s,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>C(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],R=1,T=null,M=3,Z=!1,N=!1,_=!1;function L(e){for(var t=E(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,x(P,t)}t=E(O)}}function A(e){if(_=!1,L(e),!N)if(null!==E(P))N=!0,n(j);else{var t=E(O);null!==t&&r(A,t.startTime-e)}}function j(e,n){N=!1,_&&(_=!1,o()),Z=!0;var i=M;try{for(L(n),T=E(P);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,M=T.priorityLevel;var l=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===E(P)&&S(P),L(n)}else S(P);T=E(P)}if(null!==T)var s=!0;else{var u=E(O);null!==u&&r(A,u.startTime-n),s=!1}return s}finally{T=null,M=i,Z=!1}}var I=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||Z||(N=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?l+a:l:a=l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:R++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,x(O,e),null===E(P)&&e===E(O)&&(_?o():_=!0,r(A,a-l))):(e.sortIndex=s,x(P,e),N||Z||(N=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:(e,t,n)=>{"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],u=n[s]||0,c="".concat(s," ").concat(u);n[s]=u+1;var d=l(c),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:c,updater:v(f,t),references:1}),r.push(c)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,o;if(t.singleton){var i=m++;n=h||(h=u(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);a[o].references--}for(var i=s(e,t),u=0;u<n.length;u++){var c=l(n[u]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=i}}}},1796:function(e){var t;t=function(){return(()=>{var e={"./src/drawer.canvasentry.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n("./src/util/style.js")),o=i(n("./src/util/get-id.js"));function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.wave=null,this.waveCtx=null,this.progress=null,this.progressCtx=null,this.start=0,this.end=1,this.id=(0,o.default)(void 0!==this.constructor.name?this.constructor.name.toLowerCase()+"_":"canvasentry_"),this.canvasContextAttributes={}}var t,n,i;return t=e,(n=[{key:"initWave",value:function(e){this.wave=e,this.waveCtx=this.wave.getContext("2d",this.canvasContextAttributes)}},{key:"initProgress",value:function(e){this.progress=e,this.progressCtx=this.progress.getContext("2d",this.canvasContextAttributes)}},{key:"updateDimensions",value:function(e,t,n,o){this.start=this.wave.offsetLeft/t||0,this.end=this.start+e/t,this.wave.width=n,this.wave.height=o;var i={width:e+"px"};(0,r.default)(this.wave,i),this.hasProgressCanvas&&(this.progress.width=n,this.progress.height=o,(0,r.default)(this.progress,i))}},{key:"clearWave",value:function(){this.waveCtx.clearRect(0,0,this.waveCtx.canvas.width,this.waveCtx.canvas.height),this.hasProgressCanvas&&this.progressCtx.clearRect(0,0,this.progressCtx.canvas.width,this.progressCtx.canvas.height)}},{key:"setFillStyles",value:function(e,t){this.waveCtx.fillStyle=e,this.hasProgressCanvas&&(this.progressCtx.fillStyle=t)}},{key:"fillRects",value:function(e,t,n,r,o){this.fillRectToContext(this.waveCtx,e,t,n,r,o),this.hasProgressCanvas&&this.fillRectToContext(this.progressCtx,e,t,n,r,o)}},{key:"fillRectToContext",value:function(e,t,n,r,o,i){e&&(i?this.drawRoundedRect(e,t,n,r,o,i):e.fillRect(t,n,r,o))}},{key:"drawRoundedRect",value:function(e,t,n,r,o,i){0!==o&&(o<0&&(n-=o*=-1),e.beginPath(),e.moveTo(t+i,n),e.lineTo(t+r-i,n),e.quadraticCurveTo(t+r,n,t+r,n+i),e.lineTo(t+r,n+o-i),e.quadraticCurveTo(t+r,n+o,t+r-i,n+o),e.lineTo(t+i,n+o),e.quadraticCurveTo(t,n+o,t,n+o-i),e.lineTo(t,n+i),e.quadraticCurveTo(t,n,t+i,n),e.closePath(),e.fill())}},{key:"drawLines",value:function(e,t,n,r,o,i){this.drawLineToContext(this.waveCtx,e,t,n,r,o,i),this.hasProgressCanvas&&this.drawLineToContext(this.progressCtx,e,t,n,r,o,i)}},{key:"drawLineToContext",value:function(e,t,n,r,o,i,a){if(e){var l,s,u,c=t.length/2,d=Math.round(c*this.start),f=d,p=Math.round(c*this.end)+1,h=this.wave.width/(p-f-1),m=r+o,v=n/r;for(e.beginPath(),e.moveTo((f-d)*h,m),e.lineTo((f-d)*h,m-Math.round((t[2*f]||0)/v)),l=f;l<p;l++)s=t[2*l]||0,u=Math.round(s/v),e.lineTo((l-d)*h+this.halfPixel,m-u);for(var g=p-1;g>=f;g--)s=t[2*g+1]||0,u=Math.round(s/v),e.lineTo((g-d)*h+this.halfPixel,m-u);e.lineTo((f-d)*h,m-Math.round((t[2*f+1]||0)/v)),e.closePath(),e.fill()}}},{key:"destroy",value:function(){this.waveCtx=null,this.wave=null,this.progressCtx=null,this.progress=null}},{key:"getImage",value:function(e,t,n){var r=this;return"blob"===n?new Promise((function(n){r.wave.toBlob(n,e,t)})):"dataURL"===n?this.wave.toDataURL(e,t):void 0}}])&&a(t.prototype,n),i&&a(t,i),e}();t.default=l,e.exports=t.default},"./src/drawer.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var l=o?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(n,a,l):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}(n("./src/util/index.js"));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(u,e);var t,n,r,i=s(u);function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this)).container=e,n.params=t,n.width=0,n.height=t.height*n.params.pixelRatio,n.lastPos=0,n.wrapper=null,n}return t=u,(n=[{key:"style",value:function(e,t){return o.style(e,t)}},{key:"createWrapper",value:function(){this.wrapper=this.container.appendChild(document.createElement("wave")),this.style(this.wrapper,{display:"block",position:"relative",userSelect:"none",webkitUserSelect:"none",height:this.params.height+"px"}),(this.params.fillParent||this.params.scrollParent)&&this.style(this.wrapper,{width:"100%",overflowX:this.params.hideScrollbar?"hidden":"auto",overflowY:"hidden"}),this.setupWrapperEvents()}},{key:"handleEvent",value:function(e,t){!t&&e.preventDefault();var n,r=e.targetTouches?e.targetTouches[0].clientX:e.clientX,i=this.wrapper.getBoundingClientRect(),a=this.width,l=this.getWidth();return n=!this.params.fillParent&&a<l?(this.params.rtl?i.right-r:r-i.left)*(this.params.pixelRatio/a)||0:((this.params.rtl?i.right-r:r-i.left)+this.wrapper.scrollLeft)/this.wrapper.scrollWidth||0,o.clamp(n,0,1)}},{key:"setupWrapperEvents",value:function(){var e=this;this.wrapper.addEventListener("click",(function(t){var n=e.wrapper.offsetHeight-e.wrapper.clientHeight;if(0!==n){var r=e.wrapper.getBoundingClientRect();if(t.clientY>=r.bottom-n)return}e.params.interact&&e.fireEvent("click",t,e.handleEvent(t))})),this.wrapper.addEventListener("dblclick",(function(t){e.params.interact&&e.fireEvent("dblclick",t,e.handleEvent(t))})),this.wrapper.addEventListener("scroll",(function(t){return e.fireEvent("scroll",t)}))}},{key:"drawPeaks",value:function(e,t,n,r){this.setWidth(t)||this.clearWave(),this.params.barWidth?this.drawBars(e,0,n,r):this.drawWave(e,0,n,r)}},{key:"resetScroll",value:function(){null!==this.wrapper&&(this.wrapper.scrollLeft=0)}},{key:"recenter",value:function(e){var t=this.wrapper.scrollWidth*e;this.recenterOnPosition(t,!0)}},{key:"recenterOnPosition",value:function(e,t){var n=this.wrapper.scrollLeft,r=~~(this.wrapper.clientWidth/2),o=this.wrapper.scrollWidth-this.wrapper.clientWidth,i=e-r,a=i-n;if(0!=o){if(!t&&-r<=a&&a<r){var l=this.params.autoCenterRate;l/=r,l*=o,i=n+(a=Math.max(-l,Math.min(l,a)))}(i=Math.max(0,Math.min(o,i)))!=n&&(this.wrapper.scrollLeft=i)}}},{key:"getScrollX",value:function(){var e=0;if(this.wrapper){var t=this.params.pixelRatio;if(e=Math.round(this.wrapper.scrollLeft*t),this.params.scrollParent){var n=~~(this.wrapper.scrollWidth*t-this.getWidth());e=Math.min(n,Math.max(0,e))}}return e}},{key:"getWidth",value:function(){return Math.round(this.container.clientWidth*this.params.pixelRatio)}},{key:"setWidth",value:function(e){return this.width!=e&&(this.width=e,this.params.fillParent||this.params.scrollParent?this.style(this.wrapper,{width:""}):this.style(this.wrapper,{width:~~(this.width/this.params.pixelRatio)+"px"}),this.updateSize(),!0)}},{key:"setHeight",value:function(e){return e!=this.height&&(this.height=e,this.style(this.wrapper,{height:~~(this.height/this.params.pixelRatio)+"px"}),this.updateSize(),!0)}},{key:"progress",value:function(e){var t=1/this.params.pixelRatio,n=Math.round(e*this.width)*t;if(n<this.lastPos||n-this.lastPos>=t){if(this.lastPos=n,this.params.scrollParent&&this.params.autoCenter){var r=~~(this.wrapper.scrollWidth*e);this.recenterOnPosition(r,this.params.autoCenterImmediately)}this.updateProgress(n)}}},{key:"destroy",value:function(){this.unAll(),this.wrapper&&(this.wrapper.parentNode==this.container&&this.container.removeChild(this.wrapper),this.wrapper=null)}},{key:"updateCursor",value:function(){}},{key:"updateSize",value:function(){}},{key:"drawBars",value:function(e,t,n,r){}},{key:"drawWave",value:function(e,t,n,r){}},{key:"clearWave",value:function(){}},{key:"updateProgress",value:function(e){}}])&&a(t.prototype,n),r&&a(t,r),u}(o.Observer);t.default=d,e.exports=t.default},"./src/drawer.multicanvas.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=s(n("./src/drawer.js")),i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n("./src/util/index.js")),a=s(n("./src/drawer.canvasentry.js"));function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(l,e);var t,n,r,o=d(l);function l(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(n=o.call(this,e,t)).maxCanvasWidth=t.maxCanvasWidth,n.maxCanvasElementWidth=Math.round(t.maxCanvasWidth/t.pixelRatio),n.hasProgressCanvas=t.waveColor!=t.progressColor,n.halfPixel=.5/t.pixelRatio,n.canvases=[],n.progressWave=null,n.EntryClass=a.default,n.canvasContextAttributes=t.drawingContextAttributes,n.overlap=2*Math.ceil(t.pixelRatio/2),n.barRadius=t.barRadius||0,n}return t=l,(n=[{key:"init",value:function(){this.createWrapper(),this.createElements()}},{key:"createElements",value:function(){this.progressWave=this.wrapper.appendChild(this.style(document.createElement("wave"),{position:"absolute",zIndex:3,left:0,top:0,bottom:0,overflow:"hidden",width:"0",display:"none",boxSizing:"border-box",borderRightStyle:"solid",pointerEvents:"none"})),this.addCanvas(),this.updateCursor()}},{key:"updateCursor",value:function(){this.style(this.progressWave,{borderRightWidth:this.params.cursorWidth+"px",borderRightColor:this.params.cursorColor})}},{key:"updateSize",value:function(){for(var e=this,t=Math.round(this.width/this.params.pixelRatio),n=Math.ceil(t/(this.maxCanvasElementWidth+this.overlap));this.canvases.length<n;)this.addCanvas();for(;this.canvases.length>n;)this.removeCanvas();var r=this.maxCanvasWidth+this.overlap,o=this.canvases.length-1;this.canvases.forEach((function(t,n){n==o&&(r=e.width-e.maxCanvasWidth*o),e.updateDimensions(t,r,e.height),t.clearWave()}))}},{key:"addCanvas",value:function(){var e=new this.EntryClass;e.canvasContextAttributes=this.canvasContextAttributes,e.hasProgressCanvas=this.hasProgressCanvas,e.halfPixel=this.halfPixel;var t=this.maxCanvasElementWidth*this.canvases.length;e.initWave(this.wrapper.appendChild(this.style(document.createElement("canvas"),{position:"absolute",zIndex:2,left:t+"px",top:0,bottom:0,height:"100%",pointerEvents:"none"}))),this.hasProgressCanvas&&e.initProgress(this.progressWave.appendChild(this.style(document.createElement("canvas"),{position:"absolute",left:t+"px",top:0,bottom:0,height:"100%"}))),this.canvases.push(e)}},{key:"removeCanvas",value:function(){var e=this.canvases[this.canvases.length-1];e.wave.parentElement.removeChild(e.wave),this.hasProgressCanvas&&e.progress.parentElement.removeChild(e.progress),e&&(e.destroy(),e=null),this.canvases.pop()}},{key:"updateDimensions",value:function(e,t,n){var r=Math.round(t/this.params.pixelRatio),o=Math.round(this.width/this.params.pixelRatio);e.updateDimensions(r,o,t,n),this.style(this.progressWave,{display:"block"})}},{key:"clearWave",value:function(){var e=this;i.frame((function(){e.canvases.forEach((function(e){return e.clearWave()}))}))()}},{key:"drawBars",value:function(e,t,n,r){var o=this;return this.prepareDraw(e,t,n,r,(function(e){var t=e.absmax,i=e.hasMinVals,a=(e.height,e.offsetY),l=e.halfH,s=e.peaks,u=e.channelIndex;if(void 0!==n)for(var c=i?2:1,d=s.length/c,f=o.params.barWidth*o.params.pixelRatio,p=f+(null===o.params.barGap?Math.max(o.params.pixelRatio,~~(f/2)):Math.max(o.params.pixelRatio,o.params.barGap*o.params.pixelRatio)),h=d/o.width,m=r,v=n;v<m;v+=p){var g=s[Math.floor(v*h*c)]||0,y=Math.round(g/t*l);0==y&&o.params.barMinHeight&&(y=o.params.barMinHeight),o.fillRect(v+o.halfPixel,l-y+a,f+o.halfPixel,2*y,o.barRadius,u)}}))}},{key:"drawWave",value:function(e,t,n,r){var o=this;return this.prepareDraw(e,t,n,r,(function(e){var t=e.absmax,i=e.hasMinVals,a=(e.height,e.offsetY),l=e.halfH,s=e.peaks,u=e.channelIndex;if(!i){for(var c=[],d=s.length,f=0;f<d;f++)c[2*f]=s[f],c[2*f+1]=-s[f];s=c}void 0!==n&&o.drawLine(s,t,l,a,n,r,u),o.fillRect(0,l+a-o.halfPixel,o.width,o.halfPixel,o.barRadius,u)}))}},{key:"drawLine",value:function(e,t,n,r,o,i,a){var l=this,s=this.params.splitChannelsOptions.channelColors[a]||{},u=s.waveColor,c=s.progressColor;this.canvases.forEach((function(a,s){l.setFillStyles(a,u,c),a.drawLines(e,t,n,r,o,i)}))}},{key:"fillRect",value:function(e,t,n,r,o,i){for(var a=Math.floor(e/this.maxCanvasWidth),l=Math.min(Math.ceil((e+n)/this.maxCanvasWidth)+1,this.canvases.length),s=a;s<l;s++){var u=this.canvases[s],c=s*this.maxCanvasWidth,d={x1:Math.max(e,s*this.maxCanvasWidth),y1:t,x2:Math.min(e+n,s*this.maxCanvasWidth+u.wave.width),y2:t+r};if(d.x1<d.x2){var f=this.params.splitChannelsOptions.channelColors[i]||{},p=f.waveColor,h=f.progressColor;this.setFillStyles(u,p,h),u.fillRects(d.x1-c,d.y1,d.x2-d.x1,d.y2-d.y1,o)}}}},{key:"hideChannel",value:function(e){return this.params.splitChannels&&this.params.splitChannelsOptions.filterChannels.includes(e)}},{key:"prepareDraw",value:function(e,t,n,r,o,a,l){var s=this;return i.frame((function(){if(e[0]instanceof Array){var u=e;if(s.params.splitChannels){var c,d=u.filter((function(e,t){return!s.hideChannel(t)}));return s.params.splitChannelsOptions.overlay||s.setHeight(Math.max(d.length,1)*s.params.height*s.params.pixelRatio),s.params.splitChannelsOptions&&s.params.splitChannelsOptions.relativeNormalization&&(c=i.max(u.map((function(e){return i.absMax(e)})))),u.forEach((function(e,t){return s.prepareDraw(e,t,n,r,o,d.indexOf(e),c)}))}e=u[0]}if(!s.hideChannel(t)){var f=1/s.params.barHeight;s.params.normalize&&(f=void 0===l?i.absMax(e):l);var p=[].some.call(e,(function(e){return e<0})),h=s.params.height*s.params.pixelRatio,m=h/2,v=h*a||0;return s.params.splitChannelsOptions&&s.params.splitChannelsOptions.overlay&&(v=0),o({absmax:f,hasMinVals:p,height:h,offsetY:v,halfH:m,peaks:e,channelIndex:t})}}))()}},{key:"setFillStyles",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.params.waveColor,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.params.progressColor;e.setFillStyles(t,n)}},{key:"getImage",value:function(e,t,n){if("blob"===n)return Promise.all(this.canvases.map((function(r){return r.getImage(e,t,n)})));if("dataURL"===n){var r=this.canvases.map((function(r){return r.getImage(e,t,n)}));return r.length>1?r:r[0]}}},{key:"updateProgress",value:function(e){this.style(this.progressWave,{width:e+"px"})}}])&&u(t.prototype,n),r&&u(t,r),l}(o.default);t.default=h,e.exports=t.default},"./src/mediaelement-webaudio.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o;function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=c(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(u,e);var t,n,r,o=s(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=o.call(this,e)).params=e,t.sourceMediaElement=null,t}return t=u,(n=[{key:"init",value:function(){this.setPlaybackRate(this.params.audioRate),this.createTimer(),this.createVolumeNode(),this.createScriptNode(),this.createAnalyserNode()}},{key:"_load",value:function(e,t,n){a(c(u.prototype),"_load",this).call(this,e,t,n),this.createMediaElementSource(e)}},{key:"createMediaElementSource",value:function(e){this.sourceMediaElement=this.ac.createMediaElementSource(e),this.sourceMediaElement.connect(this.analyser)}},{key:"play",value:function(e,t){return this.resumeAudioContext(),a(c(u.prototype),"play",this).call(this,e,t)}},{key:"destroy",value:function(){a(c(u.prototype),"destroy",this).call(this),this.destroyWebAudio()}}])&&i(t.prototype,n),r&&i(t,r),u}(((o=n("./src/mediaelement.js"))&&o.__esModule?o:{default:o}).default);t.default=d,e.exports=t.default},"./src/mediaelement.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,i=(o=n("./src/webaudio.js"))&&o.__esModule?o:{default:o},a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n("./src/util/index.js"));function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(i,e);var t,n,r,o=d(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).params=e,t.media={currentTime:0,duration:0,paused:!0,playbackRate:1,play:function(){},pause:function(){},volume:0},t.mediaType=e.mediaType.toLowerCase(),t.elementPosition=e.elementPosition,t.peaks=null,t.playbackRate=1,t.volume=1,t.isMuted=!1,t.buffer=null,t.onPlayEnd=null,t.mediaListeners={},t}return t=i,(n=[{key:"init",value:function(){this.setPlaybackRate(this.params.audioRate),this.createTimer()}},{key:"_setupMediaListeners",value:function(){var e=this;this.mediaListeners.error=function(){e.fireEvent("error","Error loading media element")},this.mediaListeners.canplay=function(){e.fireEvent("canplay")},this.mediaListeners.ended=function(){e.fireEvent("finish")},this.mediaListeners.play=function(){e.fireEvent("play")},this.mediaListeners.pause=function(){e.fireEvent("pause")},this.mediaListeners.seeked=function(t){e.fireEvent("seek")},this.mediaListeners.volumechange=function(t){e.isMuted=e.media.muted,e.isMuted?e.volume=0:e.volume=e.media.volume,e.fireEvent("volume")},Object.keys(this.mediaListeners).forEach((function(t){e.media.removeEventListener(t,e.mediaListeners[t]),e.media.addEventListener(t,e.mediaListeners[t])}))}},{key:"createTimer",value:function(){var e=this;this.on("play",(function t(){e.isPaused()||(e.fireEvent("audioprocess",e.getCurrentTime()),a.frame(t)())})),this.on("pause",(function(){e.fireEvent("audioprocess",e.getCurrentTime())}))}},{key:"load",value:function(e,t,n,r){var o=document.createElement(this.mediaType);o.controls=this.params.mediaControls,o.autoplay=this.params.autoplay||!1,o.preload=null==r?"auto":r,o.src=e,o.style.width="100%";var i=t.querySelector(this.mediaType);i&&t.removeChild(i),t.appendChild(o),this._load(o,n,r)}},{key:"loadElt",value:function(e,t){e.controls=this.params.mediaControls,e.autoplay=this.params.autoplay||!1,this._load(e,t,e.preload)}},{key:"_load",value:function(e,t,n){if(!(e instanceof HTMLMediaElement)||void 0===e.addEventListener)throw new Error("media parameter is not a valid media element");"function"!=typeof e.load||t&&"none"==n||e.load(),this.media=e,this._setupMediaListeners(),this.peaks=t,this.onPlayEnd=null,this.buffer=null,this.isMuted=e.muted,this.setPlaybackRate(this.playbackRate),this.setVolume(this.volume)}},{key:"isPaused",value:function(){return!this.media||this.media.paused}},{key:"getDuration",value:function(){if(this.explicitDuration)return this.explicitDuration;var e=(this.buffer||this.media).duration;return e>=1/0&&(e=this.media.seekable.end(0)),e}},{key:"getCurrentTime",value:function(){return this.media&&this.media.currentTime}},{key:"getPlayedPercents",value:function(){return this.getCurrentTime()/this.getDuration()||0}},{key:"getPlaybackRate",value:function(){return this.playbackRate||this.media.playbackRate}},{key:"setPlaybackRate",value:function(e){this.playbackRate=e||1,this.media.playbackRate=this.playbackRate}},{key:"seekTo",value:function(e){null!=e&&(this.media.currentTime=e),this.clearPlayEnd()}},{key:"play",value:function(e,t){this.seekTo(e);var n=this.media.play();return t&&this.setPlayEnd(t),n}},{key:"pause",value:function(){var e;return this.media&&(e=this.media.pause()),this.clearPlayEnd(),e}},{key:"setPlayEnd",value:function(e){var t=this;this.clearPlayEnd(),this._onPlayEnd=function(n){n>=e&&(t.pause(),t.seekTo(e))},this.on("audioprocess",this._onPlayEnd)}},{key:"clearPlayEnd",value:function(){this._onPlayEnd&&(this.un("audioprocess",this._onPlayEnd),this._onPlayEnd=null)}},{key:"getPeaks",value:function(e,t,n){return this.buffer?u(p(i.prototype),"getPeaks",this).call(this,e,t,n):this.peaks||[]}},{key:"setSinkId",value:function(e){return e?this.media.setSinkId?this.media.setSinkId(e):Promise.reject(new Error("setSinkId is not supported in your browser")):Promise.reject(new Error("Invalid deviceId: "+e))}},{key:"getVolume",value:function(){return this.volume}},{key:"setVolume",value:function(e){this.volume=e,this.media.volume!==this.volume&&(this.media.volume=this.volume)}},{key:"setMute",value:function(e){this.isMuted=this.media.muted=e}},{key:"destroy",value:function(){var e=this;this.pause(),this.unAll(),this.destroyed=!0,Object.keys(this.mediaListeners).forEach((function(t){e.media&&e.media.removeEventListener(t,e.mediaListeners[t])})),this.params.removeMediaElementOnDestroy&&this.media&&this.media.parentNode&&this.media.parentNode.removeChild(this.media),this.media=null}}])&&s(t.prototype,n),r&&s(t,r),i}(i.default);t.default=h,e.exports=t.default},"./src/peakcache.js":(e,t)=>{"use strict";function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.clearPeakCache()}var t,r,o;return t=e,(r=[{key:"clearPeakCache",value:function(){this.peakCacheRanges=[],this.peakCacheLength=-1}},{key:"addRangeToPeakCache",value:function(e,t,n){e!=this.peakCacheLength&&(this.clearPeakCache(),this.peakCacheLength=e);for(var r=[],o=0;o<this.peakCacheRanges.length&&this.peakCacheRanges[o]<t;)o++;for(o%2==0&&r.push(t);o<this.peakCacheRanges.length&&this.peakCacheRanges[o]<=n;)r.push(this.peakCacheRanges[o]),o++;o%2==0&&r.push(n),r=r.filter((function(e,t,n){return 0==t?e!=n[t+1]:t==n.length-1?e!=n[t-1]:e!=n[t-1]&&e!=n[t+1]})),this.peakCacheRanges=this.peakCacheRanges.concat(r),this.peakCacheRanges=this.peakCacheRanges.sort((function(e,t){return e-t})).filter((function(e,t,n){return 0==t?e!=n[t+1]:t==n.length-1?e!=n[t-1]:e!=n[t-1]&&e!=n[t+1]}));var i=[];for(o=0;o<r.length;o+=2)i.push([r[o],r[o+1]]);return i}},{key:"getCacheRanges",value:function(){var e,t=[];for(e=0;e<this.peakCacheRanges.length;e+=2)t.push([this.peakCacheRanges[e],this.peakCacheRanges[e+1]]);return t}}])&&n(t.prototype,r),o&&n(t,o),e}();t.default=r,e.exports=t.default},"./src/util/absMax.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=(0,r.default)(e),n=(0,o.default)(e);return-n>t?-n:t};var r=i(n("./src/util/max.js")),o=i(n("./src/util/min.js"));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},"./src/util/clamp.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){return Math.min(Math.max(t,e),n)},e.exports=t.default},"./src/util/fetch.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)throw new Error("fetch options missing");if(!e.url)throw new Error("fetch url missing");var t=new o.default,n=new Headers,r=new Request(e.url);t.controller=new AbortController,e&&e.requestHeaders&&e.requestHeaders.forEach((function(e){n.append(e.key,e.value)}));var i=e.responseType||"json",l={method:e.method||"GET",headers:n,mode:e.mode||"cors",credentials:e.credentials||"same-origin",cache:e.cache||"default",redirect:e.redirect||"follow",referrer:e.referrer||"client",signal:t.controller.signal};return fetch(r,l).then((function(e){t.response=e;var n=!0;e.body||(n=!1);var r=e.headers.get("content-length");return null===r&&(n=!1),n?(t.onProgress=function(e){t.fireEvent("progress",e)},new Response(new ReadableStream(new a(t,r,e)),l)):e})).then((function(e){var t;if(e.ok)switch(i){case"arraybuffer":return e.arrayBuffer();case"json":return e.json();case"blob":return e.blob();case"text":return e.text();default:t="Unknown responseType: "+i}throw t||(t="HTTP error status: "+e.status),new Error(t)})).then((function(e){t.fireEvent("success",e)})).catch((function(e){t.fireEvent("error",e)})),t.fetchRequest=r,t};var r,o=(r=n("./src/util/observer.js"))&&r.__esModule?r:{default:r};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.instance=t,this.instance._reader=r.body.getReader(),this.total=parseInt(n,10),this.loaded=0}var t,n,r;return t=e,(n=[{key:"start",value:function(e){var t=this;!function n(){t.instance._reader.read().then((function(r){var o=r.done,i=r.value;if(o)return 0===t.total&&t.instance.onProgress.call(t.instance,{loaded:t.loaded,total:t.total,lengthComputable:!1}),void e.close();t.loaded+=i.byteLength,t.instance.onProgress.call(t.instance,{loaded:t.loaded,total:t.total,lengthComputable:!(0===t.total)}),e.enqueue(i),n()})).catch((function(t){e.error(t)}))}()}}])&&i(t.prototype,n),r&&i(t,r),e}();e.exports=t.default},"./src/util/frame.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return(0,o.default)((function(){return e.apply(void 0,n)}))}};var r,o=(r=n("./src/util/request-animation-frame.js"))&&r.__esModule?r:{default:r};e.exports=t.default},"./src/util/get-id.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return void 0===e&&(e="wavesurfer_"),e+Math.random().toString(32).substring(2)},e.exports=t.default},"./src/util/index.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getId",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"max",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"min",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"absMax",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"Observer",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"style",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"requestAnimationFrame",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"frame",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"debounce",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"preventClick",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"fetchFile",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"clamp",{enumerable:!0,get:function(){return h.default}});var r=m(n("./src/util/get-id.js")),o=m(n("./src/util/max.js")),i=m(n("./src/util/min.js")),a=m(n("./src/util/absMax.js")),l=m(n("./src/util/observer.js")),s=m(n("./src/util/style.js")),u=m(n("./src/util/request-animation-frame.js")),c=m(n("./src/util/frame.js")),d=m(n("./node_modules/debounce/index.js")),f=m(n("./src/util/prevent-click.js")),p=m(n("./src/util/fetch.js")),h=m(n("./src/util/clamp.js"));function m(e){return e&&e.__esModule?e:{default:e}}},"./src/util/max.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=-1/0;return Object.keys(e).forEach((function(n){e[n]>t&&(t=e[n])})),t},e.exports=t.default},"./src/util/min.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=Number(1/0);return Object.keys(e).forEach((function(n){e[n]<t&&(t=e[n])})),t},e.exports=t.default},"./src/util/observer.js":(e,t)=>{"use strict";function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._disabledEventEmissions=[],this.handlers=null}var t,r,o;return t=e,(r=[{key:"on",value:function(e,t){var n=this;this.handlers||(this.handlers={});var r=this.handlers[e];return r||(r=this.handlers[e]=[]),r.push(t),{name:e,callback:t,un:function(e,t){return n.un(e,t)}}}},{key:"un",value:function(e,t){if(this.handlers){var n,r=this.handlers[e];if(r)if(t)for(n=r.length-1;n>=0;n--)r[n]==t&&r.splice(n,1);else r.length=0}}},{key:"unAll",value:function(){this.handlers=null}},{key:"once",value:function(e,t){var n=this;return this.on(e,(function r(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];t.apply(n,i),setTimeout((function(){n.un(e,r)}),0)}))}},{key:"setDisabledEventEmissions",value:function(e){this._disabledEventEmissions=e}},{key:"_isDisabledEventEmission",value:function(e){return this._disabledEventEmissions&&this._disabledEventEmissions.includes(e)}},{key:"fireEvent",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.handlers&&!this._isDisabledEventEmission(e)){var o=this.handlers[e];o&&o.forEach((function(e){e.apply(void 0,n)}))}}}])&&n(t.prototype,r),o&&n(t,o),e}();t.default=r,e.exports=t.default},"./src/util/prevent-click.js":(e,t)=>{"use strict";function n(e){e.stopPropagation(),document.body.removeEventListener("click",n,!0)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){document.body.addEventListener("click",n,!0)},e.exports=t.default},"./src/util/request-animation-frame.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){return setTimeout(e,1e3/60)}).bind(window);t.default=n,e.exports=t.default},"./src/util/style.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return Object.keys(t).forEach((function(n){e.style[n]!==t[n]&&(e.style[n]=t[n])})),e},e.exports=t.default},"./src/wavesurfer.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=d();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}(n("./src/util/index.js")),i=c(n("./src/drawer.multicanvas.js")),a=c(n("./src/webaudio.js")),l=c(n("./src/mediaelement.js")),s=c(n("./src/peakcache.js")),u=c(n("./src/mediaelement-webaudio.js"));function c(e){return e&&e.__esModule?e:{default:e}}function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?m(e):t}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return t&&y(e.prototype,t),n&&y(e,n),e}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(n,e);var t=p(n);function n(e){var r;if(g(this,n),(r=t.call(this)).defaultParams={audioContext:null,audioScriptProcessor:null,audioRate:1,autoCenter:!0,autoCenterRate:5,autoCenterImmediately:!1,backend:"WebAudio",backgroundColor:null,barHeight:1,barRadius:0,barGap:null,barMinHeight:null,container:null,cursorColor:"#333",cursorWidth:1,dragSelection:!0,drawingContextAttributes:{desynchronized:!1},duration:null,fillParent:!0,forceDecode:!1,height:128,hideScrollbar:!1,interact:!0,loopSelection:!0,maxCanvasWidth:4e3,mediaContainer:null,mediaControls:!1,mediaType:"audio",minPxPerSec:20,normalize:!1,partialRender:!1,pixelRatio:window.devicePixelRatio||screen.deviceXDPI/screen.logicalXDPI,plugins:[],progressColor:"#555",removeMediaElementOnDestroy:!0,renderer:i.default,responsive:!1,rtl:!1,scrollParent:!1,skipLength:2,splitChannels:!1,splitChannelsOptions:{overlay:!1,channelColors:{},filterChannels:[],relativeNormalization:!1},waveColor:"#999",xhr:{}},r.backends={MediaElement:l.default,WebAudio:a.default,MediaElementWebAudio:u.default},r.util=o,r.params=Object.assign({},r.defaultParams,e),r.params.splitChannelsOptions=Object.assign({},r.defaultParams.splitChannelsOptions,e.splitChannelsOptions),r.container="string"==typeof e.container?document.querySelector(r.params.container):r.params.container,!r.container)throw new Error("Container element not found");if(null==r.params.mediaContainer?r.mediaContainer=r.container:"string"==typeof r.params.mediaContainer?r.mediaContainer=document.querySelector(r.params.mediaContainer):r.mediaContainer=r.params.mediaContainer,!r.mediaContainer)throw new Error("Media Container element not found");if(r.params.maxCanvasWidth<=1)throw new Error("maxCanvasWidth must be greater than 1");if(r.params.maxCanvasWidth%2==1)throw new Error("maxCanvasWidth must be an even number");if(!0===r.params.rtl&&o.style(r.container,{transform:"rotateY(180deg)"}),r.params.backgroundColor&&r.setBackgroundColor(r.params.backgroundColor),r.savedVolume=0,r.isMuted=!1,r.tmpEvents=[],r.currentRequest=null,r.arraybuffer=null,r.drawer=null,r.backend=null,r.peakCache=null,"function"!=typeof r.params.renderer)throw new Error("Renderer parameter is invalid");r.Drawer=r.params.renderer,"AudioElement"==r.params.backend&&(r.params.backend="MediaElement"),"WebAudio"!=r.params.backend&&"MediaElementWebAudio"!==r.params.backend||a.default.prototype.supportsWebAudio.call(null)||(r.params.backend="MediaElement"),r.Backend=r.backends[r.params.backend],r.initialisedPluginList={},r.isDestroyed=!1,r.isReady=!1;var s=0;return r._onResize=o.debounce((function(){s==r.drawer.wrapper.clientWidth||r.params.scrollParent||(s=r.drawer.wrapper.clientWidth,r.drawer.fireEvent("redraw"))}),"number"==typeof r.params.responsive?r.params.responsive:100),h(r,m(r))}return b(n,null,[{key:"create",value:function(e){return new n(e).init()}}]),b(n,[{key:"init",value:function(){return this.registerPlugins(this.params.plugins),this.createDrawer(),this.createBackend(),this.createPeakCache(),this}},{key:"registerPlugins",value:function(e){var t=this;return e.forEach((function(e){return t.addPlugin(e)})),e.forEach((function(e){e.deferInit||t.initPlugin(e.name)})),this.fireEvent("plugins-registered",e),this}},{key:"getActivePlugins",value:function(){return this.initialisedPluginList}},{key:"addPlugin",value:function(e){var t=this;if(!e.name)throw new Error("Plugin does not have a name!");if(!e.instance)throw new Error("Plugin ".concat(e.name," does not have an instance property!"));e.staticProps&&Object.keys(e.staticProps).forEach((function(n){t[n]=e.staticProps[n]}));var n=e.instance;return Object.getOwnPropertyNames(o.Observer.prototype).forEach((function(e){n.prototype[e]=o.Observer.prototype[e]})),this[e.name]=new n(e.params||{},this),this.fireEvent("plugin-added",e.name),this}},{key:"initPlugin",value:function(e){if(!this[e])throw new Error("Plugin ".concat(e," has not been added yet!"));return this.initialisedPluginList[e]&&this.destroyPlugin(e),this[e].init(),this.initialisedPluginList[e]=!0,this.fireEvent("plugin-initialised",e),this}},{key:"destroyPlugin",value:function(e){if(!this[e])throw new Error("Plugin ".concat(e," has not been added yet and cannot be destroyed!"));if(!this.initialisedPluginList[e])throw new Error("Plugin ".concat(e," is not active and cannot be destroyed!"));if("function"!=typeof this[e].destroy)throw new Error("Plugin ".concat(e," does not have a destroy function!"));return this[e].destroy(),delete this.initialisedPluginList[e],this.fireEvent("plugin-destroyed",e),this}},{key:"destroyAllPlugins",value:function(){var e=this;Object.keys(this.initialisedPluginList).forEach((function(t){return e.destroyPlugin(t)}))}},{key:"createDrawer",value:function(){var e=this;this.drawer=new this.Drawer(this.container,this.params),this.drawer.init(),this.fireEvent("drawer-created",this.drawer),!1!==this.params.responsive&&(window.addEventListener("resize",this._onResize,!0),window.addEventListener("orientationchange",this._onResize,!0)),this.drawer.on("redraw",(function(){e.drawBuffer(),e.drawer.progress(e.backend.getPlayedPercents())})),this.drawer.on("click",(function(t,n){setTimeout((function(){return e.seekTo(n)}),0)})),this.drawer.on("scroll",(function(t){e.params.partialRender&&e.drawBuffer(),e.fireEvent("scroll",t)}))}},{key:"createBackend",value:function(){var e=this;this.backend&&this.backend.destroy(),this.backend=new this.Backend(this.params),this.backend.init(),this.fireEvent("backend-created",this.backend),this.backend.on("finish",(function(){e.drawer.progress(e.backend.getPlayedPercents()),e.fireEvent("finish")})),this.backend.on("play",(function(){return e.fireEvent("play")})),this.backend.on("pause",(function(){return e.fireEvent("pause")})),this.backend.on("audioprocess",(function(t){e.drawer.progress(e.backend.getPlayedPercents()),e.fireEvent("audioprocess",t)})),"MediaElement"!==this.params.backend&&"MediaElementWebAudio"!==this.params.backend||(this.backend.on("seek",(function(){e.drawer.progress(e.backend.getPlayedPercents())})),this.backend.on("volume",(function(){var t=e.getVolume();e.fireEvent("volume",t),e.backend.isMuted!==e.isMuted&&(e.isMuted=e.backend.isMuted,e.fireEvent("mute",e.isMuted))})))}},{key:"createPeakCache",value:function(){this.params.partialRender&&(this.peakCache=new s.default)}},{key:"getDuration",value:function(){return this.backend.getDuration()}},{key:"getCurrentTime",value:function(){return this.backend.getCurrentTime()}},{key:"setCurrentTime",value:function(e){e>=this.getDuration()?this.seekTo(1):this.seekTo(e/this.getDuration())}},{key:"play",value:function(e,t){var n=this;return this.fireEvent("interaction",(function(){return n.play(e,t)})),this.backend.play(e,t)}},{key:"setPlayEnd",value:function(e){this.backend.setPlayEnd(e)}},{key:"pause",value:function(){if(!this.backend.isPaused())return this.backend.pause()}},{key:"playPause",value:function(){return this.backend.isPaused()?this.play():this.pause()}},{key:"isPlaying",value:function(){return!this.backend.isPaused()}},{key:"skipBackward",value:function(e){this.skip(-e||-this.params.skipLength)}},{key:"skipForward",value:function(e){this.skip(e||this.params.skipLength)}},{key:"skip",value:function(e){var t=this.getDuration()||1,n=this.getCurrentTime()||0;n=Math.max(0,Math.min(t,n+(e||0))),this.seekAndCenter(n/t)}},{key:"seekAndCenter",value:function(e){this.seekTo(e),this.drawer.recenter(e)}},{key:"seekTo",value:function(e){var t=this;if("number"!=typeof e||!isFinite(e)||e<0||e>1)throw new Error("Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!");this.fireEvent("interaction",(function(){return t.seekTo(e)}));var n="WebAudio"===this.params.backend,r=this.backend.isPaused();n&&!r&&this.backend.pause();var o=this.params.scrollParent;this.params.scrollParent=!1,this.backend.seekTo(e*this.getDuration()),this.drawer.progress(e),n&&!r&&this.backend.play(),this.params.scrollParent=o,this.fireEvent("seek",e)}},{key:"stop",value:function(){this.pause(),this.seekTo(0),this.drawer.progress(0)}},{key:"setSinkId",value:function(e){return this.backend.setSinkId(e)}},{key:"setVolume",value:function(e){this.backend.setVolume(e),this.fireEvent("volume",e)}},{key:"getVolume",value:function(){return this.backend.getVolume()}},{key:"setPlaybackRate",value:function(e){this.backend.setPlaybackRate(e)}},{key:"getPlaybackRate",value:function(){return this.backend.getPlaybackRate()}},{key:"toggleMute",value:function(){this.setMute(!this.isMuted)}},{key:"setMute",value:function(e){e!==this.isMuted?(this.backend.setMute?(this.backend.setMute(e),this.isMuted=e):e?(this.savedVolume=this.backend.getVolume(),this.backend.setVolume(0),this.isMuted=!0,this.fireEvent("volume",0)):(this.backend.setVolume(this.savedVolume),this.isMuted=!1,this.fireEvent("volume",this.savedVolume)),this.fireEvent("mute",this.isMuted)):this.fireEvent("mute",this.isMuted)}},{key:"getMute",value:function(){return this.isMuted}},{key:"getFilters",value:function(){return this.backend.filters||[]}},{key:"toggleScroll",value:function(){this.params.scrollParent=!this.params.scrollParent,this.drawBuffer()}},{key:"toggleInteraction",value:function(){this.params.interact=!this.params.interact}},{key:"getWaveColor",value:function(){return this.params.waveColor}},{key:"setWaveColor",value:function(e){this.params.waveColor=e,this.drawBuffer()}},{key:"getProgressColor",value:function(){return this.params.progressColor}},{key:"setProgressColor",value:function(e){this.params.progressColor=e,this.drawBuffer()}},{key:"getBackgroundColor",value:function(){return this.params.backgroundColor}},{key:"setBackgroundColor",value:function(e){this.params.backgroundColor=e,o.style(this.container,{background:this.params.backgroundColor})}},{key:"getCursorColor",value:function(){return this.params.cursorColor}},{key:"setCursorColor",value:function(e){this.params.cursorColor=e,this.drawer.updateCursor()}},{key:"getHeight",value:function(){return this.params.height}},{key:"setHeight",value:function(e){this.params.height=e,this.drawer.setHeight(e*this.params.pixelRatio),this.drawBuffer()}},{key:"setFilteredChannels",value:function(e){this.params.splitChannelsOptions.filterChannels=e,this.drawBuffer()}},{key:"drawBuffer",value:function(){var e,t=Math.round(this.getDuration()*this.params.minPxPerSec*this.params.pixelRatio),n=this.drawer.getWidth(),r=t,o=0,i=Math.max(o+n,r);if(this.params.fillParent&&(!this.params.scrollParent||t<n)&&(o=0,i=r=n),this.params.partialRender){var a,l=this.peakCache.addRangeToPeakCache(r,o,i);for(a=0;a<l.length;a++)e=this.backend.getPeaks(r,l[a][0],l[a][1]),this.drawer.drawPeaks(e,r,l[a][0],l[a][1])}else e=this.backend.getPeaks(r,o,i),this.drawer.drawPeaks(e,r,o,i);this.fireEvent("redraw",e,r)}},{key:"zoom",value:function(e){e?(this.params.minPxPerSec=e,this.params.scrollParent=!0):(this.params.minPxPerSec=this.defaultParams.minPxPerSec,this.params.scrollParent=!1),this.drawBuffer(),this.drawer.progress(this.backend.getPlayedPercents()),this.drawer.recenter(this.getCurrentTime()/this.getDuration()),this.fireEvent("zoom",e)}},{key:"loadArrayBuffer",value:function(e){var t=this;this.decodeArrayBuffer(e,(function(e){t.isDestroyed||t.loadDecodedBuffer(e)}))}},{key:"loadDecodedBuffer",value:function(e){this.backend.load(e),this.drawBuffer(),this.isReady=!0,this.fireEvent("ready")}},{key:"loadBlob",value:function(e){var t=this,n=new FileReader;n.addEventListener("progress",(function(e){return t.onProgress(e)})),n.addEventListener("load",(function(e){return t.loadArrayBuffer(e.target.result)})),n.addEventListener("error",(function(){return t.fireEvent("error","Error reading file")})),n.readAsArrayBuffer(e),this.empty()}},{key:"load",value:function(e,t,n,r){if(!e)throw new Error("url parameter cannot be empty");if(this.empty(),n){var o={"Preload is not 'auto', 'none' or 'metadata'":-1===["auto","metadata","none"].indexOf(n),"Peaks are not provided":!t,"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'":-1===["MediaElement","MediaElementWebAudio"].indexOf(this.params.backend),"Url is not of type string":"string"!=typeof e},i=Object.keys(o).filter((function(e){return o[e]}));i.length&&(console.warn("Preload parameter of wavesurfer.load will be ignored because:\n\t- "+i.join("\n\t- ")),n=null)}switch("WebAudio"===this.params.backend&&e instanceof HTMLMediaElement&&(e=e.src),this.params.backend){case"WebAudio":return this.loadBuffer(e,t,r);case"MediaElement":case"MediaElementWebAudio":return this.loadMediaElement(e,t,n,r)}}},{key:"loadBuffer",value:function(e,t,n){var r=this,o=function(t){return t&&r.tmpEvents.push(r.once("ready",t)),r.getArrayBuffer(e,(function(e){return r.loadArrayBuffer(e)}))};if(!t)return o();this.backend.setPeaks(t,n),this.drawBuffer(),this.fireEvent("waveform-ready"),this.tmpEvents.push(this.once("interaction",o))}},{key:"loadMediaElement",value:function(e,t,n,r){var o=this,i=e;if("string"==typeof e)this.backend.load(i,this.mediaContainer,t,n);else{var a=e;this.backend.loadElt(a,t),i=a.src}this.tmpEvents.push(this.backend.once("canplay",(function(){o.backend.destroyed||(o.drawBuffer(),o.isReady=!0,o.fireEvent("ready"))})),this.backend.once("error",(function(e){return o.fireEvent("error",e)}))),t&&(this.backend.setPeaks(t,r),this.drawBuffer(),this.fireEvent("waveform-ready")),t&&!this.params.forceDecode||!this.backend.supportsWebAudio()||this.getArrayBuffer(i,(function(e){o.decodeArrayBuffer(e,(function(e){o.backend.buffer=e,o.backend.setPeaks(null),o.drawBuffer(),o.fireEvent("waveform-ready")}))}))}},{key:"decodeArrayBuffer",value:function(e,t){var n=this;this.arraybuffer=e,this.backend.decodeArrayBuffer(e,(function(r){n.isDestroyed||n.arraybuffer!=e||(t(r),n.arraybuffer=null)}),(function(){return n.fireEvent("error","Error decoding audiobuffer")}))}},{key:"getArrayBuffer",value:function(e,t){var n=this,r=Object.assign({url:e,responseType:"arraybuffer"},this.params.xhr),i=o.fetchFile(r);return this.currentRequest=i,this.tmpEvents.push(i.on("progress",(function(e){n.onProgress(e)})),i.on("success",(function(e){t(e),n.currentRequest=null})),i.on("error",(function(e){n.fireEvent("error",e),n.currentRequest=null}))),i}},{key:"onProgress",value:function(e){var t;t=e.lengthComputable?e.loaded/e.total:e.loaded/(e.loaded+1e6),this.fireEvent("loading",Math.round(100*t),e.target)}},{key:"exportPCM",value:function(e,t,n,r,o){e=e||1024,r=r||0,t=t||1e4,n=n||!1;var i=this.backend.getPeaks(e,r,o),a=[].map.call(i,(function(e){return Math.round(e*t)/t}));return new Promise((function(e,t){var r=JSON.stringify(a);n||window.open("data:application/json;charset=utf-8,"+encodeURIComponent(r)),e(r)}))}},{key:"exportImage",value:function(e,t,n){return e||(e="image/png"),t||(t=1),n||(n="dataURL"),this.drawer.getImage(e,t,n)}},{key:"cancelAjax",value:function(){this.currentRequest&&this.currentRequest.controller&&(this.currentRequest._reader&&this.currentRequest._reader.cancel().catch((function(e){})),this.currentRequest.controller.abort(),this.currentRequest=null)}},{key:"clearTmpEvents",value:function(){this.tmpEvents.forEach((function(e){return e.un()}))}},{key:"empty",value:function(){this.backend.isPaused()||(this.stop(),this.backend.disconnectSource()),this.isReady=!1,this.cancelAjax(),this.clearTmpEvents(),this.drawer.progress(0),this.drawer.setWidth(0),this.drawer.drawPeaks({length:this.drawer.getWidth()},0)}},{key:"destroy",value:function(){this.destroyAllPlugins(),this.fireEvent("destroy"),this.cancelAjax(),this.clearTmpEvents(),this.unAll(),!1!==this.params.responsive&&(window.removeEventListener("resize",this._onResize,!0),window.removeEventListener("orientationchange",this._onResize,!0)),this.backend&&(this.backend.destroy(),this.backend=null),this.drawer&&this.drawer.destroy(),this.isDestroyed=!0,this.isReady=!1,this.arraybuffer=null}}]),n}(o.Observer);t.default=w,w.VERSION="4.5.0",w.util=o,e.exports=t.default},"./src/webaudio.js":(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var l=o?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(n,a,l):n[a]=e[a]}return n.default=e,t&&t.set(e,n),n}(n("./src/util/index.js"));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p="playing",h="paused",m="finished",v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(n,e);var t=c(n);function n(e){var r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(i=t.call(this)).audioContext=null,i.offlineAudioContext=null,i.stateBehaviors=(a(r={},p,{init:function(){this.addOnAudioProcess()},getPlayedPercents:function(){var e=this.getDuration();return this.getCurrentTime()/e||0},getCurrentTime:function(){return this.startPosition+this.getPlayedTime()}}),a(r,h,{init:function(){this.removeOnAudioProcess()},getPlayedPercents:function(){var e=this.getDuration();return this.getCurrentTime()/e||0},getCurrentTime:function(){return this.startPosition}}),a(r,m,{init:function(){this.removeOnAudioProcess(),this.fireEvent("finish")},getPlayedPercents:function(){return 1},getCurrentTime:function(){return this.getDuration()}}),r),i.params=e,i.ac=e.audioContext||(i.supportsWebAudio()?i.getAudioContext():{}),i.lastPlay=i.ac.currentTime,i.startPosition=0,i.scheduledPause=null,i.states=(a(o={},p,Object.create(i.stateBehaviors.playing)),a(o,h,Object.create(i.stateBehaviors.paused)),a(o,m,Object.create(i.stateBehaviors.finished)),o),i.buffer=null,i.filters=[],i.gainNode=null,i.mergedPeaks=null,i.offlineAc=null,i.peaks=null,i.playbackRate=1,i.analyser=null,i.scriptNode=null,i.source=null,i.splitPeaks=[],i.state=null,i.explicitDuration=e.duration,i.destroyed=!1,i}return s(n,[{key:"supportsWebAudio",value:function(){return!(!window.AudioContext&&!window.webkitAudioContext)}},{key:"getAudioContext",value:function(){return window.WaveSurferAudioContext||(window.WaveSurferAudioContext=new(window.AudioContext||window.webkitAudioContext)),window.WaveSurferAudioContext}},{key:"getOfflineAudioContext",value:function(e){return window.WaveSurferOfflineAudioContext||(window.WaveSurferOfflineAudioContext=new(window.OfflineAudioContext||window.webkitOfflineAudioContext)(1,2,e)),window.WaveSurferOfflineAudioContext}}]),s(n,[{key:"init",value:function(){this.createVolumeNode(),this.createScriptNode(),this.createAnalyserNode(),this.setState(h),this.setPlaybackRate(this.params.audioRate),this.setLength(0)}},{key:"disconnectFilters",value:function(){this.filters&&(this.filters.forEach((function(e){e&&e.disconnect()})),this.filters=null,this.analyser.connect(this.gainNode))}},{key:"setState",value:function(e){this.state!==this.states[e]&&(this.state=this.states[e],this.state.init.call(this))}},{key:"setFilter",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this.setFilters(t)}},{key:"setFilters",value:function(e){this.disconnectFilters(),e&&e.length&&(this.filters=e,this.analyser.disconnect(),e.reduce((function(e,t){return e.connect(t),t}),this.analyser).connect(this.gainNode))}},{key:"createScriptNode",value:function(){this.params.audioScriptProcessor?this.scriptNode=this.params.audioScriptProcessor:this.ac.createScriptProcessor?this.scriptNode=this.ac.createScriptProcessor(n.scriptBufferSize):this.scriptNode=this.ac.createJavaScriptNode(n.scriptBufferSize),this.scriptNode.connect(this.ac.destination)}},{key:"addOnAudioProcess",value:function(){var e=this;this.scriptNode.onaudioprocess=function(){var t=e.getCurrentTime();t>=e.getDuration()?(e.setState(m),e.fireEvent("pause")):t>=e.scheduledPause?e.pause():e.state===e.states.playing&&e.fireEvent("audioprocess",t)}}},{key:"removeOnAudioProcess",value:function(){this.scriptNode.onaudioprocess=function(){}}},{key:"createAnalyserNode",value:function(){this.analyser=this.ac.createAnalyser(),this.analyser.connect(this.gainNode)}},{key:"createVolumeNode",value:function(){this.ac.createGain?this.gainNode=this.ac.createGain():this.gainNode=this.ac.createGainNode(),this.gainNode.connect(this.ac.destination)}},{key:"setSinkId",value:function(e){if(e){var t=new window.Audio;if(!t.setSinkId)return Promise.reject(new Error("setSinkId is not supported in your browser"));t.autoplay=!0;var n=this.ac.createMediaStreamDestination();return this.gainNode.disconnect(),this.gainNode.connect(n),t.srcObject=n.stream,t.setSinkId(e)}return Promise.reject(new Error("Invalid deviceId: "+e))}},{key:"setVolume",value:function(e){this.gainNode.gain.setValueAtTime(e,this.ac.currentTime)}},{key:"getVolume",value:function(){return this.gainNode.gain.value}},{key:"decodeArrayBuffer",value:function(e,t,n){this.offlineAc||(this.offlineAc=this.getOfflineAudioContext(this.ac&&this.ac.sampleRate?this.ac.sampleRate:44100)),"AudioContext"in window?this.offlineAc.decodeAudioData(e).then((function(e){return t(e)})).catch((function(e){return n(e)})):this.offlineAc.decodeAudioData(e,(function(e){return t(e)}),n)}},{key:"setPeaks",value:function(e,t){null!=t&&(this.explicitDuration=t),this.peaks=e}},{key:"setLength",value:function(e){if(!this.mergedPeaks||e!=2*this.mergedPeaks.length-1+2){this.splitPeaks=[],this.mergedPeaks=[];var t,n=this.buffer?this.buffer.numberOfChannels:1;for(t=0;t<n;t++)this.splitPeaks[t]=[],this.splitPeaks[t][2*(e-1)]=0,this.splitPeaks[t][2*(e-1)+1]=0;this.mergedPeaks[2*(e-1)]=0,this.mergedPeaks[2*(e-1)+1]=0}}},{key:"getPeaks",value:function(e,t,n){if(this.peaks)return this.peaks;if(!this.buffer)return[];if(t=t||0,n=n||e-1,this.setLength(e),!this.buffer)return this.params.splitChannels?this.splitPeaks:this.mergedPeaks;if(!this.buffer.length){var r=this.createBuffer(1,4096,this.sampleRate);this.buffer=r.buffer}var o,i=this.buffer.length/e,a=~~(i/10)||1,l=this.buffer.numberOfChannels;for(o=0;o<l;o++){var s=this.splitPeaks[o],u=this.buffer.getChannelData(o),c=void 0;for(c=t;c<=n;c++){var d=~~(c*i),f=~~(d+i),p=u[d],h=p,m=void 0;for(m=d;m<f;m+=a){var v=u[m];v>h&&(h=v),v<p&&(p=v)}s[2*c]=h,s[2*c+1]=p,(0==o||h>this.mergedPeaks[2*c])&&(this.mergedPeaks[2*c]=h),(0==o||p<this.mergedPeaks[2*c+1])&&(this.mergedPeaks[2*c+1]=p)}}return this.params.splitChannels?this.splitPeaks:this.mergedPeaks}},{key:"getPlayedPercents",value:function(){return this.state.getPlayedPercents.call(this)}},{key:"disconnectSource",value:function(){this.source&&this.source.disconnect()}},{key:"destroyWebAudio",value:function(){this.disconnectFilters(),this.disconnectSource(),this.gainNode.disconnect(),this.scriptNode.disconnect(),this.analyser.disconnect(),this.params.closeAudioContext&&("function"==typeof this.ac.close&&"closed"!=this.ac.state&&this.ac.close(),this.ac=null,this.params.audioContext?this.params.audioContext=null:window.WaveSurferAudioContext=null,window.WaveSurferOfflineAudioContext=null)}},{key:"destroy",value:function(){this.isPaused()||this.pause(),this.unAll(),this.buffer=null,this.destroyed=!0,this.destroyWebAudio()}},{key:"load",value:function(e){this.startPosition=0,this.lastPlay=this.ac.currentTime,this.buffer=e,this.createSource()}},{key:"createSource",value:function(){this.disconnectSource(),this.source=this.ac.createBufferSource(),this.source.start=this.source.start||this.source.noteGrainOn,this.source.stop=this.source.stop||this.source.noteOff,this.setPlaybackRate(this.playbackRate),this.source.buffer=this.buffer,this.source.connect(this.analyser)}},{key:"resumeAudioContext",value:function(){"suspended"==this.ac.state&&this.ac.resume&&this.ac.resume()}},{key:"isPaused",value:function(){return this.state!==this.states.playing}},{key:"getDuration",value:function(){return this.explicitDuration?this.explicitDuration:this.buffer?this.buffer.duration:0}},{key:"seekTo",value:function(e,t){if(this.buffer)return this.scheduledPause=null,null==e&&(e=this.getCurrentTime())>=this.getDuration()&&(e=0),null==t&&(t=this.getDuration()),this.startPosition=e,this.lastPlay=this.ac.currentTime,this.state===this.states.finished&&this.setState(h),{start:e,end:t}}},{key:"getPlayedTime",value:function(){return(this.ac.currentTime-this.lastPlay)*this.playbackRate}},{key:"play",value:function(e,t){if(this.buffer){this.createSource();var n=this.seekTo(e,t);e=n.start,t=n.end,this.scheduledPause=t,this.source.start(0,e),this.resumeAudioContext(),this.setState(p),this.fireEvent("play")}}},{key:"pause",value:function(){this.scheduledPause=null,this.startPosition+=this.getPlayedTime(),this.source&&this.source.stop(0),this.setState(h),this.fireEvent("pause")}},{key:"getCurrentTime",value:function(){return this.state.getCurrentTime.call(this)}},{key:"getPlaybackRate",value:function(){return this.playbackRate}},{key:"setPlaybackRate",value:function(e){this.playbackRate=e||1,this.source&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.ac.currentTime)}},{key:"setPlayEnd",value:function(e){this.scheduledPause=e}}]),n}(o.Observer);t.default=v,v.scriptBufferSize=256,e.exports=t.default},"./node_modules/debounce/index.js":e=>{function t(e,t,n){var r,o,i,a,l;function s(){var u=Date.now()-a;u<t&&u>=0?r=setTimeout(s,t-u):(r=null,n||(l=e.apply(i,o),i=o=null))}null==t&&(t=100);var u=function(){i=this,o=arguments,a=Date.now();var u=n&&!r;return r||(r=setTimeout(s,t)),u&&(l=e.apply(i,o),i=o=null),l};return u.clear=function(){r&&(clearTimeout(r),r=null)},u.flush=function(){r&&(l=e.apply(i,o),i=o=null,clearTimeout(r),r=null)},u}t.debounce=t,e.exports=t}},t={};return function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}("./src/wavesurfer.js")})()},e.exports=t()}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(7294),t=n(3935),r=n(6010),o=n(2122),i=n(115),a=n(9700);const l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,i.Z)(e,(0,o.Z)({defaultTheme:a.Z},t))};var s=n(1796),u=n.n(s),c=n(5697),d=n.n(c),f=n(4670),p={WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},h=function(e){return(0,o.Z)({color:e.palette.text.primary},e.typography.body2,{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})};const m=(0,f.Z)((function(e){return{"@global":{html:p,"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:(0,o.Z)({margin:0},h(e),{"&::backdrop":{backgroundColor:e.palette.background.default}})}}}),{name:"MuiCssBaseline"})((function(t){var n=t.children,r=void 0===n?null:n;return t.classes,e.createElement(e.Fragment,null,r)}));var v=n(1253),g=n(9693),y=n(3834),b=n(5192),w=n(4896),k=n(7329),x=n(9756),E=n(3349),S=n(3552);const C=e.createContext(null);function P(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function O(e,t,n){return null!=n[t]?n[t]:e.props[t]}function R(t,n,r){var o=P(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(n,o);return Object.keys(i).forEach((function(a){var l=i[a];if((0,e.isValidElement)(l)){var s=a in n,u=a in o,c=n[a],d=(0,e.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:O(l,"exit",t),enter:O(l,"enter",t)})):i[a]=(0,e.cloneElement)(l,{in:!1}):i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:O(l,"exit",t),enter:O(l,"enter",t)})}})),i}var T=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},M=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind((0,E.Z)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}(0,S.Z)(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,P(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:O(t,"appear",r),enter:O(t,"enter",r),exit:O(t,"exit",r)})}))):R(t,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=P(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,o.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=(0,x.Z)(t,["component","childFactory"]),i=this.state.contextValue,a=T(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(C.Provider,{value:i},a):e.createElement(C.Provider,{value:i},e.createElement(n,o,a))},n}(e.Component);M.propTypes={},M.defaultProps={component:"div",childFactory:function(e){return e}};const Z=M;var N="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const _=function(t){var n=t.classes,o=t.pulsate,i=void 0!==o&&o,a=t.rippleX,l=t.rippleY,s=t.rippleSize,u=t.in,c=t.onExited,d=void 0===c?function(){}:c,f=t.timeout,p=e.useState(!1),h=p[0],m=p[1],v=(0,r.Z)(n.ripple,n.rippleVisible,i&&n.ripplePulsate),g={width:s,height:s,top:-s/2+l,left:-s/2+a},y=(0,r.Z)(n.child,h&&n.childLeaving,i&&n.childPulsate),w=(0,b.Z)(d);return N((function(){if(!u){m(!0);var e=setTimeout(w,f);return function(){clearTimeout(e)}}}),[w,u,f]),e.createElement("span",{className:v,style:g},e.createElement("span",{className:y}))};var L=e.forwardRef((function(t,n){var i=t.center,a=void 0!==i&&i,l=t.classes,s=t.className,u=(0,v.Z)(t,["center","classes","className"]),c=e.useState([]),d=c[0],f=c[1],p=e.useRef(0),h=e.useRef(null);e.useEffect((function(){h.current&&(h.current(),h.current=null)}),[d]);var m=e.useRef(!1),g=e.useRef(null),y=e.useRef(null),b=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(g.current)}}),[]);var w=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,i=t.rippleSize,a=t.cb;f((function(t){return[].concat((0,k.Z)(t),[e.createElement(_,{key:p.current,classes:l,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:i})])})),p.current+=1,h.current=a}),[l]),x=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,o=void 0!==r&&r,i=t.center,l=void 0===i?a||t.pulsate:i,s=t.fakeElement,u=void 0!==s&&s;if("mousedown"===e.type&&m.current)m.current=!1;else{"touchstart"===e.type&&(m.current=!0);var c,d,f,p=u?null:b.current,h=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(h.width/2),d=Math.round(h.height/2);else{var v=e.touches?e.touches[0]:e,k=v.clientX,x=v.clientY;c=Math.round(k-h.left),d=Math.round(x-h.top)}if(l)(f=Math.sqrt((2*Math.pow(h.width,2)+Math.pow(h.height,2))/3))%2==0&&(f+=1);else{var E=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,S=2*Math.max(Math.abs((p?p.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(E,2)+Math.pow(S,2))}e.touches?null===y.current&&(y.current=function(){w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})},g.current=setTimeout((function(){y.current&&(y.current(),y.current=null)}),80)):w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})}}),[a,w]),E=e.useCallback((function(){x({},{pulsate:!0})}),[x]),S=e.useCallback((function(e,t){if(clearTimeout(g.current),"touchend"===e.type&&y.current)return e.persist(),y.current(),y.current=null,void(g.current=setTimeout((function(){S(e,t)})));y.current=null,f((function(e){return e.length>0?e.slice(1):e})),h.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:E,start:x,stop:S}}),[E,x,S]),e.createElement("span",(0,o.Z)({className:(0,r.Z)(l.root,s),ref:b},u),e.createElement(Z,{component:null,exit:!0},d))}));const A=(0,f.Z)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(L));var j=e.forwardRef((function(n,i){var a=n.action,l=n.buttonRef,s=n.centerRipple,u=void 0!==s&&s,c=n.children,d=n.classes,f=n.className,p=n.component,h=void 0===p?"button":p,m=n.disabled,g=void 0!==m&&m,k=n.disableRipple,x=void 0!==k&&k,E=n.disableTouchRipple,S=void 0!==E&&E,C=n.focusRipple,P=void 0!==C&&C,O=n.focusVisibleClassName,R=n.onBlur,T=n.onClick,M=n.onFocus,Z=n.onFocusVisible,N=n.onKeyDown,_=n.onKeyUp,L=n.onMouseDown,j=n.onMouseLeave,I=n.onMouseUp,D=n.onTouchEnd,z=n.onTouchMove,W=n.onTouchStart,F=n.onDragLeave,B=n.tabIndex,$=void 0===B?0:B,H=n.TouchRippleProps,U=n.type,V=void 0===U?"button":U,q=(0,v.Z)(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),K=e.useRef(null);var Y=e.useRef(null),Q=e.useState(!1),X=Q[0],G=Q[1];g&&X&&G(!1);var J=(0,w.Z)(),ee=J.isFocusVisible,te=J.onBlurVisible,ne=J.ref;function re(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:S;return(0,b.Z)((function(r){return t&&t(r),!n&&Y.current&&Y.current[e](r),!0}))}e.useImperativeHandle(a,(function(){return{focusVisible:function(){G(!0),K.current.focus()}}}),[]),e.useEffect((function(){X&&P&&!x&&Y.current.pulsate()}),[x,P,X]);var oe=re("start",L),ie=re("stop",F),ae=re("stop",I),le=re("stop",(function(e){X&&e.preventDefault(),j&&j(e)})),se=re("start",W),ue=re("stop",D),ce=re("stop",z),de=re("stop",(function(e){X&&(te(e),G(!1)),R&&R(e)}),!1),fe=(0,b.Z)((function(e){K.current||(K.current=e.currentTarget),ee(e)&&(G(!0),Z&&Z(e)),M&&M(e)})),pe=function(){var e=t.findDOMNode(K.current);return h&&"button"!==h&&!("A"===e.tagName&&e.href)},he=e.useRef(!1),me=(0,b.Z)((function(e){P&&!he.current&&X&&Y.current&&" "===e.key&&(he.current=!0,e.persist(),Y.current.stop(e,(function(){Y.current.start(e)}))),e.target===e.currentTarget&&pe()&&" "===e.key&&e.preventDefault(),N&&N(e),e.target===e.currentTarget&&pe()&&"Enter"===e.key&&!g&&(e.preventDefault(),T&&T(e))})),ve=(0,b.Z)((function(e){P&&" "===e.key&&Y.current&&X&&!e.defaultPrevented&&(he.current=!1,e.persist(),Y.current.stop(e,(function(){Y.current.pulsate(e)}))),_&&_(e),T&&e.target===e.currentTarget&&pe()&&" "===e.key&&!e.defaultPrevented&&T(e)})),ge=h;"button"===ge&&q.href&&(ge="a");var ye={};"button"===ge?(ye.type=V,ye.disabled=g):("a"===ge&&q.href||(ye.role="button"),ye["aria-disabled"]=g);var be=(0,y.Z)(l,i),we=(0,y.Z)(ne,K),ke=(0,y.Z)(be,we),xe=e.useState(!1),Ee=xe[0],Se=xe[1];e.useEffect((function(){Se(!0)}),[]);var Ce=Ee&&!x&&!g;return e.createElement(ge,(0,o.Z)({className:(0,r.Z)(d.root,f,X&&[d.focusVisible,O],g&&d.disabled),onBlur:de,onClick:T,onFocus:fe,onKeyDown:me,onKeyUp:ve,onMouseDown:oe,onMouseLeave:le,onMouseUp:ae,onDragLeave:ie,onTouchEnd:ue,onTouchMove:ce,onTouchStart:se,ref:ke,tabIndex:g?-1:$},ye,q),c,Ce?e.createElement(A,(0,o.Z)({ref:Y,center:u},H)):null)}));const I=(0,f.Z)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(j);var D=n(3871),z=e.forwardRef((function(t,n){var i=t.edge,a=void 0!==i&&i,l=t.children,s=t.classes,u=t.className,c=t.color,d=void 0===c?"default":c,f=t.disabled,p=void 0!==f&&f,h=t.disableFocusRipple,m=void 0!==h&&h,g=t.size,y=void 0===g?"medium":g,b=(0,v.Z)(t,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return e.createElement(I,(0,o.Z)({className:(0,r.Z)(s.root,u,"default"!==d&&s["color".concat((0,D.Z)(d))],p&&s.disabled,"small"===y&&s["size".concat((0,D.Z)(y))],{start:s.edgeStart,end:s.edgeEnd}[a]),centerRipple:!0,focusRipple:!m,disabled:p,ref:n},b),e.createElement("span",{className:s.label},l))}));const W=(0,f.Z)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:(0,g.U1)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(z);var F=n(6156),B=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.component,s=void 0===l?"div":l,u=t.disableGutters,c=void 0!==u&&u,d=t.fixed,f=void 0!==d&&d,p=t.maxWidth,h=void 0===p?"lg":p,m=(0,v.Z)(t,["classes","className","component","disableGutters","fixed","maxWidth"]);return e.createElement(s,(0,o.Z)({className:(0,r.Z)(i.root,a,f&&i.fixed,c&&i.disableGutters,!1!==h&&i["maxWidth".concat((0,D.Z)(String(h)))]),ref:n},m))}));const $=(0,f.Z)((function(e){return{root:(0,F.Z)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2),display:"block"},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(e.breakpoints.values).reduce((function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t}),{}),maxWidthXs:(0,F.Z)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:(0,F.Z)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:(0,F.Z)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:(0,F.Z)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:(0,F.Z)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(B);var H=[0,1,2,3,4,5,6,7,8,9,10],U=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function V(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var q=e.forwardRef((function(t,n){var i=t.alignContent,a=void 0===i?"stretch":i,l=t.alignItems,s=void 0===l?"stretch":l,u=t.classes,c=t.className,d=t.component,f=void 0===d?"div":d,p=t.container,h=void 0!==p&&p,m=t.direction,g=void 0===m?"row":m,y=t.item,b=void 0!==y&&y,w=t.justify,k=void 0===w?"flex-start":w,x=t.lg,E=void 0!==x&&x,S=t.md,C=void 0!==S&&S,P=t.sm,O=void 0!==P&&P,R=t.spacing,T=void 0===R?0:R,M=t.wrap,Z=void 0===M?"wrap":M,N=t.xl,_=void 0!==N&&N,L=t.xs,A=void 0!==L&&L,j=t.zeroMinWidth,I=void 0!==j&&j,D=(0,v.Z)(t,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),z=(0,r.Z)(u.root,c,h&&[u.container,0!==T&&u["spacing-xs-".concat(String(T))]],b&&u.item,I&&u.zeroMinWidth,"row"!==g&&u["direction-xs-".concat(String(g))],"wrap"!==Z&&u["wrap-xs-".concat(String(Z))],"stretch"!==s&&u["align-items-xs-".concat(String(s))],"stretch"!==a&&u["align-content-xs-".concat(String(a))],"flex-start"!==k&&u["justify-xs-".concat(String(k))],!1!==A&&u["grid-xs-".concat(String(A))],!1!==O&&u["grid-sm-".concat(String(O))],!1!==C&&u["grid-md-".concat(String(C))],!1!==E&&u["grid-lg-".concat(String(E))],!1!==_&&u["grid-xl-".concat(String(_))]);return e.createElement(f,(0,o.Z)({className:z,ref:n},D))}));const K=(0,f.Z)((function(e){return(0,o.Z)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return H.forEach((function(r){var o=e.spacing(r);0!==o&&(n["spacing-".concat(t,"-").concat(r)]={margin:"-".concat(V(o,2)),width:"calc(100% + ".concat(V(o),")"),"& > $item":{padding:V(o,2)}})})),n}(e,"xs"),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var r={};U.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?(0,o.Z)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t}),{}))}),{name:"MuiGrid"})(q);var Y=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.component,s=void 0===l?"div":l,u=t.square,c=void 0!==u&&u,d=t.elevation,f=void 0===d?1:d,p=t.variant,h=void 0===p?"elevation":p,m=(0,v.Z)(t,["classes","className","component","square","elevation","variant"]);return e.createElement(s,(0,o.Z)({className:(0,r.Z)(i.root,a,"outlined"===h?i.outlined:i["elevation".concat(f)],!c&&i.rounded),ref:n},m))}));const Q=(0,f.Z)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),(0,o.Z)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(Y);var X=n(288);function G(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e}),{})}var J=e.createContext();function ee(){return e.useContext(J)}const te=J;var ne=n(9437);function re(e,t){return parseInt(e[t],10)||0}var oe="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,ie={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};const ae=e.forwardRef((function(t,n){var r=t.onChange,i=t.rows,a=t.rowsMax,l=t.rowsMin,s=void 0===l?1:l,u=t.style,c=t.value,d=(0,v.Z)(t,["onChange","rows","rowsMax","rowsMin","style","value"]),f=i||s,p=e.useRef(null!=c).current,h=e.useRef(null),m=(0,y.Z)(n,h),g=e.useRef(null),b=e.useRef(0),w=e.useState({}),k=w[0],x=w[1],E=e.useCallback((function(){var e=h.current,n=window.getComputedStyle(e),r=g.current;r.style.width=n.width,r.value=e.value||t.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=n["box-sizing"],i=re(n,"padding-bottom")+re(n,"padding-top"),l=re(n,"border-bottom-width")+re(n,"border-top-width"),s=r.scrollHeight-i;r.value="x";var u=r.scrollHeight-i,c=s;f&&(c=Math.max(Number(f)*u,c)),a&&(c=Math.min(Number(a)*u,c));var d=(c=Math.max(c,u))+("border-box"===o?i+l:0),p=Math.abs(c-s)<=1;x((function(e){return b.current<20&&(d>0&&Math.abs((e.outerHeightStyle||0)-d)>1||e.overflow!==p)?(b.current+=1,{overflow:p,outerHeightStyle:d}):e}))}),[a,f,t.placeholder]);e.useEffect((function(){var e=(0,ne.Z)((function(){b.current=0,E()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[E]),oe((function(){E()})),e.useEffect((function(){b.current=0}),[c]);return e.createElement(e.Fragment,null,e.createElement("textarea",(0,o.Z)({value:c,onChange:function(e){b.current=0,p||E(),r&&r(e)},ref:m,rows:f,style:(0,o.Z)({height:k.outerHeightStyle,overflow:k.overflow?"hidden":null},u)},d)),e.createElement("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:g,tabIndex:-1,style:(0,o.Z)({},ie,u)}))}));function le(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function se(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(le(e.value)&&""!==e.value||t&&le(e.defaultValue)&&""!==e.defaultValue)}var ue="undefined"==typeof window?e.useEffect:e.useLayoutEffect,ce=e.forwardRef((function(t,n){var i=t["aria-describedby"],a=t.autoComplete,l=t.autoFocus,s=t.classes,u=t.className,c=(t.color,t.defaultValue),d=t.disabled,f=t.endAdornment,p=(t.error,t.fullWidth),h=void 0!==p&&p,m=t.id,g=t.inputComponent,b=void 0===g?"input":g,w=t.inputProps,k=void 0===w?{}:w,x=t.inputRef,E=(t.margin,t.multiline),S=void 0!==E&&E,C=t.name,P=t.onBlur,O=t.onChange,R=t.onClick,T=t.onFocus,M=t.onKeyDown,Z=t.onKeyUp,N=t.placeholder,_=t.readOnly,L=t.renderSuffix,A=t.rows,j=t.rowsMax,I=t.rowsMin,z=t.startAdornment,W=t.type,F=void 0===W?"text":W,B=t.value,$=(0,v.Z)(t,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","startAdornment","type","value"]),H=null!=k.value?k.value:B,U=e.useRef(null!=H).current,V=e.useRef(),q=e.useCallback((function(e){0}),[]),K=(0,y.Z)(k.ref,q),Y=(0,y.Z)(x,K),Q=(0,y.Z)(V,Y),J=e.useState(!1),ne=J[0],re=J[1],oe=ee();var ie=G({props:t,muiFormControl:oe,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});ie.focused=oe?oe.focused:ne,e.useEffect((function(){!oe&&d&&ne&&(re(!1),P&&P())}),[oe,d,ne,P]);var le=oe&&oe.onFilled,ce=oe&&oe.onEmpty,de=e.useCallback((function(e){se(e)?le&&le():ce&&ce()}),[le,ce]);ue((function(){U&&de({value:H})}),[H,de,U]);e.useEffect((function(){de(V.current)}),[]);var fe=b,pe=(0,o.Z)({},k,{ref:Q});"string"!=typeof fe?pe=(0,o.Z)({inputRef:Q,type:F},pe,{ref:null}):S?!A||j||I?(pe=(0,o.Z)({rows:A,rowsMax:j},pe),fe=ae):fe="textarea":pe=(0,o.Z)({type:F},pe);return e.useEffect((function(){oe&&oe.setAdornedStart(Boolean(z))}),[oe,z]),e.createElement("div",(0,o.Z)({className:(0,r.Z)(s.root,s["color".concat((0,D.Z)(ie.color||"primary"))],u,ie.disabled&&s.disabled,ie.error&&s.error,h&&s.fullWidth,ie.focused&&s.focused,oe&&s.formControl,S&&s.multiline,z&&s.adornedStart,f&&s.adornedEnd,"dense"===ie.margin&&s.marginDense),onClick:function(e){V.current&&e.currentTarget===e.target&&V.current.focus(),R&&R(e)},ref:n},$),z,e.createElement(te.Provider,{value:null},e.createElement(fe,(0,o.Z)({"aria-invalid":ie.error,"aria-describedby":i,autoComplete:a,autoFocus:l,defaultValue:c,disabled:ie.disabled,id:m,onAnimationStart:function(e){de("mui-auto-fill-cancel"===e.animationName?V.current:{value:"x"})},name:C,placeholder:N,readOnly:_,required:ie.required,rows:A,value:H,onKeyDown:M,onKeyUp:Z},pe,{className:(0,r.Z)(s.input,k.className,ie.disabled&&s.disabled,S&&s.inputMultiline,ie.hiddenLabel&&s.inputHiddenLabel,z&&s.inputAdornedStart,f&&s.inputAdornedEnd,"search"===F&&s.inputTypeSearch,"dense"===ie.margin&&s.inputMarginDense),onBlur:function(e){P&&P(e),k.onBlur&&k.onBlur(e),oe&&oe.onBlur?oe.onBlur(e):re(!1)},onChange:function(e){if(!U){var t=e.target||V.current;if(null==t)throw new Error((0,X.Z)(1));de({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];k.onChange&&k.onChange.apply(k,[e].concat(r)),O&&O.apply(void 0,[e].concat(r))},onFocus:function(e){ie.disabled?e.stopPropagation():(T&&T(e),k.onFocus&&k.onFocus(e),oe&&oe.onFocus?oe.onFocus(e):re(!0))}}))),f,L?L((0,o.Z)({},ie,{startAdornment:z})):null)}));const de=(0,f.Z)((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},i={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:(0,o.Z)({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(ce);var fe=e.forwardRef((function(t,n){var i=t.disableUnderline,a=t.classes,l=t.fullWidth,s=void 0!==l&&l,u=t.inputComponent,c=void 0===u?"input":u,d=t.multiline,f=void 0!==d&&d,p=t.type,h=void 0===p?"text":p,m=(0,v.Z)(t,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return e.createElement(de,(0,o.Z)({classes:(0,o.Z)({},a,{root:(0,r.Z)(a.root,!i&&a.underline),underline:null}),fullWidth:s,inputComponent:c,multiline:f,ref:n,type:h},m))}));fe.muiName="Input";const pe=(0,f.Z)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(fe);var he=e.forwardRef((function(t,n){var i=t.disableUnderline,a=t.classes,l=t.fullWidth,s=void 0!==l&&l,u=t.inputComponent,c=void 0===u?"input":u,d=t.multiline,f=void 0!==d&&d,p=t.type,h=void 0===p?"text":p,m=(0,v.Z)(t,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return e.createElement(de,(0,o.Z)({classes:(0,o.Z)({},a,{root:(0,r.Z)(a.root,!i&&a.underline),underline:null}),fullWidth:s,inputComponent:c,multiline:f,ref:n,type:h},m))}));he.muiName="Input";const me=(0,f.Z)((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(he);var ve=n(159);function ge(){return(0,ve.Z)()||a.Z}var ye=e.forwardRef((function(t,n){t.children;var i=t.classes,a=t.className,l=t.label,s=t.labelWidth,u=t.notched,c=t.style,d=(0,v.Z)(t,["children","classes","className","label","labelWidth","notched","style"]),f="rtl"===ge().direction?"right":"left";if(void 0!==l)return e.createElement("fieldset",(0,o.Z)({"aria-hidden":!0,className:(0,r.Z)(i.root,a),ref:n,style:c},d),e.createElement("legend",{className:(0,r.Z)(i.legendLabelled,u&&i.legendNotched)},l?e.createElement("span",null,l):e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var p=s>0?.75*s+8:.01;return e.createElement("fieldset",(0,o.Z)({"aria-hidden":!0,style:(0,o.Z)((0,F.Z)({},"padding".concat((0,D.Z)(f)),8),c),className:(0,r.Z)(i.root,a),ref:n},d),e.createElement("legend",{className:i.legend,style:{width:u?p:.01}},e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}));const be=(0,f.Z)((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(ye);var we=e.forwardRef((function(t,n){var i=t.classes,a=t.fullWidth,l=void 0!==a&&a,s=t.inputComponent,u=void 0===s?"input":s,c=t.label,d=t.labelWidth,f=void 0===d?0:d,p=t.multiline,h=void 0!==p&&p,m=t.notched,g=t.type,y=void 0===g?"text":g,b=(0,v.Z)(t,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return e.createElement(de,(0,o.Z)({renderSuffix:function(t){return e.createElement(be,{className:i.notchedOutline,label:c,labelWidth:f,notched:void 0!==m?m:Boolean(t.startAdornment||t.filled||t.focused)})},classes:(0,o.Z)({},i,{root:(0,r.Z)(i.root,i.underline),notchedOutline:null}),fullWidth:l,inputComponent:u,multiline:h,ref:n,type:y},b))}));we.muiName="Input";const ke=(0,f.Z)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(we);function xe(){return e.useContext(te)}var Ee=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=(t.color,t.component),u=void 0===s?"label":s,c=(t.disabled,t.error,t.filled,t.focused,t.required,(0,v.Z)(t,["children","classes","className","color","component","disabled","error","filled","focused","required"])),d=G({props:t,muiFormControl:xe(),states:["color","required","focused","disabled","error","filled"]});return e.createElement(u,(0,o.Z)({className:(0,r.Z)(a.root,a["color".concat((0,D.Z)(d.color||"primary"))],l,d.disabled&&a.disabled,d.error&&a.error,d.filled&&a.filled,d.focused&&a.focused,d.required&&a.required),ref:n},c),i,d.required&&e.createElement("span",{"aria-hidden":!0,className:(0,r.Z)(a.asterisk,d.error&&a.error)}," ","*"))}));const Se=(0,f.Z)((function(e){return{root:(0,o.Z)({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(Ee);var Ce=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.disableAnimation,s=void 0!==l&&l,u=(t.margin,t.shrink),c=(t.variant,(0,v.Z)(t,["classes","className","disableAnimation","margin","shrink","variant"])),d=xe(),f=u;void 0===f&&d&&(f=d.filled||d.focused||d.adornedStart);var p=G({props:t,muiFormControl:d,states:["margin","variant"]});return e.createElement(Se,(0,o.Z)({"data-shrink":f,className:(0,r.Z)(i.root,a,d&&i.formControl,!s&&i.animated,f&&i.shrink,"dense"===p.margin&&i.marginDense,{filled:i.filled,outlined:i.outlined}[p.variant]),classes:{focused:i.focused,disabled:i.disabled,error:i.error,required:i.required,asterisk:i.asterisk},ref:n},c))}));const Pe=(0,f.Z)((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(Ce);var Oe=n(3711),Re=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.color,u=void 0===s?"primary":s,c=t.component,d=void 0===c?"div":c,f=t.disabled,p=void 0!==f&&f,h=t.error,m=void 0!==h&&h,g=t.fullWidth,y=void 0!==g&&g,b=t.focused,w=t.hiddenLabel,k=void 0!==w&&w,x=t.margin,E=void 0===x?"none":x,S=t.required,C=void 0!==S&&S,P=t.size,O=t.variant,R=void 0===O?"standard":O,T=(0,v.Z)(t,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),M=e.useState((function(){var t=!1;return i&&e.Children.forEach(i,(function(e){if((0,Oe.Z)(e,["Input","Select"])){var n=(0,Oe.Z)(e,["Select"])?e.props.input:e;n&&n.props.startAdornment&&(t=!0)}})),t})),Z=M[0],N=M[1],_=e.useState((function(){var t=!1;return i&&e.Children.forEach(i,(function(e){(0,Oe.Z)(e,["Input","Select"])&&se(e.props,!0)&&(t=!0)})),t})),L=_[0],A=_[1],j=e.useState(!1),I=j[0],z=j[1],W=void 0!==b?b:I;p&&W&&z(!1);var F=e.useCallback((function(){A(!0)}),[]),B={adornedStart:Z,setAdornedStart:N,color:u,disabled:p,error:m,filled:L,focused:W,fullWidth:y,hiddenLabel:k,margin:("small"===P?"dense":void 0)||E,onBlur:function(){z(!1)},onEmpty:e.useCallback((function(){A(!1)}),[]),onFilled:F,onFocus:function(){z(!0)},registerEffect:undefined,required:C,variant:R};return e.createElement(te.Provider,{value:B},e.createElement(d,(0,o.Z)({className:(0,r.Z)(a.root,l,"none"!==E&&a["margin".concat((0,D.Z)(E))],y&&a.fullWidth),ref:n},T),i))}));const Te=(0,f.Z)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(Re);var Me=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.component,u=void 0===s?"p":s,c=(t.disabled,t.error,t.filled,t.focused,t.margin,t.required,t.variant,(0,v.Z)(t,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),d=G({props:t,muiFormControl:xe(),states:["variant","margin","disabled","error","filled","focused","required"]});return e.createElement(u,(0,o.Z)({className:(0,r.Z)(a.root,("filled"===d.variant||"outlined"===d.variant)&&a.contained,l,d.disabled&&a.disabled,d.error&&a.error,d.filled&&a.filled,d.focused&&a.focused,d.required&&a.required,"dense"===d.margin&&a.marginDense),ref:n},c)," "===i?e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):i)}));const Ze=(0,f.Z)((function(e){return{root:(0,o.Z)({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(Me);var Ne=n(5835),_e=n(4699),Le=n(484),Ae=(n(9864),n(626)),je=n(713),Ie=n(2568),De=n(3869),ze=n(4236);var We="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;const Fe=e.forwardRef((function(n,r){var o=n.children,i=n.container,a=n.disablePortal,l=void 0!==a&&a,s=n.onRendered,u=e.useState(null),c=u[0],d=u[1],f=(0,y.Z)(e.isValidElement(o)?o.ref:null,r);return We((function(){l||d(function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(i)||document.body)}),[i,l]),We((function(){if(c&&!l)return(0,ze.Z)(r,c),function(){(0,ze.Z)(r,null)}}),[r,c,l]),We((function(){s&&(c||l)&&s()}),[s,c,l]),l?e.isValidElement(o)?e.cloneElement(o,{ref:f}):o:c?t.createPortal(o,c):c}));var Be=n(2781);var $e=n(5991);function He(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function Ue(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Ve(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function qe(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=[t,n].concat((0,k.Z)(r)),a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&Ue(e,o)}))}function Ke(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}function Ye(e,t){var n,r=[],o=[],i=e.container;if(!t.disableScrollLock){if(function(e){var t=(0,Ae.Z)(e);return t.body===e?(0,je.Z)(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(i)){var a=He();r.push({value:i.style.paddingRight,key:"padding-right",el:i}),i.style["padding-right"]="".concat(Ve(i)+a,"px"),n=(0,Ae.Z)(i).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(Ve(e)+a,"px")}))}var l=i.parentElement,s="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:i;r.push({value:s.style.overflow,key:"overflow",el:s}),s.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}var Qe=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return(0,$e.Z)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Ue(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);qe(t,e.mountNode,e.modalRef,r,!0);var o=Ke(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=Ke(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=Ye(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=Ke(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Ue(e.modalRef,!0),qe(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&Ue(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();const Xe=function(n){var r=n.children,o=n.disableAutoFocus,i=void 0!==o&&o,a=n.disableEnforceFocus,l=void 0!==a&&a,s=n.disableRestoreFocus,u=void 0!==s&&s,c=n.getDoc,d=n.isEnabled,f=n.open,p=e.useRef(),h=e.useRef(null),m=e.useRef(null),v=e.useRef(),g=e.useRef(null),b=e.useCallback((function(e){g.current=t.findDOMNode(e)}),[]),w=(0,y.Z)(r.ref,b),k=e.useRef();return e.useEffect((function(){k.current=f}),[f]),!k.current&&f&&"undefined"!=typeof window&&(v.current=c().activeElement),e.useEffect((function(){if(f){var e=(0,Ae.Z)(g.current);i||!g.current||g.current.contains(e.activeElement)||(g.current.hasAttribute("tabIndex")||g.current.setAttribute("tabIndex",-1),g.current.focus());var t=function(){null!==g.current&&(e.hasFocus()&&!l&&d()&&!p.current?g.current&&!g.current.contains(e.activeElement)&&g.current.focus():p.current=!1)},n=function(t){!l&&d()&&9===t.keyCode&&e.activeElement===g.current&&(p.current=!0,t.shiftKey?m.current.focus():h.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),u||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}}),[i,l,u,d,f]),e.createElement(e.Fragment,null,e.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelStart"}),e.cloneElement(r,{ref:w}),e.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelEnd"}))};var Ge={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}};const Je=e.forwardRef((function(t,n){var r=t.invisible,i=void 0!==r&&r,a=t.open,l=(0,v.Z)(t,["invisible","open"]);return a?e.createElement("div",(0,o.Z)({"aria-hidden":!0,ref:n},l,{style:(0,o.Z)({},Ge.root,i?Ge.invisible:{},l.style)})):null}));var et=new Qe;const tt=e.forwardRef((function(n,r){var i=(0,ve.Z)(),a=(0,De.Z)({name:"MuiModal",props:(0,o.Z)({},n),theme:i}),l=a.BackdropComponent,s=void 0===l?Je:l,u=a.BackdropProps,c=a.children,d=a.closeAfterTransition,f=void 0!==d&&d,p=a.container,h=a.disableAutoFocus,m=void 0!==h&&h,g=a.disableBackdropClick,w=void 0!==g&&g,k=a.disableEnforceFocus,x=void 0!==k&&k,E=a.disableEscapeKeyDown,S=void 0!==E&&E,C=a.disablePortal,P=void 0!==C&&C,O=a.disableRestoreFocus,R=void 0!==O&&O,T=a.disableScrollLock,M=void 0!==T&&T,Z=a.hideBackdrop,N=void 0!==Z&&Z,_=a.keepMounted,L=void 0!==_&&_,A=a.manager,j=void 0===A?et:A,I=a.onBackdropClick,D=a.onClose,z=a.onEscapeKeyDown,W=a.onRendered,F=a.open,B=(0,v.Z)(a,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),$=e.useState(!0),H=$[0],U=$[1],V=e.useRef({}),q=e.useRef(null),K=e.useRef(null),Y=(0,y.Z)(K,r),Q=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(a),X=function(){return(0,Ae.Z)(q.current)},G=function(){return V.current.modalRef=K.current,V.current.mountNode=q.current,V.current},J=function(){j.mount(G(),{disableScrollLock:M}),K.current.scrollTop=0},ee=(0,b.Z)((function(){var e=function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(p)||X().body;j.add(G(),e),K.current&&J()})),te=e.useCallback((function(){return j.isTopModal(G())}),[j]),ne=(0,b.Z)((function(e){q.current=e,e&&(W&&W(),F&&te()?J():Ue(K.current,!0))})),re=e.useCallback((function(){j.remove(G())}),[j]);if(e.useEffect((function(){return function(){re()}}),[re]),e.useEffect((function(){F?ee():Q&&f||re()}),[F,re,Q,f,ee]),!L&&!F&&(!Q||H))return null;var oe=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(i||{zIndex:Be.Z}),ie={};return void 0===c.props.tabIndex&&(ie.tabIndex=c.props.tabIndex||"-1"),Q&&(ie.onEnter=(0,Ie.Z)((function(){U(!1)}),c.props.onEnter),ie.onExited=(0,Ie.Z)((function(){U(!0),f&&re()}),c.props.onExited)),e.createElement(Fe,{ref:ne,container:p,disablePortal:P},e.createElement("div",(0,o.Z)({ref:Y,onKeyDown:function(e){"Escape"===e.key&&te()&&(z&&z(e),S||(e.stopPropagation(),D&&D(e,"escapeKeyDown")))},role:"presentation"},B,{style:(0,o.Z)({},oe.root,!F&&H?oe.hidden:{},B.style)}),N?null:e.createElement(s,(0,o.Z)({open:F,onClick:function(e){e.target===e.currentTarget&&(I&&I(e),!w&&D&&D(e,"backdropClick"))}},u)),e.createElement(Xe,{disableEnforceFocus:x,disableAutoFocus:m,disableRestoreFocus:R,getDoc:X,isEnabled:te,open:F},e.cloneElement(c,ie))))})),nt=!1;var rt="unmounted",ot="exited",it="entering",at="entered",lt="exiting",st=function(n){function r(e,t){var r;r=n.call(this,e,t)||this;var o,i=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?i?(o=ot,r.appearStatus=it):o=at:o=e.unmountOnExit||e.mountOnEnter?rt:ot,r.state={status:o},r.nextCallback=null,r}(0,S.Z)(r,n),r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===rt?{status:ot}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==it&&n!==at&&(t=it):n!==it&&n!==at||(t=lt)}this.updateStatus(!1,t)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},o.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===it?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===ot&&this.setState({status:rt})},o.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,i=this.props.nodeRef?[o]:[t.findDOMNode(this),o],a=i[0],l=i[1],s=this.getTimeouts(),u=o?s.appear:s.enter;!e&&!r||nt?this.safeSetState({status:at},(function(){n.props.onEntered(a)})):(this.props.onEnter(a,l),this.safeSetState({status:it},(function(){n.props.onEntering(a,l),n.onTransitionEnd(u,(function(){n.safeSetState({status:at},(function(){n.props.onEntered(a,l)}))}))})))},o.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n&&!nt?(this.props.onExit(o),this.safeSetState({status:lt},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:ot},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:ot},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},o.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},o.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],a=i[0],l=i[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var t=this.state.status;if(t===rt)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,x.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(C.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function ut(){}st.contextType=C,st.propTypes={},st.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:ut,onEntering:ut,onEntered:ut,onExit:ut,onExiting:ut,onExited:ut},st.UNMOUNTED=rt,st.EXITED=ot,st.ENTERING=it,st.ENTERED=at,st.EXITING=lt;const ct=st;var dt=function(e){return e.scrollTop};function ft(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}function pt(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var ht={entering:{opacity:1,transform:pt(1)},entered:{opacity:1,transform:"none"}},mt=e.forwardRef((function(t,n){var r=t.children,i=t.disableStrictModeCompat,a=void 0!==i&&i,l=t.in,s=t.onEnter,u=t.onEntered,c=t.onEntering,d=t.onExit,f=t.onExited,p=t.onExiting,h=t.style,m=t.timeout,g=void 0===m?"auto":m,b=t.TransitionComponent,w=void 0===b?ct:b,k=(0,v.Z)(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),x=e.useRef(),E=e.useRef(),S=ge(),C=S.unstable_strictMode&&!a,P=e.useRef(null),O=(0,y.Z)(r.ref,n),R=(0,y.Z)(C?P:void 0,O),T=function(e){return function(t,n){if(e){var r=C?[P.current,t]:[t,n],o=(0,_e.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},M=T(c),Z=T((function(e,t){dt(e);var n,r=ft({style:h,timeout:g},{mode:"enter"}),o=r.duration,i=r.delay;"auto"===g?(n=S.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=o,e.style.transition=[S.transitions.create("opacity",{duration:n,delay:i}),S.transitions.create("transform",{duration:.666*n,delay:i})].join(","),s&&s(e,t)})),N=T(u),_=T(p),L=T((function(e){var t,n=ft({style:h,timeout:g},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===g?(t=S.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=r,e.style.transition=[S.transitions.create("opacity",{duration:t,delay:o}),S.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=pt(.75),d&&d(e)})),A=T(f);return e.useEffect((function(){return function(){clearTimeout(x.current)}}),[]),e.createElement(w,(0,o.Z)({appear:!0,in:l,nodeRef:C?P:void 0,onEnter:Z,onEntered:N,onEntering:M,onExit:L,onExited:A,onExiting:_,addEndListener:function(e,t){var n=C?e:t;"auto"===g&&(x.current=setTimeout(n,E.current||0))},timeout:"auto"===g?null:g},k),(function(t,n){return e.cloneElement(r,(0,o.Z)({style:(0,o.Z)({opacity:0,transform:pt(.75),visibility:"exited"!==t||l?void 0:"hidden"},ht[t],h,r.props.style),ref:R},n))}))}));mt.muiSupportAuto=!0;const vt=mt;function gt(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function yt(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function bt(e){return[e.horizontal,e.vertical].map((function(e){return"number"==typeof e?"".concat(e,"px"):e})).join(" ")}function wt(e){return"function"==typeof e?e():e}var kt=e.forwardRef((function(n,i){var a=n.action,l=n.anchorEl,s=n.anchorOrigin,u=void 0===s?{vertical:"top",horizontal:"left"}:s,c=n.anchorPosition,d=n.anchorReference,f=void 0===d?"anchorEl":d,p=n.children,h=n.classes,m=n.className,g=n.container,y=n.elevation,b=void 0===y?8:y,w=n.getContentAnchorEl,k=n.marginThreshold,x=void 0===k?16:k,E=n.onEnter,S=n.onEntered,C=n.onEntering,P=n.onExit,O=n.onExited,R=n.onExiting,T=n.open,M=n.PaperProps,Z=void 0===M?{}:M,N=n.transformOrigin,_=void 0===N?{vertical:"top",horizontal:"left"}:N,L=n.TransitionComponent,A=void 0===L?vt:L,j=n.transitionDuration,I=void 0===j?"auto":j,D=n.TransitionProps,z=void 0===D?{}:D,W=(0,v.Z)(n,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),F=e.useRef(),B=e.useCallback((function(e){if("anchorPosition"===f)return c;var t=wt(l),n=(t&&1===t.nodeType?t:(0,Ae.Z)(F.current).body).getBoundingClientRect(),r=0===e?u.vertical:"center";return{top:n.top+gt(n,r),left:n.left+yt(n,u.horizontal)}}),[l,u.horizontal,u.vertical,c,f]),$=e.useCallback((function(e){var t=0;if(w&&"anchorEl"===f){var n=w(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentElement).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}0}return t}),[u.vertical,f,w]),H=e.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:gt(e,_.vertical)+t,horizontal:yt(e,_.horizontal)}}),[_.horizontal,_.vertical]),U=e.useCallback((function(e){var t=$(e),n={width:e.offsetWidth,height:e.offsetHeight},r=H(n,t);if("none"===f)return{top:null,left:null,transformOrigin:bt(r)};var o=B(t),i=o.top-r.vertical,a=o.left-r.horizontal,s=i+n.height,u=a+n.width,c=(0,je.Z)(wt(l)),d=c.innerHeight-x,p=c.innerWidth-x;if(i<x){var h=i-x;i-=h,r.vertical+=h}else if(s>d){var m=s-d;i-=m,r.vertical+=m}if(a<x){var v=a-x;a-=v,r.horizontal+=v}else if(u>p){var g=u-p;a-=g,r.horizontal+=g}return{top:"".concat(Math.round(i),"px"),left:"".concat(Math.round(a),"px"),transformOrigin:bt(r)}}),[l,f,B,$,H,x]),V=e.useCallback((function(){var e=F.current;if(e){var t=U(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[U]),q=e.useCallback((function(e){F.current=t.findDOMNode(e)}),[]);e.useEffect((function(){T&&V()})),e.useImperativeHandle(a,(function(){return T?{updatePosition:function(){V()}}:null}),[T,V]),e.useEffect((function(){if(T){var e=(0,ne.Z)((function(){V()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[T,V]);var K=I;"auto"!==I||A.muiSupportAuto||(K=void 0);var Y=g||(l?(0,Ae.Z)(wt(l)).body:void 0);return e.createElement(tt,(0,o.Z)({container:Y,open:T,ref:i,BackdropProps:{invisible:!0},className:(0,r.Z)(h.root,m)},W),e.createElement(A,(0,o.Z)({appear:!0,in:T,onEnter:E,onEntered:S,onExit:P,onExited:O,onExiting:R,timeout:K},z,{onEntering:(0,Ie.Z)((function(e,t){C&&C(e,t),V()}),z.onEntering)}),e.createElement(Q,(0,o.Z)({elevation:b,ref:q},Z,{className:(0,r.Z)(h.paper,Z.className)}),p)))}));const xt=(0,f.Z)({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(kt);const Et=e.createContext({});var St=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.component,u=void 0===s?"ul":s,c=t.dense,d=void 0!==c&&c,f=t.disablePadding,p=void 0!==f&&f,h=t.subheader,m=(0,v.Z)(t,["children","classes","className","component","dense","disablePadding","subheader"]),g=e.useMemo((function(){return{dense:d}}),[d]);return e.createElement(Et.Provider,{value:g},e.createElement(u,(0,o.Z)({className:(0,r.Z)(a.root,l,d&&a.dense,!p&&a.padding,h&&a.subheader),ref:n},m),h,i))}));const Ct=(0,f.Z)({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(St);function Pt(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ot(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Rt(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function Tt(e,t,n,r,o,i){for(var a=!1,l=o(e,t,!!t&&n);l;){if(l===e.firstChild){if(a)return;a=!0}var s=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&Rt(l,i)&&!s)return void l.focus();l=o(e,l,n)}}var Mt="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const Zt=e.forwardRef((function(n,r){var i=n.actions,a=n.autoFocus,l=void 0!==a&&a,s=n.autoFocusItem,u=void 0!==s&&s,c=n.children,d=n.className,f=n.disabledItemsFocusable,p=void 0!==f&&f,h=n.disableListWrap,m=void 0!==h&&h,g=n.onKeyDown,b=n.variant,w=void 0===b?"selectedMenu":b,k=(0,v.Z)(n,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),x=e.useRef(null),E=e.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Mt((function(){l&&x.current.focus()}),[l]),e.useImperativeHandle(i,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!x.current.style.width;if(e.clientHeight<x.current.clientHeight&&n){var r="".concat(He(),"px");x.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,x.current.style.width="calc(100% + ".concat(r,")")}return x.current}}}),[]);var S=e.useCallback((function(e){x.current=t.findDOMNode(e)}),[]),C=(0,y.Z)(S,r),P=-1;e.Children.forEach(c,(function(t,n){e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===w&&t.props.selected||-1===P)&&(P=n))}));var O=e.Children.map(c,(function(t,n){if(n===P){var r={};return u&&(r.autoFocus=!0),void 0===t.props.tabIndex&&"selectedMenu"===w&&(r.tabIndex=0),e.cloneElement(t,r)}return t}));return e.createElement(Ct,(0,o.Z)({role:"menu",ref:C,className:d,onKeyDown:function(e){var t=x.current,n=e.key,r=(0,Ae.Z)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Tt(t,r,m,p,Pt);else if("ArrowUp"===n)e.preventDefault(),Tt(t,r,m,p,Ot);else if("Home"===n)e.preventDefault(),Tt(t,null,m,p,Pt);else if("End"===n)e.preventDefault(),Tt(t,null,m,p,Ot);else if(1===n.length){var o=E.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);var l=r&&!o.repeating&&Rt(r,o);o.previousKeyMatched&&(l||Tt(t,r,!1,p,Pt,o))?e.preventDefault():o.previousKeyMatched=!1}g&&g(e)},tabIndex:l?0:-1},k),O)}));var Nt={vertical:"top",horizontal:"right"},_t={vertical:"top",horizontal:"left"},Lt=e.forwardRef((function(n,i){var a=n.autoFocus,l=void 0===a||a,s=n.children,u=n.classes,c=n.disableAutoFocusItem,d=void 0!==c&&c,f=n.MenuListProps,p=void 0===f?{}:f,h=n.onClose,m=n.onEntering,g=n.open,y=n.PaperProps,b=void 0===y?{}:y,w=n.PopoverClasses,k=n.transitionDuration,x=void 0===k?"auto":k,E=n.variant,S=void 0===E?"selectedMenu":E,C=(0,v.Z)(n,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","variant"]),P=ge(),O=l&&!d&&g,R=e.useRef(null),T=e.useRef(null),M=-1;e.Children.map(s,(function(t,n){e.isValidElement(t)&&(t.props.disabled||("menu"!==S&&t.props.selected||-1===M)&&(M=n))}));var Z=e.Children.map(s,(function(n,r){return r===M?e.cloneElement(n,{ref:function(e){T.current=t.findDOMNode(e),(0,ze.Z)(n.ref,e)}}):n}));return e.createElement(xt,(0,o.Z)({getContentAnchorEl:function(){return T.current},classes:w,onClose:h,onEntering:function(e,t){R.current&&R.current.adjustStyleForScrollbar(e,P),m&&m(e,t)},anchorOrigin:"rtl"===P.direction?Nt:_t,transformOrigin:"rtl"===P.direction?Nt:_t,PaperProps:(0,o.Z)({},b,{classes:(0,o.Z)({},b.classes,{root:u.paper})}),open:g,ref:i,transitionDuration:x},C),e.createElement(Zt,(0,o.Z)({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),h&&h(e,"tabKeyDown"))},actions:R,autoFocus:l&&(-1===M||d),autoFocusItem:O,variant:S},p,{className:(0,r.Z)(u.list,p.className)}),Z))}));const At=(0,f.Z)({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(Lt);var jt=n(2775);function It(e,t){return"object"===(0,Le.Z)(t)&&null!==t?e===t:String(e)===String(t)}const Dt=e.forwardRef((function(t,n){var i=t["aria-label"],a=t.autoFocus,l=t.autoWidth,s=t.children,u=t.classes,c=t.className,d=t.defaultValue,f=t.disabled,p=t.displayEmpty,h=t.IconComponent,m=t.inputRef,g=t.labelId,b=t.MenuProps,w=void 0===b?{}:b,k=t.multiple,x=t.name,E=t.onBlur,S=t.onChange,C=t.onClose,P=t.onFocus,O=t.onOpen,R=t.open,T=t.readOnly,M=t.renderValue,Z=t.SelectDisplayProps,N=void 0===Z?{}:Z,_=t.tabIndex,L=(t.type,t.value),A=t.variant,j=void 0===A?"standard":A,I=(0,v.Z)(t,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"]),z=(0,jt.Z)({controlled:L,default:d,name:"Select"}),W=(0,_e.Z)(z,2),F=W[0],B=W[1],$=e.useRef(null),H=e.useState(null),U=H[0],V=H[1],q=e.useRef(null!=R).current,K=e.useState(),Y=K[0],Q=K[1],G=e.useState(!1),J=G[0],ee=G[1],te=(0,y.Z)(n,m);e.useImperativeHandle(te,(function(){return{focus:function(){U.focus()},node:$.current,value:F}}),[U,F]),e.useEffect((function(){a&&U&&U.focus()}),[a,U]),e.useEffect((function(){if(U){var e=(0,Ae.Z)(U).getElementById(g);if(e){var t=function(){getSelection().isCollapsed&&U.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[g,U]);var ne,re,oe=function(e,t){e?O&&O(t):C&&C(t),q||(Q(l?null:U.clientWidth),ee(e))},ie=e.Children.toArray(s),ae=function(e){return function(t){var n;if(k||oe(!1,t),k){n=Array.isArray(F)?F.slice():[];var r=F.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),F!==n&&(B(n),S&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:x}}),S(t,e)))}},le=null!==U&&(q?R:J);delete I["aria-invalid"];var ue=[],ce=!1;(se({value:F})||p)&&(M?ne=M(F):ce=!0);var de=ie.map((function(t){if(!e.isValidElement(t))return null;var n;if(k){if(!Array.isArray(F))throw new Error((0,X.Z)(2));(n=F.some((function(e){return It(e,t.props.value)})))&&ce&&ue.push(t.props.children)}else(n=It(F,t.props.value))&&ce&&(re=t.props.children);return n&&!0,e.cloneElement(t,{"aria-selected":n?"true":void 0,onClick:ae(t),onKeyUp:function(e){" "===e.key&&e.preventDefault(),t.props.onKeyUp&&t.props.onKeyUp(e)},role:"option",selected:n,value:void 0,"data-value":t.props.value})}));ce&&(ne=k?ue.join(", "):re);var fe,pe=Y;!l&&q&&U&&(pe=U.clientWidth),fe=void 0!==_?_:f?null:0;var he=N.id||(x?"mui-component-select-".concat(x):void 0);return e.createElement(e.Fragment,null,e.createElement("div",(0,o.Z)({className:(0,r.Z)(u.root,u.select,u.selectMenu,u[j],c,f&&u.disabled),ref:V,tabIndex:fe,role:"button","aria-disabled":f?"true":void 0,"aria-expanded":le?"true":void 0,"aria-haspopup":"listbox","aria-label":i,"aria-labelledby":[g,he].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){if(!T){-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),oe(!0,e))}},onMouseDown:f||T?null:function(e){0===e.button&&(e.preventDefault(),U.focus(),oe(!0,e))},onBlur:function(e){!le&&E&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:F,name:x}}),E(e))},onFocus:P},N,{id:he}),function(e){return null==e||"string"==typeof e&&!e.trim()}(ne)?e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):ne),e.createElement("input",(0,o.Z)({value:Array.isArray(F)?F.join(","):F,name:x,ref:$,"aria-hidden":!0,onChange:function(e){var t=ie.map((function(e){return e.props.value})).indexOf(e.target.value);if(-1!==t){var n=ie[t];B(n.props.value),S&&S(e,n)}},tabIndex:-1,className:u.nativeInput,autoFocus:a},I)),e.createElement(h,{className:(0,r.Z)(u.icon,u["icon".concat((0,D.Z)(j))],le&&u.iconOpen,f&&u.disabled)}),e.createElement(At,(0,o.Z)({id:"menu-".concat(x||""),anchorEl:U,open:le,onClose:function(e){oe(!1,e)}},w,{MenuListProps:(0,o.Z)({"aria-labelledby":g,role:"listbox",disableListWrap:!0},w.MenuListProps),PaperProps:(0,o.Z)({},w.PaperProps,{style:(0,o.Z)({minWidth:pe},null!=w.PaperProps?w.PaperProps.style:null)})}),de))}));const zt=(0,n(5209).Z)(e.createElement("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");const Wt=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.disabled,s=t.IconComponent,u=t.inputRef,c=t.variant,d=void 0===c?"standard":c,f=(0,v.Z)(t,["classes","className","disabled","IconComponent","inputRef","variant"]);return e.createElement(e.Fragment,null,e.createElement("select",(0,o.Z)({className:(0,r.Z)(i.root,i.select,i[d],a,l&&i.disabled),disabled:l,ref:u||n},f)),t.multiple?null:e.createElement(s,{className:(0,r.Z)(i.icon,i["icon".concat((0,D.Z)(d))],l&&i.disabled)}))}));var Ft=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7},nativeInput:{bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%"}}},Bt=e.createElement(pe,null),$t=e.forwardRef((function(t,n){var r=t.children,i=t.classes,a=t.IconComponent,l=void 0===a?zt:a,s=t.input,u=void 0===s?Bt:s,c=t.inputProps,d=(t.variant,(0,v.Z)(t,["children","classes","IconComponent","input","inputProps","variant"])),f=G({props:t,muiFormControl:xe(),states:["variant"]});return e.cloneElement(u,(0,o.Z)({inputComponent:Wt,inputProps:(0,o.Z)({children:r,classes:i,IconComponent:l,variant:f.variant,type:void 0},c,u?u.props.inputProps:{}),ref:n},d))}));$t.muiName="Select";(0,f.Z)(Ft,{name:"MuiNativeSelect"})($t);var Ht=Ft,Ut=e.createElement(pe,null),Vt=e.createElement(me,null),qt=e.forwardRef((function t(n,r){var i=n.autoWidth,a=void 0!==i&&i,l=n.children,s=n.classes,u=n.displayEmpty,c=void 0!==u&&u,d=n.IconComponent,f=void 0===d?zt:d,p=n.id,h=n.input,m=n.inputProps,g=n.label,y=n.labelId,b=n.labelWidth,w=void 0===b?0:b,k=n.MenuProps,x=n.multiple,E=void 0!==x&&x,S=n.native,C=void 0!==S&&S,P=n.onClose,O=n.onOpen,R=n.open,T=n.renderValue,M=n.SelectDisplayProps,Z=n.variant,N=void 0===Z?"standard":Z,_=(0,v.Z)(n,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),L=C?Wt:Dt,A=G({props:n,muiFormControl:xe(),states:["variant"]}).variant||N,j=h||{standard:Ut,outlined:e.createElement(ke,{label:g,labelWidth:w}),filled:Vt}[A];return e.cloneElement(j,(0,o.Z)({inputComponent:L,inputProps:(0,o.Z)({children:l,IconComponent:f,variant:A,type:void 0,multiple:E},C?{id:p}:{autoWidth:a,displayEmpty:c,labelId:y,MenuProps:k,onClose:P,onOpen:O,open:R,renderValue:T,SelectDisplayProps:(0,o.Z)({id:p},M)},m,{classes:m?(0,Ne.Z)({baseClasses:s,newClasses:m.classes,Component:t}):s},h?h.props.inputProps:{}),ref:r},_))}));qt.muiName="Select";const Kt=(0,f.Z)(Ht,{name:"MuiSelect"})(qt);var Yt={standard:pe,filled:me,outlined:ke},Qt=e.forwardRef((function(t,n){var i=t.autoComplete,a=t.autoFocus,l=void 0!==a&&a,s=t.children,u=t.classes,c=t.className,d=t.color,f=void 0===d?"primary":d,p=t.defaultValue,h=t.disabled,m=void 0!==h&&h,g=t.error,y=void 0!==g&&g,b=t.FormHelperTextProps,w=t.fullWidth,k=void 0!==w&&w,x=t.helperText,E=t.hiddenLabel,S=t.id,C=t.InputLabelProps,P=t.inputProps,O=t.InputProps,R=t.inputRef,T=t.label,M=t.multiline,Z=void 0!==M&&M,N=t.name,_=t.onBlur,L=t.onChange,A=t.onFocus,j=t.placeholder,I=t.required,D=void 0!==I&&I,z=t.rows,W=t.rowsMax,F=t.select,B=void 0!==F&&F,$=t.SelectProps,H=t.type,U=t.value,V=t.variant,q=void 0===V?"standard":V,K=(0,v.Z)(t,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]);var Y={};if("outlined"===q&&(C&&void 0!==C.shrink&&(Y.notched=C.shrink),T)){var Q,X=null!==(Q=null==C?void 0:C.required)&&void 0!==Q?Q:D;Y.label=e.createElement(e.Fragment,null,T,X&&" *")}B&&($&&$.native||(Y.id=void 0),Y["aria-describedby"]=void 0);var G=x&&S?"".concat(S,"-helper-text"):void 0,J=T&&S?"".concat(S,"-label"):void 0,ee=Yt[q],te=e.createElement(ee,(0,o.Z)({"aria-describedby":G,autoComplete:i,autoFocus:l,defaultValue:p,fullWidth:k,multiline:Z,name:N,rows:z,rowsMax:W,type:H,value:U,id:S,inputRef:R,onBlur:_,onChange:L,onFocus:A,placeholder:j,inputProps:P},Y,O));return e.createElement(Te,(0,o.Z)({className:(0,r.Z)(u.root,c),disabled:m,error:y,fullWidth:k,hiddenLabel:E,ref:n,required:D,color:f,variant:q},K),T&&e.createElement(Pe,(0,o.Z)({htmlFor:S,id:J},C),T),B?e.createElement(Kt,(0,o.Z)({"aria-describedby":G,id:S,labelId:J,value:U,input:te},$),s):te,x&&e.createElement(Ze,(0,o.Z)({id:G},b),x))}));const Xt=(0,f.Z)({root:{}},{name:"MuiTextField"})(Qt);var Gt="undefined"==typeof window?e.useEffect:e.useLayoutEffect,Jt=e.forwardRef((function(n,i){var a=n.alignItems,l=void 0===a?"center":a,s=n.autoFocus,u=void 0!==s&&s,c=n.button,d=void 0!==c&&c,f=n.children,p=n.classes,h=n.className,m=n.component,g=n.ContainerComponent,b=void 0===g?"li":g,w=n.ContainerProps,k=(w=void 0===w?{}:w).className,x=(0,v.Z)(w,["className"]),E=n.dense,S=void 0!==E&&E,C=n.disabled,P=void 0!==C&&C,O=n.disableGutters,R=void 0!==O&&O,T=n.divider,M=void 0!==T&&T,Z=n.focusVisibleClassName,N=n.selected,_=void 0!==N&&N,L=(0,v.Z)(n,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),A=e.useContext(Et),j={dense:S||A.dense||!1,alignItems:l},D=e.useRef(null);Gt((function(){u&&D.current&&D.current.focus()}),[u]);var z=e.Children.toArray(f),W=z.length&&(0,Oe.Z)(z[z.length-1],["ListItemSecondaryAction"]),F=e.useCallback((function(e){D.current=t.findDOMNode(e)}),[]),B=(0,y.Z)(F,i),$=(0,o.Z)({className:(0,r.Z)(p.root,h,j.dense&&p.dense,!R&&p.gutters,M&&p.divider,P&&p.disabled,d&&p.button,"center"!==l&&p.alignItemsFlexStart,W&&p.secondaryAction,_&&p.selected),disabled:P},L),H=m||"li";return d&&($.component=m||"div",$.focusVisibleClassName=(0,r.Z)(p.focusVisible,Z),H=I),W?(H=$.component||m?H:"div","li"===b&&("li"===H?H="div":"li"===$.component&&($.component="div")),e.createElement(Et.Provider,{value:j},e.createElement(b,(0,o.Z)({className:(0,r.Z)(p.container,k),ref:B},x),e.createElement(H,$,z),z.pop()))):e.createElement(Et.Provider,{value:j},e.createElement(H,(0,o.Z)({ref:B},$),z))}));const en=(0,f.Z)((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(Jt);var tn=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=(0,v.Z)(t,["classes","className"]),s=e.useContext(Et);return e.createElement("div",(0,o.Z)({className:(0,r.Z)(i.root,a,"flex-start"===s.alignItems&&i.alignItemsFlexStart),ref:n},l))}));const nn=(0,f.Z)((function(e){return{root:{minWidth:56,color:e.palette.action.active,flexShrink:0,display:"inline-flex"},alignItemsFlexStart:{marginTop:8}}}),{name:"MuiListItemIcon"})(tn);var rn={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},on=e.forwardRef((function(t,n){var i=t.align,a=void 0===i?"inherit":i,l=t.classes,s=t.className,u=t.color,c=void 0===u?"initial":u,d=t.component,f=t.display,p=void 0===f?"initial":f,h=t.gutterBottom,m=void 0!==h&&h,g=t.noWrap,y=void 0!==g&&g,b=t.paragraph,w=void 0!==b&&b,k=t.variant,x=void 0===k?"body1":k,E=t.variantMapping,S=void 0===E?rn:E,C=(0,v.Z)(t,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),P=d||(w?"p":S[x]||rn[x])||"span";return e.createElement(P,(0,o.Z)({className:(0,r.Z)(l.root,s,"inherit"!==x&&l[x],"initial"!==c&&l["color".concat((0,D.Z)(c))],y&&l.noWrap,m&&l.gutterBottom,w&&l.paragraph,"inherit"!==a&&l["align".concat((0,D.Z)(a))],"initial"!==p&&l["display".concat((0,D.Z)(p))]),ref:n},C))}));const an=(0,f.Z)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(on);var ln=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.disableTypography,u=void 0!==s&&s,c=t.inset,d=void 0!==c&&c,f=t.primary,p=t.primaryTypographyProps,h=t.secondary,m=t.secondaryTypographyProps,g=(0,v.Z)(t,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),y=e.useContext(Et).dense,b=null!=f?f:i;null==b||b.type===an||u||(b=e.createElement(an,(0,o.Z)({variant:y?"body2":"body1",className:a.primary,component:"span",display:"block"},p),b));var w=h;return null==w||w.type===an||u||(w=e.createElement(an,(0,o.Z)({variant:"body2",className:a.secondary,color:"textSecondary",display:"block"},m),w)),e.createElement("div",(0,o.Z)({className:(0,r.Z)(a.root,l,y&&a.dense,d&&a.inset,b&&w&&a.multiline),ref:n},g),b,w)}));const sn=(0,f.Z)({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(ln);var un=n(4152),cn=n(3366),dn=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.collapsedHeight,u=void 0===s?"0px":s,c=t.component,d=void 0===c?"div":c,f=t.disableStrictModeCompat,p=void 0!==f&&f,h=t.in,m=t.onEnter,g=t.onEntered,b=t.onEntering,w=t.onExit,k=t.onExited,x=t.onExiting,E=t.style,S=t.timeout,C=void 0===S?cn.x9.standard:S,P=t.TransitionComponent,O=void 0===P?ct:P,R=(0,v.Z)(t,["children","classes","className","collapsedHeight","component","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),T=ge(),M=e.useRef(),Z=e.useRef(null),N=e.useRef(),_="number"==typeof u?"".concat(u,"px"):u;e.useEffect((function(){return function(){clearTimeout(M.current)}}),[]);var L=T.unstable_strictMode&&!p,A=e.useRef(null),j=(0,y.Z)(n,L?A:void 0),I=function(e){return function(t,n){if(e){var r=L?[A.current,t]:[t,n],o=(0,_e.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},D=I((function(e,t){e.style.height=_,m&&m(e,t)})),z=I((function(e,t){var n=Z.current?Z.current.clientHeight:0,r=ft({style:E,timeout:C},{mode:"enter"}).duration;if("auto"===C){var o=T.transitions.getAutoHeightDuration(n);e.style.transitionDuration="".concat(o,"ms"),N.current=o}else e.style.transitionDuration="string"==typeof r?r:"".concat(r,"ms");e.style.height="".concat(n,"px"),b&&b(e,t)})),W=I((function(e,t){e.style.height="auto",g&&g(e,t)})),F=I((function(e){var t=Z.current?Z.current.clientHeight:0;e.style.height="".concat(t,"px"),w&&w(e)})),B=I(k),$=I((function(e){var t=Z.current?Z.current.clientHeight:0,n=ft({style:E,timeout:C},{mode:"exit"}).duration;if("auto"===C){var r=T.transitions.getAutoHeightDuration(t);e.style.transitionDuration="".concat(r,"ms"),N.current=r}else e.style.transitionDuration="string"==typeof n?n:"".concat(n,"ms");e.style.height=_,x&&x(e)}));return e.createElement(O,(0,o.Z)({in:h,onEnter:D,onEntered:W,onEntering:z,onExit:F,onExited:B,onExiting:$,addEndListener:function(e,t){var n=L?e:t;"auto"===C&&(M.current=setTimeout(n,N.current||0))},nodeRef:L?A:void 0,timeout:"auto"===C?null:C},R),(function(t,n){return e.createElement(d,(0,o.Z)({className:(0,r.Z)(a.container,l,{entered:a.entered,exited:!h&&"0px"===_&&a.hidden}[t]),style:(0,o.Z)({minHeight:_},E),ref:j},n),e.createElement("div",{className:a.wrapper,ref:Z},e.createElement("div",{className:a.wrapperInner},i)))}))}));dn.muiSupportAuto=!0;const fn=(0,f.Z)((function(e){return{container:{height:0,overflow:"hidden",transition:e.transitions.create("height")},entered:{height:"auto",overflow:"visible"},hidden:{visibility:"hidden"},wrapper:{display:"flex"},wrapperInner:{width:"100%"}}}),{name:"MuiCollapse"})(dn);var pn=e.forwardRef((function(t,n){var i=t.anchorOrigin,a=void 0===i?{vertical:"top",horizontal:"right"}:i,l=t.badgeContent,s=t.children,u=t.classes,c=t.className,d=t.color,f=void 0===d?"default":d,p=t.component,h=void 0===p?"span":p,m=t.invisible,g=t.max,y=void 0===g?99:g,b=t.overlap,w=void 0===b?"rectangle":b,k=t.showZero,x=void 0!==k&&k,E=t.variant,S=void 0===E?"standard":E,C=(0,v.Z)(t,["anchorOrigin","badgeContent","children","classes","className","color","component","invisible","max","overlap","showZero","variant"]),P=m;null==m&&(0===l&&!x||null==l&&"dot"!==S)&&(P=!0);var O="";return"dot"!==S&&(O=l>y?"".concat(y,"+"):l),e.createElement(h,(0,o.Z)({className:(0,r.Z)(u.root,c),ref:n},C),s,e.createElement("span",{className:(0,r.Z)(u.badge,u["".concat(a.horizontal).concat((0,D.Z)(a.vertical),"}")],u["anchorOrigin".concat((0,D.Z)(a.vertical)).concat((0,D.Z)(a.horizontal)).concat((0,D.Z)(w))],"default"!==f&&u["color".concat((0,D.Z)(f))],P&&u.invisible,"dot"===S&&u.dot)},O))}));const hn=(0,f.Z)((function(e){return{root:{position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0},badge:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen})},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorError:{backgroundColor:e.palette.error.main,color:e.palette.error.contrastText},dot:{borderRadius:4,height:8,minWidth:8,padding:0},anchorOriginTopRightRectangle:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightRectangle:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftRectangle:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftRectangle:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},anchorOriginTopRightCircle:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightCircle:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftCircle:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftCircle:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},invisible:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}}}),{name:"MuiBadge"})(pn);function mn(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}const vn=function(e,t){var n;void 0===t&&(t=mn);var r,o=[],i=!1;return function(){for(var a=[],l=0;l<arguments.length;l++)a[l]=arguments[l];return i&&n===this&&t(a,o)||(r=e.apply(this,a),i=!0,n=this,o=a),r}};var gn="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};function yn(e){cancelAnimationFrame(e.id)}function bn(e,t){var n=gn();var r={id:requestAnimationFrame((function o(){gn()-n>=t?e.call(null):r.id=requestAnimationFrame(o)}))};return r}var wn=null;function kn(e){if(void 0===e&&(e=!1),null===wn||e){var t=document.createElement("div"),n=t.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),o=r.style;return o.width="100px",o.height="100px",t.appendChild(r),document.body.appendChild(t),t.scrollLeft>0?wn="positive-descending":(t.scrollLeft=1,wn=0===t.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(t),wn}return wn}var xn=function(e,t){return e};function En(t){var n,r,i=t.getItemOffset,a=t.getEstimatedTotalSize,l=t.getItemSize,s=t.getOffsetForIndexAndAlignment,u=t.getStartIndexForOffset,c=t.getStopIndexForStartIndex,d=t.initInstanceProps,f=t.shouldResetStyleCacheOnItemSizeChange,p=t.validateProps;return r=n=function(t){function n(e){var n;return(n=t.call(this,e)||this)._instanceProps=d(n.props,(0,E.Z)((0,E.Z)(n))),n._outerRef=void 0,n._resetIsScrollingTimeoutId=null,n.state={instance:(0,E.Z)((0,E.Z)(n)),isScrolling:!1,scrollDirection:"forward",scrollOffset:"number"==typeof n.props.initialScrollOffset?n.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},n._callOnItemsRendered=void 0,n._callOnItemsRendered=vn((function(e,t,r,o){return n.props.onItemsRendered({overscanStartIndex:e,overscanStopIndex:t,visibleStartIndex:r,visibleStopIndex:o})})),n._callOnScroll=void 0,n._callOnScroll=vn((function(e,t,r){return n.props.onScroll({scrollDirection:e,scrollOffset:t,scrollUpdateWasRequested:r})})),n._getItemStyle=void 0,n._getItemStyle=function(e){var t,r=n.props,o=r.direction,a=r.itemSize,s=r.layout,u=n._getItemStyleCache(f&&a,f&&s,f&&o);if(u.hasOwnProperty(e))t=u[e];else{var c=i(n.props,e,n._instanceProps),d=l(n.props,e,n._instanceProps),p="horizontal"===o||"horizontal"===s,h="rtl"===o,m=p?c:0;u[e]=t={position:"absolute",left:h?void 0:m,right:h?m:void 0,top:p?0:c,height:p?"100%":d,width:p?d:"100%"}}return t},n._getItemStyleCache=void 0,n._getItemStyleCache=vn((function(e,t,n){return{}})),n._onScrollHorizontal=function(e){var t=e.currentTarget,r=t.clientWidth,o=t.scrollLeft,i=t.scrollWidth;n.setState((function(e){if(e.scrollOffset===o)return null;var t=n.props.direction,a=o;if("rtl"===t)switch(kn()){case"negative":a=-o;break;case"positive-descending":a=i-r-o}return a=Math.max(0,Math.min(a,i-r)),{isScrolling:!0,scrollDirection:e.scrollOffset<o?"forward":"backward",scrollOffset:a,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._onScrollVertical=function(e){var t=e.currentTarget,r=t.clientHeight,o=t.scrollHeight,i=t.scrollTop;n.setState((function(e){if(e.scrollOffset===i)return null;var t=Math.max(0,Math.min(i,o-r));return{isScrolling:!0,scrollDirection:e.scrollOffset<t?"forward":"backward",scrollOffset:t,scrollUpdateWasRequested:!1}}),n._resetIsScrollingDebounced)},n._outerRefSetter=function(e){var t=n.props.outerRef;n._outerRef=e,"function"==typeof t?t(e):null!=t&&"object"==typeof t&&t.hasOwnProperty("current")&&(t.current=e)},n._resetIsScrollingDebounced=function(){null!==n._resetIsScrollingTimeoutId&&yn(n._resetIsScrollingTimeoutId),n._resetIsScrollingTimeoutId=bn(n._resetIsScrolling,150)},n._resetIsScrolling=function(){n._resetIsScrollingTimeoutId=null,n.setState({isScrolling:!1},(function(){n._getItemStyleCache(-1,null)}))},n}(0,S.Z)(n,t),n.getDerivedStateFromProps=function(e,t){return Sn(e,t),p(e),null};var r=n.prototype;return r.scrollTo=function(e){e=Math.max(0,e),this.setState((function(t){return t.scrollOffset===e?null:{scrollDirection:t.scrollOffset<e?"forward":"backward",scrollOffset:e,scrollUpdateWasRequested:!0}}),this._resetIsScrollingDebounced)},r.scrollToItem=function(e,t){void 0===t&&(t="auto");var n=this.props.itemCount,r=this.state.scrollOffset;e=Math.max(0,Math.min(e,n-1)),this.scrollTo(s(this.props,e,t,r,this._instanceProps))},r.componentDidMount=function(){var e=this.props,t=e.direction,n=e.initialScrollOffset,r=e.layout;if("number"==typeof n&&null!=this._outerRef){var o=this._outerRef;"horizontal"===t||"horizontal"===r?o.scrollLeft=n:o.scrollTop=n}this._callPropsCallbacks()},r.componentDidUpdate=function(){var e=this.props,t=e.direction,n=e.layout,r=this.state,o=r.scrollOffset;if(r.scrollUpdateWasRequested&&null!=this._outerRef){var i=this._outerRef;if("horizontal"===t||"horizontal"===n)if("rtl"===t)switch(kn()){case"negative":i.scrollLeft=-o;break;case"positive-ascending":i.scrollLeft=o;break;default:var a=i.clientWidth,l=i.scrollWidth;i.scrollLeft=l-a-o}else i.scrollLeft=o;else i.scrollTop=o}this._callPropsCallbacks()},r.componentWillUnmount=function(){null!==this._resetIsScrollingTimeoutId&&yn(this._resetIsScrollingTimeoutId)},r.render=function(){var t=this.props,n=t.children,r=t.className,i=t.direction,l=t.height,s=t.innerRef,u=t.innerElementType,c=t.innerTagName,d=t.itemCount,f=t.itemData,p=t.itemKey,h=void 0===p?xn:p,m=t.layout,v=t.outerElementType,g=t.outerTagName,y=t.style,b=t.useIsScrolling,w=t.width,k=this.state.isScrolling,x="horizontal"===i||"horizontal"===m,E=x?this._onScrollHorizontal:this._onScrollVertical,S=this._getRangeToRender(),C=S[0],P=S[1],O=[];if(d>0)for(var R=C;R<=P;R++)O.push((0,e.createElement)(n,{data:f,key:h(R,f),index:R,isScrolling:b?k:void 0,style:this._getItemStyle(R)}));var T=a(this.props,this._instanceProps);return(0,e.createElement)(v||g||"div",{className:r,onScroll:E,ref:this._outerRefSetter,style:(0,o.Z)({position:"relative",height:l,width:w,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:i},y)},(0,e.createElement)(u||c||"div",{children:O,ref:s,style:{height:x?"100%":T,pointerEvents:k?"none":void 0,width:x?T:"100%"}}))},r._callPropsCallbacks=function(){if("function"==typeof this.props.onItemsRendered&&this.props.itemCount>0){var e=this._getRangeToRender(),t=e[0],n=e[1],r=e[2],o=e[3];this._callOnItemsRendered(t,n,r,o)}if("function"==typeof this.props.onScroll){var i=this.state,a=i.scrollDirection,l=i.scrollOffset,s=i.scrollUpdateWasRequested;this._callOnScroll(a,l,s)}},r._getRangeToRender=function(){var e=this.props,t=e.itemCount,n=e.overscanCount,r=this.state,o=r.isScrolling,i=r.scrollDirection,a=r.scrollOffset;if(0===t)return[0,0,0,0];var l=u(this.props,a,this._instanceProps),s=c(this.props,l,a,this._instanceProps),d=o&&"backward"!==i?1:Math.max(1,n),f=o&&"forward"!==i?1:Math.max(1,n);return[Math.max(0,l-d),Math.max(0,Math.min(t-1,s+f)),l,s]},n}(e.PureComponent),n.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},r}var Sn=function(e,t){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,t.instance},Cn=En({getItemOffset:function(e,t){return t*e.itemSize},getItemSize:function(e,t){return e.itemSize},getEstimatedTotalSize:function(e){var t=e.itemCount;return e.itemSize*t},getOffsetForIndexAndAlignment:function(e,t,n,r){var o=e.direction,i=e.height,a=e.itemCount,l=e.itemSize,s=e.layout,u=e.width,c="horizontal"===o||"horizontal"===s?u:i,d=Math.max(0,a*l-c),f=Math.min(d,t*l),p=Math.max(0,t*l-c+l);switch("smart"===n&&(n=r>=p-c&&r<=f+c?"auto":"center"),n){case"start":return f;case"end":return p;case"center":var h=Math.round(p+(f-p)/2);return h<Math.ceil(c/2)?0:h>d+Math.floor(c/2)?d:h;case"auto":default:return r>=p&&r<=f?r:r<p?p:f}},getStartIndexForOffset:function(e,t){var n=e.itemCount,r=e.itemSize;return Math.max(0,Math.min(n-1,Math.floor(t/r)))},getStopIndexForStartIndex:function(e,t,n){var r=e.direction,o=e.height,i=e.itemCount,a=e.itemSize,l=e.layout,s=e.width,u=t*a,c="horizontal"===r||"horizontal"===l?s:o,d=Math.ceil((c+n-u)/a);return Math.max(0,Math.min(i-1,t+d-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});var Pn=n(5953),On="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,Rn=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(On&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var Tn=On&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),Rn))}};function Mn(e){return e&&"[object Function]"==={}.toString.call(e)}function Zn(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function Nn(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function _n(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=Zn(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:_n(Nn(e))}function Ln(e){return e&&e.referenceNode?e.referenceNode:e}var An=On&&!(!window.MSInputMethodContext||!document.documentMode),jn=On&&/MSIE 10/.test(navigator.userAgent);function In(e){return 11===e?An:10===e?jn:An||jn}function Dn(e){if(!e)return document.documentElement;for(var t=In(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===Zn(n,"position")?Dn(n):n:e?e.ownerDocument.documentElement:document.documentElement}function zn(e){return null!==e.parentNode?zn(e.parentNode):e}function Wn(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,l,s=i.commonAncestorContainer;if(e!==s&&t!==s||r.contains(o))return"BODY"===(l=(a=s).nodeName)||"HTML"!==l&&Dn(a.firstElementChild)!==a?Dn(s):s;var u=zn(e);return u.host?Wn(u.host,t):Wn(e,zn(t).host)}function Fn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var o=e.ownerDocument.documentElement,i=e.ownerDocument.scrollingElement||o;return i[n]}return e[n]}function Bn(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Fn(t,"top"),o=Fn(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}function $n(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function Hn(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],In(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function Un(e){var t=e.body,n=e.documentElement,r=In(10)&&getComputedStyle(n);return{height:Hn("Height",t,n,r),width:Hn("Width",t,n,r)}}var Vn=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},qn=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Kn=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},Yn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Qn(e){return Yn({},e,{right:e.left+e.width,bottom:e.top+e.height})}function Xn(e){var t={};try{if(In(10)){t=e.getBoundingClientRect();var n=Fn(e,"top"),r=Fn(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?Un(e.ownerDocument):{},a=i.width||e.clientWidth||o.width,l=i.height||e.clientHeight||o.height,s=e.offsetWidth-a,u=e.offsetHeight-l;if(s||u){var c=Zn(e);s-=$n(c,"x"),u-=$n(c,"y"),o.width-=s,o.height-=u}return Qn(o)}function Gn(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=In(10),o="HTML"===t.nodeName,i=Xn(e),a=Xn(t),l=_n(e),s=Zn(t),u=parseFloat(s.borderTopWidth),c=parseFloat(s.borderLeftWidth);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var d=Qn({top:i.top-a.top-u,left:i.left-a.left-c,width:i.width,height:i.height});if(d.marginTop=0,d.marginLeft=0,!r&&o){var f=parseFloat(s.marginTop),p=parseFloat(s.marginLeft);d.top-=u-f,d.bottom-=u-f,d.left-=c-p,d.right-=c-p,d.marginTop=f,d.marginLeft=p}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(d=Bn(d,t)),d}function Jn(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=Gn(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:Fn(n),l=t?0:Fn(n,"left"),s={top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:i};return Qn(s)}function er(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===Zn(e,"position"))return!0;var n=Nn(e);return!!n&&er(n)}function tr(e){if(!e||!e.parentElement||In())return document.documentElement;for(var t=e.parentElement;t&&"none"===Zn(t,"transform");)t=t.parentElement;return t||document.documentElement}function nr(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?tr(e):Wn(e,Ln(t));if("viewport"===r)i=Jn(a,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=_n(Nn(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var s=Gn(l,a,o);if("HTML"!==l.nodeName||er(a))i=s;else{var u=Un(e.ownerDocument),c=u.height,d=u.width;i.top+=s.top-s.marginTop,i.bottom=c+s.top,i.left+=s.left-s.marginLeft,i.right=d+s.left}}var f="number"==typeof(n=n||0);return i.left+=f?n:n.left||0,i.top+=f?n:n.top||0,i.right-=f?n:n.right||0,i.bottom-=f?n:n.bottom||0,i}function rr(e){return e.width*e.height}function or(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=nr(n,r,i,o),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},s=Object.keys(l).map((function(e){return Yn({key:e},l[e],{area:rr(l[e])})})).sort((function(e,t){return t.area-e.area})),u=s.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),c=u.length>0?u[0].key:s[0].key,d=e.split("-")[1];return c+(d?"-"+d:"")}function ir(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=r?tr(t):Wn(t,Ln(n));return Gn(n,o,r)}function ar(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function lr(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function sr(e,t,n){n=n.split("-")[0];var r=ar(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",l=i?"left":"top",s=i?"height":"width",u=i?"width":"height";return o[a]=t[a]+t[s]/2-r[s]/2,o[l]=n===l?t[l]-r[u]:t[lr(l)],o}function ur(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function cr(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=ur(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&Mn(n)&&(t.offsets.popper=Qn(t.offsets.popper),t.offsets.reference=Qn(t.offsets.reference),t=n(t,e))})),t}function dr(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=ir(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=or(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=sr(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=cr(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function fr(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function pr(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function hr(){return this.state.isDestroyed=!0,fr(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[pr("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function mr(e){var t=e.ownerDocument;return t?t.defaultView:window}function vr(e,t,n,r){var o="BODY"===e.nodeName,i=o?e.ownerDocument.defaultView:e;i.addEventListener(t,n,{passive:!0}),o||vr(_n(i.parentNode),t,n,r),r.push(i)}function gr(e,t,n,r){n.updateBound=r,mr(e).addEventListener("resize",n.updateBound,{passive:!0});var o=_n(e);return vr(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function yr(){this.state.eventsEnabled||(this.state=gr(this.reference,this.options,this.state,this.scheduleUpdate))}function br(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,mr(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function wr(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function kr(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&wr(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var xr=On&&/Firefox/i.test(navigator.userAgent);function Er(e,t,n){var r=ur(e,(function(e){return e.name===t})),o=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var Sr=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Cr=Sr.slice(3);function Pr(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Cr.indexOf(e),r=Cr.slice(n+1).concat(Cr.slice(0,n));return t?r.reverse():r}var Or="flip",Rr="clockwise",Tr="counterclockwise";function Mr(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),l=a.indexOf(ur(a,(function(e){return-1!==e.search(/,|\s/)})));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,u=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return(u=u.map((function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return e;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return Qn(l)[t]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(e,o,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){wr(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))}))})),o}var Zr={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",u=l?"width":"height",c={start:Kn({},s,i[s]),end:Kn({},s,i[s]+i[u]-a[u])};e.offsets.popper=Yn({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,i=o.popper,a=o.reference,l=r.split("-")[0],s=void 0;return s=wr(+n)?[+n,0]:Mr(n,i,a,l),"left"===l?(i.top+=s[0],i.left-=s[1]):"right"===l?(i.top+=s[0],i.left+=s[1]):"top"===l?(i.left+=s[0],i.top-=s[1]):"bottom"===l&&(i.left+=s[0],i.top+=s[1]),e.popper=i,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||Dn(e.instance.popper);e.instance.reference===n&&(n=Dn(n));var r=pr("transform"),o=e.instance.popper.style,i=o.top,a=o.left,l=o[r];o.top="",o.left="",o[r]="";var s=nr(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=l,t.boundaries=s;var u=t.priority,c=e.offsets.popper,d={primary:function(e){var n=c[e];return c[e]<s[e]&&!t.escapeWithReference&&(n=Math.max(c[e],s[e])),Kn({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>s[e]&&!t.escapeWithReference&&(r=Math.min(c[n],s[e]-("right"===e?c.width:c.height))),Kn({},n,r)}};return u.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=Yn({},c,d[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",s=a?"left":"top",u=a?"width":"height";return n[l]<i(r[s])&&(e.offsets.popper[s]=i(r[s])-n[u]),n[s]>i(r[l])&&(e.offsets.popper[s]=i(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Er(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,a=i.popper,l=i.reference,s=-1!==["left","right"].indexOf(o),u=s?"height":"width",c=s?"Top":"Left",d=c.toLowerCase(),f=s?"left":"top",p=s?"bottom":"right",h=ar(r)[u];l[p]-h<a[d]&&(e.offsets.popper[d]-=a[d]-(l[p]-h)),l[d]+h>a[p]&&(e.offsets.popper[d]+=l[d]+h-a[p]),e.offsets.popper=Qn(e.offsets.popper);var m=l[d]+l[u]/2-h/2,v=Zn(e.instance.popper),g=parseFloat(v["margin"+c]),y=parseFloat(v["border"+c+"Width"]),b=m-e.offsets.popper[d]-g-y;return b=Math.max(Math.min(a[u]-h,b),0),e.arrowElement=r,e.offsets.arrow=(Kn(n={},d,Math.round(b)),Kn(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(fr(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=nr(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=lr(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case Or:a=[r,o];break;case Rr:a=Pr(r);break;case Tr:a=Pr(r,!0);break;default:a=t.behavior}return a.forEach((function(l,s){if(r!==l||a.length===s+1)return e;r=e.placement.split("-")[0],o=lr(r);var u=e.offsets.popper,c=e.offsets.reference,d=Math.floor,f="left"===r&&d(u.right)>d(c.left)||"right"===r&&d(u.left)<d(c.right)||"top"===r&&d(u.bottom)>d(c.top)||"bottom"===r&&d(u.top)<d(c.bottom),p=d(u.left)<d(n.left),h=d(u.right)>d(n.right),m=d(u.top)<d(n.top),v=d(u.bottom)>d(n.bottom),g="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===i&&p||y&&"end"===i&&h||!y&&"start"===i&&m||!y&&"end"===i&&v),w=!!t.flipVariationsByContent&&(y&&"start"===i&&h||y&&"end"===i&&p||!y&&"start"===i&&v||!y&&"end"===i&&m),k=b||w;(f||g||k)&&(e.flipped=!0,(f||g)&&(r=a[s+1]),k&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=Yn({},e.offsets.popper,sr(e.instance.popper,e.offsets.reference,e.placement)),e=cr(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(l?o[a?"width":"height"]:0),e.placement=lr(t),e.offsets.popper=Qn(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Er(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=ur(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=ur(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:t.gpuAcceleration,l=Dn(e.instance.popper),s=Xn(l),u={position:o.position},c=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,i=Math.round,a=Math.floor,l=function(e){return e},s=i(o.width),u=i(r.width),c=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),f=t?c||d||s%2==u%2?i:a:l,p=t?i:l;return{left:f(s%2==1&&u%2==1&&!d&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:f(r.right)}}(e,window.devicePixelRatio<2||!xr),d="bottom"===n?"top":"bottom",f="right"===r?"left":"right",p=pr("transform"),h=void 0,m=void 0;if(m="bottom"===d?"HTML"===l.nodeName?-l.clientHeight+c.bottom:-s.height+c.bottom:c.top,h="right"===f?"HTML"===l.nodeName?-l.clientWidth+c.right:-s.width+c.right:c.left,a&&p)u[p]="translate3d("+h+"px, "+m+"px, 0)",u[d]=0,u[f]=0,u.willChange="transform";else{var v="bottom"===d?-1:1,g="right"===f?-1:1;u[d]=m*v,u[f]=h*g,u.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=Yn({},y,e.attributes),e.styles=Yn({},u,e.styles),e.arrowStyles=Yn({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return kr(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&kr(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=ir(o,t,e,n.positionFixed),a=or(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),kr(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Nr=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Vn(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=Tn(this.update.bind(this)),this.options=Yn({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(Yn({},e.Defaults.modifiers,o.modifiers)).forEach((function(t){r.options.modifiers[t]=Yn({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return Yn({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&Mn(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return qn(e,[{key:"update",value:function(){return dr.call(this)}},{key:"destroy",value:function(){return hr.call(this)}},{key:"enableEventListeners",value:function(){return yr.call(this)}},{key:"disableEventListeners",value:function(){return br.call(this)}}]),e}();Nr.Utils=("undefined"!=typeof window?window:global).PopperUtils,Nr.placements=Sr,Nr.Defaults=Zr;const _r=Nr;function Lr(e){return"function"==typeof e?e():e}var Ar="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,jr={};const Ir=e.forwardRef((function(t,n){var r=t.anchorEl,i=t.children,a=t.container,l=t.disablePortal,s=void 0!==l&&l,u=t.keepMounted,c=void 0!==u&&u,d=t.modifiers,f=t.open,p=t.placement,h=void 0===p?"bottom":p,m=t.popperOptions,g=void 0===m?jr:m,b=t.popperRef,w=t.style,k=t.transition,x=void 0!==k&&k,E=(0,v.Z)(t,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition"]),S=e.useRef(null),C=(0,y.Z)(S,n),P=e.useRef(null),O=(0,y.Z)(P,b),R=e.useRef(O);Ar((function(){R.current=O}),[O]),e.useImperativeHandle(b,(function(){return P.current}),[]);var T=e.useState(!0),M=T[0],Z=T[1],N=function(e,t){if("ltr"===(t&&t.direction||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(h,(0,ve.Z)()),_=e.useState(N),L=_[0],A=_[1];e.useEffect((function(){P.current&&P.current.update()}));var j=e.useCallback((function(){if(S.current&&r&&f){P.current&&(P.current.destroy(),R.current(null));var e=function(e){A(e.placement)},t=(Lr(r),new _r(Lr(r),S.current,(0,o.Z)({placement:N},g,{modifiers:(0,o.Z)({},s?{}:{preventOverflow:{boundariesElement:"window"}},d,g.modifiers),onCreate:(0,Ie.Z)(e,g.onCreate),onUpdate:(0,Ie.Z)(e,g.onUpdate)})));R.current(t)}}),[r,s,d,f,N,g]),I=e.useCallback((function(e){(0,ze.Z)(C,e),j()}),[C,j]),D=function(){P.current&&(P.current.destroy(),R.current(null))};if(e.useEffect((function(){return function(){D()}}),[]),e.useEffect((function(){f||x||D()}),[f,x]),!c&&!f&&(!x||M))return null;var z={placement:L};return x&&(z.TransitionProps={in:f,onEnter:function(){Z(!1)},onExited:function(){Z(!0),D()}}),e.createElement(Fe,{disablePortal:s,container:a},e.createElement("div",(0,o.Z)({ref:I,role:"tooltip"},E,{style:(0,o.Z)({position:"fixed",top:0,left:0,display:f||!c||x?null:"none"},w)}),"function"==typeof i?i(z):i))}));var Dr=n(5001);function zr(e){return Math.round(1e5*e)/1e5}var Wr=!1,Fr=null;var Br=e.forwardRef((function(n,i){var a=n.arrow,l=void 0!==a&&a,s=n.children,u=n.classes,c=n.disableFocusListener,d=void 0!==c&&c,f=n.disableHoverListener,p=void 0!==f&&f,h=n.disableTouchListener,m=void 0!==h&&h,g=n.enterDelay,b=void 0===g?100:g,k=n.enterNextDelay,x=void 0===k?0:k,E=n.enterTouchDelay,S=void 0===E?700:E,C=n.id,P=n.interactive,O=void 0!==P&&P,R=n.leaveDelay,T=void 0===R?0:R,M=n.leaveTouchDelay,Z=void 0===M?1500:M,N=n.onClose,_=n.onOpen,L=n.open,A=n.placement,j=void 0===A?"bottom":A,I=n.PopperComponent,z=void 0===I?Ir:I,W=n.PopperProps,F=n.title,B=n.TransitionComponent,$=void 0===B?vt:B,H=n.TransitionProps,U=(0,v.Z)(n,["arrow","children","classes","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","id","interactive","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","title","TransitionComponent","TransitionProps"]),V=ge(),q=e.useState(),K=q[0],Y=q[1],Q=e.useState(null),X=Q[0],G=Q[1],J=e.useRef(!1),ee=e.useRef(),te=e.useRef(),ne=e.useRef(),re=e.useRef(),oe=(0,jt.Z)({controlled:L,default:!1,name:"Tooltip",state:"open"}),ie=(0,_e.Z)(oe,2),ae=ie[0],le=ie[1],se=ae,ue=(0,Dr.Z)(C);e.useEffect((function(){return function(){clearTimeout(ee.current),clearTimeout(te.current),clearTimeout(ne.current),clearTimeout(re.current)}}),[]);var ce=function(e){clearTimeout(Fr),Wr=!0,le(!0),_&&_(e)},de=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=s.props;"mouseover"===t.type&&n.onMouseOver&&e&&n.onMouseOver(t),J.current&&"touchstart"!==t.type||(K&&K.removeAttribute("title"),clearTimeout(te.current),clearTimeout(ne.current),b||Wr&&x?(t.persist(),te.current=setTimeout((function(){ce(t)}),Wr?x:b)):ce(t))}},fe=(0,w.Z)(),pe=fe.isFocusVisible,he=fe.onBlurVisible,me=fe.ref,ve=e.useState(!1),ye=ve[0],be=ve[1],we=function(){ye&&(be(!1),he())},ke=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){K||Y(t.currentTarget),pe(t)&&(be(!0),de()(t));var n=s.props;n.onFocus&&e&&n.onFocus(t)}},xe=function(e){clearTimeout(Fr),Fr=setTimeout((function(){Wr=!1}),800+T),le(!1),N&&N(e),clearTimeout(ee.current),ee.current=setTimeout((function(){J.current=!1}),V.transitions.duration.shortest)},Ee=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(t){var n=s.props;"blur"===t.type&&(n.onBlur&&e&&n.onBlur(t),we()),"mouseleave"===t.type&&n.onMouseLeave&&t.currentTarget===K&&n.onMouseLeave(t),clearTimeout(te.current),clearTimeout(ne.current),t.persist(),ne.current=setTimeout((function(){xe(t)}),T)}},Se=function(e){J.current=!0;var t=s.props;t.onTouchStart&&t.onTouchStart(e)},Ce=(0,y.Z)(Y,i),Pe=(0,y.Z)(me,Ce),Oe=e.useCallback((function(e){(0,ze.Z)(Pe,t.findDOMNode(e))}),[Pe]),Re=(0,y.Z)(s.ref,Oe);""===F&&(se=!1);var Te=!se&&!p,Me=(0,o.Z)({"aria-describedby":se?ue:null,title:Te&&"string"==typeof F?F:null},U,s.props,{className:(0,r.Z)(U.className,s.props.className),onTouchStart:Se,ref:Re}),Ze={};m||(Me.onTouchStart=function(e){Se(e),clearTimeout(ne.current),clearTimeout(ee.current),clearTimeout(re.current),e.persist(),re.current=setTimeout((function(){de()(e)}),S)},Me.onTouchEnd=function(e){s.props.onTouchEnd&&s.props.onTouchEnd(e),clearTimeout(re.current),clearTimeout(ne.current),e.persist(),ne.current=setTimeout((function(){xe(e)}),Z)}),p||(Me.onMouseOver=de(),Me.onMouseLeave=Ee(),O&&(Ze.onMouseOver=de(!1),Ze.onMouseLeave=Ee(!1))),d||(Me.onFocus=ke(),Me.onBlur=Ee(),O&&(Ze.onFocus=ke(!1),Ze.onBlur=Ee(!1)));var Ne=e.useMemo((function(){return(0,Pn.Z)({popperOptions:{modifiers:{arrow:{enabled:Boolean(X),element:X}}}},W)}),[X,W]);return e.createElement(e.Fragment,null,e.cloneElement(s,Me),e.createElement(z,(0,o.Z)({className:(0,r.Z)(u.popper,O&&u.popperInteractive,l&&u.popperArrow),placement:j,anchorEl:K,open:!!K&&se,id:Me["aria-describedby"],transition:!0},Ze,Ne),(function(t){var n=t.placement,i=t.TransitionProps;return e.createElement($,(0,o.Z)({timeout:V.transitions.duration.shorter},i,H),e.createElement("div",{className:(0,r.Z)(u.tooltip,u["tooltipPlacement".concat((0,D.Z)(n.split("-")[0]))],J.current&&u.touch,l&&u.tooltipArrow)},F,l?e.createElement("span",{className:u.arrow,ref:G}):null))})))}));const $r=(0,f.Z)((function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none"},popperInteractive:{pointerEvents:"auto"},popperArrow:{'&[x-placement*="bottom"] $arrow':{top:0,left:0,marginTop:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"0 100%"}},'&[x-placement*="top"] $arrow':{bottom:0,left:0,marginBottom:"-0.71em",marginLeft:4,marginRight:4,"&::before":{transformOrigin:"100% 0"}},'&[x-placement*="right"] $arrow':{left:0,marginLeft:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"100% 100%"}},'&[x-placement*="left"] $arrow':{right:0,marginRight:"-0.71em",height:"1em",width:"0.71em",marginTop:4,marginBottom:4,"&::before":{transformOrigin:"0 0"}}},tooltip:{backgroundColor:(0,g.U1)(e.palette.grey[700],.9),borderRadius:e.shape.borderRadius,color:e.palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(10),lineHeight:"".concat(zr(1.4),"em"),maxWidth:300,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},tooltipArrow:{position:"relative",margin:"0"},arrow:{overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:(0,g.U1)(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}},touch:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:"".concat(zr(16/14),"em"),fontWeight:e.typography.fontWeightRegular},tooltipPlacementLeft:(0,F.Z)({transformOrigin:"right center",margin:"0 24px "},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:(0,F.Z)({transformOrigin:"left center",margin:"0 24px"},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:(0,F.Z)({transformOrigin:"center bottom",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:(0,F.Z)({transformOrigin:"center top",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"})}}),{name:"MuiTooltip",flip:!1})(Br);var Hr={entering:{transform:"none"},entered:{transform:"none"}},Ur={enter:cn.x9.enteringScreen,exit:cn.x9.leavingScreen};const Vr=e.forwardRef((function(t,n){var r=t.children,i=t.disableStrictModeCompat,a=void 0!==i&&i,l=t.in,s=t.onEnter,u=t.onEntered,c=t.onEntering,d=t.onExit,f=t.onExited,p=t.onExiting,h=t.style,m=t.timeout,g=void 0===m?Ur:m,b=t.TransitionComponent,w=void 0===b?ct:b,k=(0,v.Z)(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),x=ge(),E=x.unstable_strictMode&&!a,S=e.useRef(null),C=(0,y.Z)(r.ref,n),P=(0,y.Z)(E?S:void 0,C),O=function(e){return function(t,n){if(e){var r=E?[S.current,t]:[t,n],o=(0,_e.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},R=O(c),T=O((function(e,t){dt(e);var n=ft({style:h,timeout:g},{mode:"enter"});e.style.webkitTransition=x.transitions.create("transform",n),e.style.transition=x.transitions.create("transform",n),s&&s(e,t)})),M=O(u),Z=O(p),N=O((function(e){var t=ft({style:h,timeout:g},{mode:"exit"});e.style.webkitTransition=x.transitions.create("transform",t),e.style.transition=x.transitions.create("transform",t),d&&d(e)})),_=O(f);return e.createElement(w,(0,o.Z)({appear:!0,in:l,nodeRef:E?S:void 0,onEnter:T,onEntered:M,onEntering:R,onExit:N,onExited:_,onExiting:Z,timeout:g},k),(function(t,n){return e.cloneElement(r,(0,o.Z)({style:(0,o.Z)({transform:"scale(0)",visibility:"exited"!==t||l?void 0:"hidden"},Hr[t],h,r.props.style),ref:P},n))}))}));var qr=l((e=>({root:{width:"100%",height:400,backgroundColor:e.palette.background.paper}})));function Kr(t){var{index:n,style:r,data:o}=t;return e.createElement($r,{title:e.createElement(an,{component:"span",variant:"body2"},"".concat(o[n].notewav)),style:{maxWidth:500},arrow:!0,placement:"right",TransitionComponent:Vr},e.createElement(en,{button:!0,style:{height:30},key:n},e.createElement(an,{component:"span",variant:"caption",noWrap:!0,style:{width:239},color:"secondary"},"".concat(o[n].nama_audio," - ").concat(o[n].notewav))))}Kr.propTypes={index:d().number.isRequired,style:d().object.isRequired};const Yr=t=>{var{items:n}=t,r=qr();return e.createElement("div",{className:r.root},e.createElement(Cn,{height:400,width:230,itemSize:46,itemCount:n.length,itemData:n},Kr))};var Qr=l((e=>({root:{width:"100%",maxWidth:360,backgroundColor:e.palette.background.paper},nested:{paddingLeft:e.spacing(3)}})));const Xr=t=>{var{count:n,note:r}=t,o=Qr(),[i,a]=(0,e.useState)(!0);return e.createElement(e.Fragment,null,e.createElement(en,{button:!0,className:o.nested,onClick:()=>{a(!i)}},e.createElement(nn,null,e.createElement(hn,{badgeContent:n,color:"secondary"},e.createElement(un.Z,null))),e.createElement(sn,{primary:"Note"})),e.createElement(fn,{in:i,timeout:"auto",unmountOnExit:!0},e.createElement(Ct,{component:"div",disablePadding:!0},e.createElement(Yr,{items:r}))))};var Gr=e.forwardRef((function(t,n){var i=t.absolute,a=void 0!==i&&i,l=t.classes,s=t.className,u=t.component,c=void 0===u?"hr":u,d=t.flexItem,f=void 0!==d&&d,p=t.light,h=void 0!==p&&p,m=t.orientation,g=void 0===m?"horizontal":m,y=t.role,b=void 0===y?"hr"!==c?"separator":void 0:y,w=t.variant,k=void 0===w?"fullWidth":w,x=(0,v.Z)(t,["absolute","classes","className","component","flexItem","light","orientation","role","variant"]);return e.createElement(c,(0,o.Z)({className:(0,r.Z)(l.root,s,"fullWidth"!==k&&l[k],a&&l.absolute,f&&l.flexItem,h&&l.light,"vertical"===g&&l.vertical),role:b,ref:n},x))}));const Jr=(0,f.Z)((function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:(0,g.U1)(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)},vertical:{height:"100%",width:1},flexItem:{alignSelf:"stretch",height:"auto"}}}),{name:"MuiDivider"})(Gr);var eo={entering:{opacity:1},entered:{opacity:1}},to={enter:cn.x9.enteringScreen,exit:cn.x9.leavingScreen};const no=e.forwardRef((function(t,n){var r=t.children,i=t.disableStrictModeCompat,a=void 0!==i&&i,l=t.in,s=t.onEnter,u=t.onEntered,c=t.onEntering,d=t.onExit,f=t.onExited,p=t.onExiting,h=t.style,m=t.TransitionComponent,g=void 0===m?ct:m,b=t.timeout,w=void 0===b?to:b,k=(0,v.Z)(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","TransitionComponent","timeout"]),x=ge(),E=x.unstable_strictMode&&!a,S=e.useRef(null),C=(0,y.Z)(r.ref,n),P=(0,y.Z)(E?S:void 0,C),O=function(e){return function(t,n){if(e){var r=E?[S.current,t]:[t,n],o=(0,_e.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},R=O(c),T=O((function(e,t){dt(e);var n=ft({style:h,timeout:w},{mode:"enter"});e.style.webkitTransition=x.transitions.create("opacity",n),e.style.transition=x.transitions.create("opacity",n),s&&s(e,t)})),M=O(u),Z=O(p),N=O((function(e){var t=ft({style:h,timeout:w},{mode:"exit"});e.style.webkitTransition=x.transitions.create("opacity",t),e.style.transition=x.transitions.create("opacity",t),d&&d(e)})),_=O(f);return e.createElement(g,(0,o.Z)({appear:!0,in:l,nodeRef:E?S:void 0,onEnter:T,onEntered:M,onEntering:R,onExit:N,onExited:_,onExiting:Z,timeout:w},k),(function(t,n){return e.cloneElement(r,(0,o.Z)({style:(0,o.Z)({opacity:0,visibility:"exited"!==t||l?void 0:"hidden"},eo[t],h,r.props.style),ref:P},n))}))}));var ro=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.invisible,u=void 0!==s&&s,c=t.open,d=t.transitionDuration,f=t.TransitionComponent,p=void 0===f?no:f,h=(0,v.Z)(t,["children","classes","className","invisible","open","transitionDuration","TransitionComponent"]);return e.createElement(p,(0,o.Z)({in:c,timeout:d},h),e.createElement("div",{className:(0,r.Z)(a.root,l,u&&a.invisible),"aria-hidden":!0,ref:n},i))}));const oo=(0,f.Z)({root:{zIndex:-1,position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},{name:"MuiBackdrop"})(ro);function io(e,t){var n=function(e,t){var n,r=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var o=window.getComputedStyle(t);n=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform")}var i=0,a=0;if(n&&"none"!==n&&"string"==typeof n){var l=n.split("(")[1].split(")")[0].split(",");i=parseInt(l[4],10),a=parseInt(l[5],10)}return"left"===e?"translateX(".concat(window.innerWidth,"px) translateX(").concat(i-r.left,"px)"):"right"===e?"translateX(-".concat(r.left+r.width-i,"px)"):"up"===e?"translateY(".concat(window.innerHeight,"px) translateY(").concat(a-r.top,"px)"):"translateY(-".concat(r.top+r.height-a,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var ao={enter:cn.x9.enteringScreen,exit:cn.x9.leavingScreen};const lo=e.forwardRef((function(n,r){var i=n.children,a=n.direction,l=void 0===a?"down":a,s=n.in,u=n.onEnter,c=n.onEntered,d=n.onEntering,f=n.onExit,p=n.onExited,h=n.onExiting,m=n.style,g=n.timeout,b=void 0===g?ao:g,w=n.TransitionComponent,k=void 0===w?ct:w,x=(0,v.Z)(n,["children","direction","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),E=ge(),S=e.useRef(null),C=e.useCallback((function(e){S.current=t.findDOMNode(e)}),[]),P=(0,y.Z)(i.ref,C),O=(0,y.Z)(P,r),R=function(e){return function(t){e&&(void 0===t?e(S.current):e(S.current,t))}},T=R((function(e,t){io(l,e),dt(e),u&&u(e,t)})),M=R((function(e,t){var n=ft({timeout:b,style:m},{mode:"enter"});e.style.webkitTransition=E.transitions.create("-webkit-transform",(0,o.Z)({},n,{easing:E.transitions.easing.easeOut})),e.style.transition=E.transitions.create("transform",(0,o.Z)({},n,{easing:E.transitions.easing.easeOut})),e.style.webkitTransform="none",e.style.transform="none",d&&d(e,t)})),Z=R(c),N=R(h),_=R((function(e){var t=ft({timeout:b,style:m},{mode:"exit"});e.style.webkitTransition=E.transitions.create("-webkit-transform",(0,o.Z)({},t,{easing:E.transitions.easing.sharp})),e.style.transition=E.transitions.create("transform",(0,o.Z)({},t,{easing:E.transitions.easing.sharp})),io(l,e),f&&f(e)})),L=R((function(e){e.style.webkitTransition="",e.style.transition="",p&&p(e)})),A=e.useCallback((function(){S.current&&io(l,S.current)}),[l]);return e.useEffect((function(){if(!s&&"down"!==l&&"right"!==l){var e=(0,ne.Z)((function(){S.current&&io(l,S.current)}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[l,s]),e.useEffect((function(){s||A()}),[s,A]),e.createElement(k,(0,o.Z)({nodeRef:S,onEnter:T,onEntered:Z,onEntering:M,onExit:_,onExited:L,onExiting:N,appear:!0,in:s,timeout:b},x),(function(t,n){return e.cloneElement(i,(0,o.Z)({ref:O,style:(0,o.Z)({visibility:"exited"!==t||s?void 0:"hidden"},m,i.props.style)},n))}))}));var so={left:"right",right:"left",top:"down",bottom:"up"};var uo={enter:cn.x9.enteringScreen,exit:cn.x9.leavingScreen},co=e.forwardRef((function(t,n){var i=t.anchor,a=void 0===i?"left":i,l=t.BackdropProps,s=t.children,u=t.classes,c=t.className,d=t.elevation,f=void 0===d?16:d,p=t.ModalProps,h=(p=void 0===p?{}:p).BackdropProps,m=(0,v.Z)(p,["BackdropProps"]),g=t.onClose,y=t.open,b=void 0!==y&&y,w=t.PaperProps,k=void 0===w?{}:w,x=t.SlideProps,E=t.TransitionComponent,S=void 0===E?lo:E,C=t.transitionDuration,P=void 0===C?uo:C,O=t.variant,R=void 0===O?"temporary":O,T=(0,v.Z)(t,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"]),M=ge(),Z=e.useRef(!1);e.useEffect((function(){Z.current=!0}),[]);var N=function(e,t){return"rtl"===e.direction&&function(e){return-1!==["left","right"].indexOf(e)}(t)?so[t]:t}(M,a),_=e.createElement(Q,(0,o.Z)({elevation:"temporary"===R?f:0,square:!0},k,{className:(0,r.Z)(u.paper,u["paperAnchor".concat((0,D.Z)(N))],k.className,"temporary"!==R&&u["paperAnchorDocked".concat((0,D.Z)(N))])}),s);if("permanent"===R)return e.createElement("div",(0,o.Z)({className:(0,r.Z)(u.root,u.docked,c),ref:n},T),_);var L=e.createElement(S,(0,o.Z)({in:b,direction:so[N],timeout:P,appear:Z.current},x),_);return"persistent"===R?e.createElement("div",(0,o.Z)({className:(0,r.Z)(u.root,u.docked,c),ref:n},T),L):e.createElement(tt,(0,o.Z)({BackdropProps:(0,o.Z)({},l,h,{transitionDuration:P}),BackdropComponent:oo,className:(0,r.Z)(u.root,u.modal,c),open:b,onClose:g,ref:n},T,m),L)}));const fo=(0,f.Z)((function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}}),{name:"MuiDrawer",flip:!1})(co);var po=e.forwardRef((function(t,n){var i=t.autoFocus,a=t.checked,l=t.checkedIcon,s=t.classes,u=t.className,c=t.defaultChecked,d=t.disabled,f=t.icon,p=t.id,h=t.inputProps,m=t.inputRef,g=t.name,y=t.onBlur,b=t.onChange,w=t.onFocus,k=t.readOnly,x=t.required,E=t.tabIndex,S=t.type,C=t.value,P=(0,v.Z)(t,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),O=(0,jt.Z)({controlled:a,default:Boolean(c),name:"SwitchBase",state:"checked"}),R=(0,_e.Z)(O,2),T=R[0],M=R[1],Z=xe(),N=d;Z&&void 0===N&&(N=Z.disabled);var _="checkbox"===S||"radio"===S;return e.createElement(W,(0,o.Z)({component:"span",className:(0,r.Z)(s.root,u,T&&s.checked,N&&s.disabled),disabled:N,tabIndex:null,role:void 0,onFocus:function(e){w&&w(e),Z&&Z.onFocus&&Z.onFocus(e)},onBlur:function(e){y&&y(e),Z&&Z.onBlur&&Z.onBlur(e)},ref:n},P),e.createElement("input",(0,o.Z)({autoFocus:i,checked:a,defaultChecked:c,className:s.input,disabled:N,id:_&&p,name:g,onChange:function(e){var t=e.target.checked;M(t),b&&b(e,t)},readOnly:k,ref:m,required:x,tabIndex:E,type:S,value:C},h)),T?l:f)}));const ho=(0,f.Z)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(po);var mo=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.color,s=void 0===l?"secondary":l,u=t.edge,c=void 0!==u&&u,d=t.size,f=void 0===d?"medium":d,p=(0,v.Z)(t,["classes","className","color","edge","size"]),h=e.createElement("span",{className:i.thumb});return e.createElement("span",{className:(0,r.Z)(i.root,a,{start:i.edgeStart,end:i.edgeEnd}[c],"small"===f&&i["size".concat((0,D.Z)(f))])},e.createElement(ho,(0,o.Z)({type:"checkbox",icon:h,checkedIcon:h,classes:{root:(0,r.Z)(i.switchBase,i["color".concat((0,D.Z)(s))]),input:i.input,checked:i.checked,disabled:i.disabled},ref:n},p)),e.createElement("span",{className:i.track}))}));const vo=(0,f.Z)((function(e){return{root:{display:"inline-flex",width:58,height:38,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle","@media print":{colorAdjust:"exact"}},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:"light"===e.palette.type?e.palette.grey[50]:e.palette.grey[400],transition:e.transitions.create(["left","transform"],{duration:e.transitions.duration.shortest}),"&$checked":{transform:"translateX(20px)"},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:"light"===e.palette.type?.12:.1}},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.primary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[800]},"&$checked + $track":{backgroundColor:e.palette.secondary.main},"&$disabled + $track":{backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white}},sizeSmall:{width:40,height:24,padding:7,"& $thumb":{width:16,height:16},"& $switchBase":{padding:4,"&$checked":{transform:"translateX(16px)"}}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:e.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:7,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:"light"===e.palette.type?e.palette.common.black:e.palette.common.white,opacity:"light"===e.palette.type?.38:.3}}}),{name:"MuiSwitch"})(mo);var go=e.forwardRef((function(t,n){t.checked;var i=t.classes,a=t.className,l=t.control,s=t.disabled,u=(t.inputRef,t.label),c=t.labelPlacement,d=void 0===c?"end":c,f=(t.name,t.onChange,t.value,(0,v.Z)(t,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),p=xe(),h=s;void 0===h&&void 0!==l.props.disabled&&(h=l.props.disabled),void 0===h&&p&&(h=p.disabled);var m={disabled:h};return["checked","name","onChange","value","inputRef"].forEach((function(e){void 0===l.props[e]&&void 0!==t[e]&&(m[e]=t[e])})),e.createElement("label",(0,o.Z)({className:(0,r.Z)(i.root,a,"end"!==d&&i["labelPlacement".concat((0,D.Z)(d))],h&&i.disabled),ref:n},f),e.cloneElement(l,m),e.createElement(an,{component:"span",className:(0,r.Z)(i.label,h&&i.disabled)},u))}));const yo=(0,f.Z)((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(go);var bo=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.row,s=void 0!==l&&l,u=(0,v.Z)(t,["classes","className","row"]);return e.createElement("div",(0,o.Z)({className:(0,r.Z)(i.root,a,s&&i.row),ref:n},u))}));const wo=(0,f.Z)({root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},{name:"MuiFormGroup"})(bo);var ko=l((e=>({switch:{paddingLeft:e.spacing(3)}}))),xo=t=>{var{isLight:n,handleChangeToggle:r}=t,o=ko();return e.createElement(wo,{className:o.switch},e.createElement(yo,{control:e.createElement(vo,{checked:n,onChange:r,"aria-label":"theme switch"}),label:n?"Light Mode":"Dark Mode"}))};const Eo=e.memo(xo);var So=n(9875);function Co(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Po(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Co(i,r,o,a,l,"next",e)}function l(e){Co(i,r,o,a,l,"throw",e)}a(void 0)}))}}function Oo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ro(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Oo(Object(n),!0).forEach((function(t){To(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Oo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function To(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Mo=l((e=>({drawerPaper:{position:"relative",whiteSpace:"nowrap",width:240,transition:e.transitions.create("width",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.enteringScreen})},toolbarIcon:Ro({display:"flex",alignItems:"center",justifyContent:"flex-end",padding:"0 8px"},e.mixins.toolbar),switch:{paddingLeft:e.spacing(3)},drawerPaperClose:{overflowX:"hidden",transition:e.transitions.create("width",{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen}),width:e.spacing(7),[e.breakpoints.up("sm")]:{width:e.spacing(9)}}})));const Zo=t=>{var{open:n,handleDrawerClose:o,count:i,note:a,toggleTheme:l}=t,s="theme",[u,c]=(0,e.useState)(!0),d=Mo(),f=e.useCallback((e=>{c(e.target.checked),l()}),[l]);return(0,e.useEffect)(Po((function*(){(yield electron.storeApi.getStore(s))&&"light"===(yield electron.storeApi.getStore(s))?c(!0):c(!1)})),[]),e.createElement(fo,{variant:"permanent",classes:{paper:(0,r.Z)(d.drawerPaper,!n&&d.drawerPaperClose)},open:n},e.createElement("div",{className:d.toolbarIcon},e.createElement(W,{onClick:o},e.createElement(So.Z,null))),e.createElement(Jr,null),e.createElement(Ct,null,e.createElement(Xr,{count:i,note:a}),e.createElement(Eo,{isLight:u,handleChangeToggle:f})))};var No=t=>{var{width:n,height:r}=t;return e.createElement("div",{style:{width:n,height:r}})};const _o=e.memo(No);var Lo=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.component,u=void 0===s?"div":s,c=t.disablePointerEvents,d=void 0!==c&&c,f=t.disableTypography,p=void 0!==f&&f,h=t.position,m=t.variant,g=(0,v.Z)(t,["children","classes","className","component","disablePointerEvents","disableTypography","position","variant"]),y=ee()||{},b=m;return m&&y.variant,y&&!b&&(b=y.variant),e.createElement(te.Provider,{value:null},e.createElement(u,(0,o.Z)({className:(0,r.Z)(a.root,l,d&&a.disablePointerEvents,y.hiddenLabel&&a.hiddenLabel,"filled"===b&&a.filled,{start:a.positionStart,end:a.positionEnd}[h],"dense"===y.margin&&a.marginDense),ref:n},g),"string"!=typeof i||p?i:e.createElement(an,{color:"textSecondary"},i)))}));const Ao=(0,f.Z)({root:{display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap"},filled:{"&$positionStart:not($hiddenLabel)":{marginTop:16}},positionStart:{marginRight:8},positionEnd:{marginLeft:8},disablePointerEvents:{pointerEvents:"none"},hiddenLabel:{},marginDense:{}},{name:"MuiInputAdornment"})(Lo);var jo=l((e=>({margin:{margin:e.spacing(1)},textField:{width:"80%"},widthFull:{width:"100%"},whiteSpaceWrap:{whiteSpace:"normal"}}))),Io=t=>{var{path:n,fileName:o,count:i,nameWav:a,currentCount:l,handleChangePosition:s}=t,u=jo();return e.createElement(K,{container:!0,direction:"row",className:u.widthFull},e.createElement(K,{item:!0,xs:6,md:12,lg:12,className:u.widthFull},e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(an,{component:"h5",variant:"subtitle2"},"Path"),e.createElement(an,{component:"p",variant:"caption",noWrap:!0,className:u.whiteSpaceWrap},n||"-")),e.createElement(_o,{height:10}),e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(an,{component:"h5",variant:"subtitle2"},"File csv"),e.createElement(an,{component:"p",variant:"caption",noWrap:!0},o||"-")),e.createElement(_o,{height:10}),e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(an,{component:"h5",variant:"subtitle2"},"File wav"),e.createElement(an,{component:"p",variant:"caption",noWrap:!0,className:u.whiteSpaceWrap},a||"-"))),e.createElement(_o,{height:10}),e.createElement(K,{item:!0,xs:6,md:12,lg:12,style:{textAlign:"center"}},e.createElement(Te,{className:(0,r.Z)(u.margin,u.textField),variant:"outlined"},e.createElement(ke,{id:"outlined-adornment-weight",value:l,onChange:e=>s(e.target.value),onKeyDown:e=>s(e.target.value,e.key),endAdornment:e.createElement(Ao,{position:"end"},"/ ",i||9999),"aria-describedby":"outlined-weight-helper-text",inputProps:{"aria-label":"current"},type:"number",labelWidth:0}),e.createElement(Ze,{id:"outlined-weight-helper-text"},"Current"))))};const Do=e.memo(Io);var zo=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.color,s=void 0===l?"primary":l,u=t.position,c=void 0===u?"fixed":u,d=(0,v.Z)(t,["classes","className","color","position"]);return e.createElement(Q,(0,o.Z)({square:!0,component:"header",elevation:4,className:(0,r.Z)(i.root,i["position".concat((0,D.Z)(c))],i["color".concat((0,D.Z)(s))],a,"fixed"===c&&"mui-fixed"),ref:n},d))}));const Wo=(0,f.Z)((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(zo);var Fo=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.component,s=void 0===l?"div":l,u=t.disableGutters,c=void 0!==u&&u,d=t.variant,f=void 0===d?"regular":d,p=(0,v.Z)(t,["classes","className","component","disableGutters","variant"]);return e.createElement(s,(0,o.Z)({className:(0,r.Z)(i.root,i[f],a,!c&&i.gutters),ref:n},p))}));const Bo=(0,f.Z)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:(0,F.Z)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(Fo);var $o=n(8884),Ho=n(2576),Uo=l((e=>({root:{display:"flex"},toolbar:{paddingRight:24},appBar:{zIndex:e.zIndex.drawer+1,transition:e.transitions.create(["width","margin"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.leavingScreen})},appBarShift:{marginLeft:240,width:"calc(100% - ".concat(240,"px)"),transition:e.transitions.create(["width","margin"],{easing:e.transitions.easing.sharp,duration:e.transitions.duration.enteringScreen})},menuButton:{marginRight:36},menuButtonHidden:{display:"none"},title:{flexGrow:1},appBarSpacer:e.mixins.toolbar}))),Vo=t=>{var{open:n,handleDrawerOpen:o,handleSelectFile:i}=t,a=Uo();return e.createElement(Wo,{position:"absolute",className:(0,r.Z)(a.appBar,n&&a.appBarShift),color:"primary"},e.createElement(Bo,{className:a.toolbar},e.createElement(W,{edge:"start",color:"inherit","aria-label":"open drawer",onClick:o,className:(0,r.Z)(a.menuButton,n&&a.menuButtonHidden)},e.createElement($o.Z,null)),e.createElement(an,{component:"h1",variant:"h6",color:"inherit",noWrap:!0,className:a.title},"Validation"),e.createElement(W,{"aria-label":"open folder",color:"inherit",onClick:i},e.createElement(Ho.Z,{fontSize:"large"}))))};const qo=e.memo(Vo);var Ko=l((()=>({container:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"center",height:"max-content",width:"100%",background:"transparent"}})));const Yo=t=>{var n=Ko();return e.createElement("div",{className:n.container},t.children)};var Qo=l((()=>({container:{width:"100%",height:60}})));const Xo=e.forwardRef(((t,n)=>{var r=Qo();return e.createElement(e.Fragment,null,e.createElement("div",{ref:n,className:r.container}))}));var Go={enter:cn.x9.enteringScreen,exit:cn.x9.leavingScreen},Jo=e.forwardRef((function(t,n){var i=t.BackdropProps,a=t.children,l=t.classes,s=t.className,u=t.disableBackdropClick,c=void 0!==u&&u,d=t.disableEscapeKeyDown,f=void 0!==d&&d,p=t.fullScreen,h=void 0!==p&&p,m=t.fullWidth,g=void 0!==m&&m,y=t.maxWidth,b=void 0===y?"sm":y,w=t.onBackdropClick,k=t.onClose,x=t.onEnter,E=t.onEntered,S=t.onEntering,C=t.onEscapeKeyDown,P=t.onExit,O=t.onExited,R=t.onExiting,T=t.open,M=t.PaperComponent,Z=void 0===M?Q:M,N=t.PaperProps,_=void 0===N?{}:N,L=t.scroll,A=void 0===L?"paper":L,j=t.TransitionComponent,I=void 0===j?no:j,z=t.transitionDuration,W=void 0===z?Go:z,F=t.TransitionProps,B=t["aria-describedby"],$=t["aria-labelledby"],H=(0,v.Z)(t,["BackdropProps","children","classes","className","disableBackdropClick","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","onEnter","onEntered","onEntering","onEscapeKeyDown","onExit","onExited","onExiting","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps","aria-describedby","aria-labelledby"]),U=e.useRef();return e.createElement(tt,(0,o.Z)({className:(0,r.Z)(l.root,s),BackdropComponent:oo,BackdropProps:(0,o.Z)({transitionDuration:W},i),closeAfterTransition:!0,disableBackdropClick:c,disableEscapeKeyDown:f,onEscapeKeyDown:C,onClose:k,open:T,ref:n},H),e.createElement(I,(0,o.Z)({appear:!0,in:T,timeout:W,onEnter:x,onEntering:S,onEntered:E,onExit:P,onExiting:R,onExited:O,role:"none presentation"},F),e.createElement("div",{className:(0,r.Z)(l.container,l["scroll".concat((0,D.Z)(A))]),onMouseUp:function(e){e.target===e.currentTarget&&e.target===U.current&&(U.current=null,w&&w(e),!c&&k&&k(e,"backdropClick"))},onMouseDown:function(e){U.current=e.target}},e.createElement(Z,(0,o.Z)({elevation:24,role:"dialog","aria-describedby":B,"aria-labelledby":$},_,{className:(0,r.Z)(l.paper,l["paperScroll".concat((0,D.Z)(A))],l["paperWidth".concat((0,D.Z)(String(b)))],_.className,h&&l.paperFullScreen,g&&l.paperFullWidth)}),a))))}));const ei=(0,f.Z)((function(e){return{root:{"@media print":{position:"absolute !important"}},scrollPaper:{display:"flex",justifyContent:"center",alignItems:"center"},scrollBody:{overflowY:"auto",overflowX:"hidden",textAlign:"center","&:after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}},container:{height:"100%","@media print":{height:"auto"},outline:0},paper:{margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},paperScrollPaper:{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"},paperScrollBody:{display:"inline-block",verticalAlign:"middle",textAlign:"left"},paperWidthFalse:{maxWidth:"calc(100% - 64px)"},paperWidthXs:{maxWidth:Math.max(e.breakpoints.values.xs,444),"&$paperScrollBody":(0,F.Z)({},e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+64),{maxWidth:"calc(100% - 64px)"})},paperWidthSm:{maxWidth:e.breakpoints.values.sm,"&$paperScrollBody":(0,F.Z)({},e.breakpoints.down(e.breakpoints.values.sm+64),{maxWidth:"calc(100% - 64px)"})},paperWidthMd:{maxWidth:e.breakpoints.values.md,"&$paperScrollBody":(0,F.Z)({},e.breakpoints.down(e.breakpoints.values.md+64),{maxWidth:"calc(100% - 64px)"})},paperWidthLg:{maxWidth:e.breakpoints.values.lg,"&$paperScrollBody":(0,F.Z)({},e.breakpoints.down(e.breakpoints.values.lg+64),{maxWidth:"calc(100% - 64px)"})},paperWidthXl:{maxWidth:e.breakpoints.values.xl,"&$paperScrollBody":(0,F.Z)({},e.breakpoints.down(e.breakpoints.values.xl+64),{maxWidth:"calc(100% - 64px)"})},paperFullWidth:{width:"calc(100% - 64px)"},paperFullScreen:{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,"&$paperScrollBody":{margin:0,maxWidth:"100%"}}}}),{name:"MuiDialog"})(Jo);var ti=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.disableTypography,u=void 0!==s&&s,c=(0,v.Z)(t,["children","classes","className","disableTypography"]);return e.createElement("div",(0,o.Z)({className:(0,r.Z)(a.root,l),ref:n},c),u?i:e.createElement(an,{component:"h2",variant:"h6"},i))}));const ni=(0,f.Z)({root:{margin:0,padding:"16px 24px",flex:"0 0 auto"}},{name:"MuiDialogTitle"})(ti);const ri=t=>{var{open:n,title:r,children:o=""}=t;return e.createElement(ei,{open:n,"aria-labelledby":"form-dialog-title"},e.createElement(ni,{id:"form-dialog-title"},r),o)};var oi=e.forwardRef((function(t,n){var i=t.disableSpacing,a=void 0!==i&&i,l=t.classes,s=t.className,u=(0,v.Z)(t,["disableSpacing","classes","className"]);return e.createElement("div",(0,o.Z)({className:(0,r.Z)(l.root,s,!a&&l.spacing),ref:n},u))}));const ii=(0,f.Z)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",flex:"0 0 auto"},spacing:{"& > :not(:first-child)":{marginLeft:8}}},{name:"MuiDialogActions"})(oi);var ai=e.forwardRef((function(t,n){var i=t.classes,a=t.className,l=t.dividers,s=void 0!==l&&l,u=(0,v.Z)(t,["classes","className","dividers"]);return e.createElement("div",(0,o.Z)({className:(0,r.Z)(i.root,a,s&&i.dividers),ref:n},u))}));const li=(0,f.Z)((function(e){return{root:{flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"8px 24px","&:first-child":{paddingTop:20}},dividers:{padding:"16px 24px",borderTop:"1px solid ".concat(e.palette.divider),borderBottom:"1px solid ".concat(e.palette.divider)}}}),{name:"MuiDialogContent"})(ai);var si=e.forwardRef((function(t,n){return e.createElement(an,(0,o.Z)({component:"p",variant:"body1",color:"textSecondary",ref:n},t))}));const ui=(0,f.Z)({root:{marginBottom:12}},{name:"MuiDialogContentText"})(si);var ci=e.forwardRef((function(t,n){var i=t.children,a=t.classes,l=t.className,s=t.color,u=void 0===s?"default":s,c=t.component,d=void 0===c?"button":c,f=t.disabled,p=void 0!==f&&f,h=t.disableElevation,m=void 0!==h&&h,g=t.disableFocusRipple,y=void 0!==g&&g,b=t.endIcon,w=t.focusVisibleClassName,k=t.fullWidth,x=void 0!==k&&k,E=t.size,S=void 0===E?"medium":E,C=t.startIcon,P=t.type,O=void 0===P?"button":P,R=t.variant,T=void 0===R?"text":R,M=(0,v.Z)(t,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),Z=C&&e.createElement("span",{className:(0,r.Z)(a.startIcon,a["iconSize".concat((0,D.Z)(S))])},C),N=b&&e.createElement("span",{className:(0,r.Z)(a.endIcon,a["iconSize".concat((0,D.Z)(S))])},b);return e.createElement(I,(0,o.Z)({className:(0,r.Z)(a.root,a[T],l,"inherit"===u?a.colorInherit:"default"!==u&&a["".concat(T).concat((0,D.Z)(u))],"medium"!==S&&[a["".concat(T,"Size").concat((0,D.Z)(S))],a["size".concat((0,D.Z)(S))]],m&&a.disableElevation,p&&a.disabled,x&&a.fullWidth),component:d,disabled:p,focusRipple:!y,focusVisibleClassName:(0,r.Z)(a.focusVisible,w),ref:n,type:O},M),e.createElement("span",{className:a.label},Z,i,N))}));const di=(0,f.Z)((function(e){return{root:(0,o.Z)({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,g.U1)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,g.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat((0,g.U1)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:(0,g.U1)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat((0,g.U1)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:(0,g.U1)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(ci);var fi=t=>{var{title:n="Title",nameWav:r="Name Wav",open:o,handleCloseDialog:i,value:a="",handleOnChange:l,handleOnSave:s}=t;return e.createElement(ri,{open:o,onClose:i,"aria-labelledby":"form-dialog-title",maxWidth:"sm"},e.createElement(ni,{id:"form-dialog-title"},n),e.createElement(li,{style:{width:500}},e.createElement(ui,null,r),e.createElement(Xt,{autoFocus:!0,multiline:!0,value:a,onChange:e=>l(e.target.value),rows:5,margin:"dense",id:"note",type:"text",fullWidth:!0})),e.createElement(ii,null,e.createElement(di,{onClick:i,color:"primary"},"Cancel"),e.createElement(di,{onClick:s,color:"primary"},"Save")))};const pi=e.memo(fi);var hi=t=>{var{open:n=!1,title:r="",text:o="",handleOnClose:i,handleOnOk:a}=t;return e.createElement(ri,{open:n,title:r},e.createElement(li,null,e.createElement(ui,{id:"alert-dialog-description"},o)),e.createElement(ii,null,e.createElement(di,{onClick:i,color:"primary"},"Cancel"),e.createElement(di,{onClick:a,color:"primary",autoFocus:!0},"Ok")))};const mi=e.memo(hi);var vi={width:100},gi=t=>{var{variant:n,handleClick:r,text:o="",color:i="default"}=t;return e.createElement(di,{color:i,style:vi,variant:n,onClick:r},o)};const yi=e.memo(gi);var bi=n(6652),wi=n(8121),ki=n(8042),xi=n(3770);function Ei(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Si(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ei(i,r,o,a,l,"next",e)}function l(e){Ei(i,r,o,a,l,"throw",e)}a(void 0)}))}}var Ci=l((e=>({root:{display:"flex"},appBarSpacer:e.mixins.toolbar,content:{flexGrow:1,height:"100vh",overflow:"auto"},container:{paddingTop:e.spacing(2),paddingBottom:e.spacing(4)},paper:{padding:e.spacing(2),display:"flex",overflow:"auto",flexDirection:"column"},fixedHeight:{height:200},fixedWidthButton:{width:100},paperModal:{position:"absolute",width:400,backgroundColor:e.palette.background.paper,border:"2px solid #000",boxShadow:e.shadows[5],padding:e.spacing(2,4,3)},paddingY:{paddingTop:20,paddingBottom:22},paddingTop:{paddingTop:20},margin:{margin:e.spacing(1)},withoutLabel:{marginTop:e.spacing(3)}})));function Pi(t){var{onToggleTheme:n}=t,o=Ci(),[i,a]=(0,e.useState)(!0),[l,s]=(0,e.useState)(!1),[c,d]=(0,e.useState)(!1),[f,p]=(0,e.useState)(!1),[h,v]=(0,e.useState)(""),[g,y]=(0,e.useState)(""),[b,w]=(0,e.useState)([]),[k,x]=(0,e.useState)(0),[E,S]=(0,e.useState)(""),[C,P]=(0,e.useState)(!1),[O,R]=(0,e.useState)([]),[T,M]=(0,e.useState)(""),Z=(0,e.useRef)(),N=(0,e.useRef)(),_=(0,e.useCallback)((()=>{b.length>1&&b[k].hasOwnProperty("notewav")&&M(b[k].notewav),s(!0)}),[b,k]),L=(0,e.useCallback)((()=>{s(!1)}),[]),A=(0,e.useCallback)((e=>{M(e)}),[]),j=(0,e.useCallback)((()=>{b[k].notewav=T,w([...b]),s(!1),M("")}),[b,k,T]),I=(0,e.useCallback)((()=>{d(!0)}),[]),D=(0,e.useCallback)((()=>{d(!1)}),[]),z=(0,e.useCallback)((()=>{p(!0)}),[]),F=(0,e.useCallback)((()=>{p(!1)}),[]),B=(0,e.useCallback)((()=>{a(!0)}),[]),H=(0,e.useCallback)(Si((function*(){var e=yield electron.filesApi.selectFile(),t=yield e.path,n=yield e.data,r=yield t.replace(/^.*[\\\/]/,"");y(r),v(t),w(n),R([]),x(0),P(!1),M("")})),[]);(0,e.useEffect)((()=>{var e=b.filter((e=>""!==e.notewav&&e.hasOwnProperty("notewav")));if(R(e),"0"===E)return S("0");if(S((k+1).toString()),b.length>0){var t=h.substring(0,h.lastIndexOf("/")),n=g.substring(0,g.lastIndexOf(".")),r="".concat(t,"/").concat(n,"/").concat(b[k].nama_audio,".wav");console.log(r),void 0!==Z.current&&console.log(Z.current.mediaContainer.innerHTML=""),Z.current=u().create({waveColor:"#D9DCFF",progressColor:"#f48fb1",cursorColor:"#8c4f64",cursorWidth:1,container:N.current,backend:"WebAudio",barWidth:3,barRadius:3,barGap:3,height:160,responsive:!0}),Z.current.load(r)}}),[k,b]);var U=(0,e.useCallback)((function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if("Enter"===n){if(parseInt(e)>b.length)return x(0),S("0");if(parseInt(e)<0)return x(0),S("0");""!==e&&(t=parseInt(e),x(t-1)),"0"===e&&x(0),void 0!==Z.current&&Z.current.pause()}S(e)}),[b]),V=function(){var e=Si((function*(e){var t=function(){var e=arguments.length>1?arguments[1]:void 0;return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).findIndex((t=>t.nama_audio===e.nama_audio))}(b,e);-1!==t&&(b[t]=e),electron.filesApi.modifyFileCsv(b,h),d(!1)}));return function(t){return e.apply(this,arguments)}}(),q=(0,r.Z)(o.paper,o.fixedHeight);return e.createElement("div",{className:o.root},e.createElement(m,null),e.createElement(qo,{open:i,handleDrawerOpen:B,handleSelectFile:H}),e.createElement(Zo,{open:i,handleDrawerClose:()=>{a(!1)},count:O.length>0?O.length:0,note:O.length>0?O:[],toggleTheme:n}),e.createElement("main",{className:o.content},e.createElement("div",{className:o.appBarSpacer}),e.createElement($,{maxWidth:"lg",className:o.container},e.createElement(K,{container:!0,direction:"row-reverse",spacing:4},e.createElement(K,{item:!0,xs:12,md:4,lg:4},e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(Q,{style:{height:"max-content",padding:20}},e.createElement(Do,{path:h,fileName:g,count:b&&b.length,currentCount:E,nameWav:b.length>1&&b[k].nama_audio,handleChangePosition:U})))),e.createElement(K,{item:!0,xs:12,md:8,lg:8},e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(Q,{className:q},e.createElement(Yo,null,e.createElement(Xo,{id:"waveform",ref:N})))),e.createElement(K,{container:!0,justify:"center",className:o.paddingY},e.createElement(K,{item:!0,xs:3,md:3,lg:2,style:{textAlign:"center"}},e.createElement(W,{"aria-label":"open folder",color:"inherit",onClick:k>0?()=>(void 0!==Z.current&&Z.current.pause(),x(k-1)):()=>x(0)},e.createElement(ki.Z,{fontSize:"large"}))),e.createElement(K,{item:!0,xs:3,md:3,lg:2,style:{textAlign:"center"}},e.createElement(W,{"aria-label":"open folder",color:"inherit",onClick:()=>{void 0!==Z.current&&(P(!C),Z.current.playPause())}},e.createElement(bi.Z,{fontSize:"large"}),"/",e.createElement(xi.Z,{fontSize:"large"}))),e.createElement(K,{item:!0,xs:3,md:3,lg:2,style:{textAlign:"center"}},e.createElement(W,{"aria-label":"open folder",color:"inherit",onClick:()=>"0"===E?(x(0),S("1")):E===b.length.toString()?(x(b.length-1),S(b.length.toString())):(void 0!==Z.current&&Z.current.pause(),void x(k+1))},e.createElement(wi.Z,{fontSize:"large"})))),e.createElement(K,{item:!0,xs:12,md:12,lg:12},e.createElement(Q,{className:q},e.createElement(Xt,{id:"filled-multiline-static",label:"Transkrip",multiline:!0,rows:6,placeholder:"Some text",color:"primary",variant:"filled",InputProps:{readOnly:!0},value:b.length>1?b[k].teks_transcript:""}))),e.createElement(K,{container:!0,justify:"center"},e.createElement(K,{item:!0,xs:6,sm:3,md:3,lg:3,className:o.paddingTop},e.createElement(yi,{variant:"contained",handleClick:_,text:"Note"})),e.createElement(K,{item:!0,xs:6,sm:3,md:3,lg:3,className:o.paddingTop},e.createElement(yi,{variant:"contained",handleClick:I,text:"Apply"})),e.createElement(K,{item:!0,xs:6,sm:3,md:3,lg:3,className:o.paddingTop},e.createElement(yi,{variant:"contained",color:"primary",handleClick:z,text:"Save"}))))))),e.createElement(pi,{title:"Note",nameWav:b.length>1?b[k].nama_audio:"",open:l,handleCloseDialog:L,value:T,handleOnChange:A,handleOnSave:b.length>1?j:L}),e.createElement(mi,{title:"Confirmation",open:c,handleOnClose:D,handleOnOk:b.length>1?()=>V(b[k]):D,text:"Apakah anda ingin menyimpan form validasi agar dapat dilanjutkan lain waktu ?"}),e.createElement(mi,{title:"Confirmation",open:f,handleOnClose:F,handleOnOk:()=>{electron.filesApi.exportToCsv(b,h),p(!1)},text:"Apakah proses validasi sudah selesai ?"}))}var Oi=n(9277),Ri=n(3800),Ti=n(7076);const Mi=function(t){var n=t.children,r=t.theme,i=(0,ve.Z)(),a=e.useMemo((function(){var e=null===i?r:function(e,t){return"function"==typeof t?t(e):(0,o.Z)({},e,t)}(i,r);return null!=e&&(e[Ti.Z]=null!==i),e}),[r,i]);return e.createElement(Ri.Z.Provider,{value:a},n)};function Zi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ni(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zi(Object(n),!0).forEach((function(t){_i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Li(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Ai(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Li(i,r,o,a,l,"next",e)}function l(e){Li(i,r,o,a,l,"throw",e)}a(void 0)}))}}const ji=()=>{var t="theme",[n,r]=(0,e.useState)({palette:{type:"light",primary:{light:"#c3fdff",main:"#90caf9",dark:"#5d99c6",contrastText:"#141D23"},secondary:{light:"#ffc1e3",main:"#f48fb1",dark:"#bf5f82",contrastText:"#141D23"}}});(0,e.useEffect)(Ai((function*(){r(Ni(Ni({},n),{},{palette:Ni(Ni({},n.palette),{},{type:(yield electron.storeApi.getStore(t))?yield electron.storeApi.getStore(t):"light"})}))})),[]);var o=e.useCallback((()=>{var e="light"===n.palette.type?"dark":"light";electron.storeApi.setStore(t,e),r(Ni(Ni({},n),{},{palette:Ni(Ni({},n.palette),{},{type:e})}))}),[n]),i=(0,Oi.Z)(n);return e.createElement(Mi,{theme:i},e.createElement(Pi,{onToggleTheme:o}))};var Ii=n(3379),Di=n.n(Ii),zi=n(2148),Wi={insert:"head",singleton:!1};Di()(zi.Z,Wi);zi.Z.locals;t.render(e.createElement(ji,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdW5zdXBwb3J0ZWRQcm9wLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3Vuc3RhYmxlX3VzZUlkLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VDb250cm9sbGVkLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQXNzaWdubWVudC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQ2hldnJvbkxlZnQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0ZvbGRlck9wZW4uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01lbnUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL05hdmlnYXRlQmVmb3JlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9OYXZpZ2F0ZU5leHQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1BhdXNlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9QbGF5QXJyb3cuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vVGhlbWVQcm92aWRlci9uZXN0ZWQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0VGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWdsb2JhbC9kaXN0L2pzcy1wbHVnaW4tZ2xvYmFsLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWNhbWVsLWNhc2UvZGlzdC9qc3MtcGx1Z2luLWNhbWVsLWNhc2UuZXNtLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9pbmRleENvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tZXJnZUNsYXNzZXMvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL1RoZW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovL2l5YW5pLy4vc3JjL2pzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy93YXZlc3VyZmVyLmpzL2Rpc3Qvd2F2ZXN1cmZlci5qcyIsIndlYnBhY2s6Ly9peWFuaS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9peWFuaS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9peWFuaS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaXlhbmkvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9peWFuaS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ3NzQmFzZWxpbmUvQ3NzQmFzZWxpbmUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NvbnRhaW5lci9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyaWQvR3JpZC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0L0lucHV0LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtTGFiZWwvRm9ybUxhYmVsLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtSGVscGVyVGV4dC9Gb3JtSGVscGVyVGV4dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9VbnN0YWJsZV9UcmFwRm9jdXMvVW5zdGFibGVfVHJhcEZvY3VzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9TaW1wbGVCYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Hcm93L0dyb3cuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9NZW51TGlzdC9NZW51TGlzdC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTWVudS9NZW51LmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TZWxlY3QvU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RleHRGaWVsZC9UZXh0RmllbGQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtL0xpc3RJdGVtLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9MaXN0SXRlbUljb24vTGlzdEl0ZW1JY29uLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NvbGxhcHNlL0NvbGxhcHNlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CYWRnZS9CYWRnZS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9yZWFjdC13aW5kb3cvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9wcGVyL1BvcHBlci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVG9vbHRpcC9Ub29sdGlwLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9ab29tL1pvb20uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9MaXN0Rml4ZWQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9MaXN0SXRlbXMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRmFkZS9GYWRlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CYWNrZHJvcC9CYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2xpZGUvU2xpZGUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL1N3aXRjaEJhc2UuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N3aXRjaC9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sTGFiZWwvRm9ybUNvbnRyb2xMYWJlbC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUdyb3VwL0Zvcm1Hcm91cC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL1N3aXRjaFRoZW1lLmpzIiwid2VicGFjazovL2l5YW5pLy4vc3JjL2pzL2NvbXBvbmVudHMvU2lkZUJhci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL0dhcC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRBZG9ybm1lbnQvSW5wdXRBZG9ybm1lbnQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9EZXRhaWxGaWxlLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9BcHBCYXIvQXBwQmFyLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9XYXZlZm9ybUNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL1dhdmUuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZy9EaWFsb2cuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ1RpdGxlL0RpYWxvZ1RpdGxlLmpzIiwid2VicGFjazovL2l5YW5pLy4vc3JjL2pzL2NvbXBvbmVudHMvRGlhbG9nLmpzIiwid2VicGFjazovL2l5YW5pLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EaWFsb2dBY3Rpb25zL0RpYWxvZ0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0NvbnRlbnQvRGlhbG9nQ29udGVudC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRGlhbG9nQ29udGVudFRleHQvRGlhbG9nQ29udGVudFRleHQuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvY29tcG9uZW50cy9EaWFsb2dJbnB1dC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL0RpYWxvZ0NvbmZpci5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9jb21wb25lbnRzL0Rhc2hib2FyZC5qcyIsIndlYnBhY2s6Ly9peWFuaS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL1RoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vaXlhbmkvLi9zcmMvanMvQXBwLmpzIiwid2VicGFjazovL2l5YW5pLy4vc3JjL2pzL2luZGV4LnNjc3M/NDUzNCIsIndlYnBhY2s6Ly9peWFuaS8uL3NyYy9qcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImxlbmd0aCIsImkiLCJhcnIyIiwiQXJyYXkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwidmFsdWUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImFyZ3VtZW50cyIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VLZXlzIiwia2V5cyIsIl9zbGljZWRUb0FycmF5IiwiaXNBcnJheSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9zIiwiX2kiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJlcnIiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiZnJvbSIsIl90eXBlb2YiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJuIiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJ0ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZXNjIiwic2V0IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvciIsInR5cGUiLCJjaGFyQXQiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbmNhdCIsImNvbG9ycyIsIm1hdGNoIiwibWFwIiwiaW5kZXgiLCJwYXJzZUludCIsInJvdW5kIiwiam9pbiIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwiRXJyb3IiLCJ2YWx1ZXMiLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldENvbnRyYXN0UmF0aW8iLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImx1bUEiLCJnZXRMdW1pbmFuY2UiLCJsdW1CIiwicmdiIiwiaCIsInMiLCJsIiwiYSIsImYiLCJrIiwiaHNsVG9SZ2IiLCJ2YWwiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZmFkZSIsImRhcmtlbiIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwic3RlcCIsIm90aGVyIiwidXAiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwib25seSIsIndpZHRoIiwiY3JlYXRlTWl4aW5zIiwic3BhY2luZyIsIm1peGlucyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidG9vbGJhciIsIm1pbkhlaWdodCIsImJsYWNrIiwid2hpdGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJsaWdodCIsInRleHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJoaW50IiwiZGl2aWRlciIsInBhcGVyIiwiZGVmYXVsdCIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50IiwiZGlyZWN0aW9uIiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJtYWluIiwiY3JlYXRlUGFsZXR0ZSIsInBhbGV0dGUiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJlcnJvciIsIl9wYWxldHRlJHdhcm5pbmciLCJ3YXJuaW5nIiwiX3BhbGV0dGUkaW5mbyIsImluZm8iLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250cmFzdFRleHQiLCJ0eXBlcyIsImRlZXBtZXJnZSIsImNvbW1vbiIsImdyZXkiLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5IiwiX3JlZiIsIl9yZWYkZm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkZm9udFdlaWdodEJvbGQiLCJmb250V2VpZ2h0Qm9sZCIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsInB4VG9SZW0iLCJjb2VmIiwic2l6ZSIsImJ1aWxkVmFyaWFudCIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImJ1dHRvbiIsImNhcHRpb24iLCJvdmVybGluZSIsImNsb25lIiwiY3JlYXRlU2hhZG93IiwiYm9yZGVyUmFkaXVzIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwiYWNjIiwiaXRlbSIsImZuIiwicHJvcGVydGllcyIsIm0iLCJkaXJlY3Rpb25zIiwidCIsInIiLCJiIiwieCIsInkiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsInByb3AiLCJfcHJvcCRzcGxpdCIsIl9wcm9wJHNwbGl0MiIsInByb3BlcnR5IiwiZGlyIiwiYXJnIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0aGVtZSIsInRoZW1lU3BhY2luZyIsImFicyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJ0cmFuc2Zvcm1lciIsInByb3BWYWx1ZSIsInJlZHVjZSIsImNzc1Byb3BlcnR5IiwidHJhbnNmb3JtZWQiLCJnZXRWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BUeXBlcyIsImZpbHRlclByb3BzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsInRyYW5zZm9ybSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFyZ3VtZW50Iiwib3V0cHV0Iiwib3B0aW9ucyIsIl9vcHRpb25zJGJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsIl9vcHRpb25zJG1peGlucyIsIm1peGluc0lucHV0IiwiX29wdGlvbnMkcGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsIl9vcHRpb25zJHR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJtdWlUaGVtZSIsIm92ZXJyaWRlcyIsInNoYWRvd3MiLCJzaGFwZSIsInRyYW5zaXRpb25zIiwiekluZGV4IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJoZWlnaHQiLCJjb25zdGFudCIsInN0eWxlc09yQ3JlYXRvciIsIkNvbXBvbmVudCIsImRlZmF1bHRUaGVtZSIsIl9vcHRpb25zJHdpdGhUaGVtZSIsIndpdGhUaGVtZSIsInN0eWxlc09wdGlvbnMiLCJjbGFzc05hbWVQcmVmaXgiLCJ1c2VTdHlsZXMiLCJtYWtlU3R5bGVzIiwiZGlzcGxheU5hbWUiLCJXaXRoU3R5bGVzIiwicmVmIiwiY2xhc3NlcyIsImlubmVyUmVmIiwiZGVmYXVsdFByb3BzIiwibW9yZSIsInVzZVRoZW1lIiwiZ2V0VGhlbWVQcm9wcyIsIm1vYmlsZVN0ZXBwZXIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwiZnVuYyIsIl9sZW4yIiwiX2tleTIiLCJTdmdJY29uIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJfcHJvcHMkY29sb3IiLCJfcHJvcHMkY29tcG9uZW50IiwiY29tcG9uZW50IiwiX3Byb3BzJGZvbnRTaXplIiwiaHRtbENvbG9yIiwidGl0bGVBY2Nlc3MiLCJfcHJvcHMkdmlld0JveCIsInZpZXdCb3giLCJyb290IiwiZm9jdXNhYmxlIiwicm9sZSIsIm11aU5hbWUiLCJ3aXRoU3R5bGVzIiwidXNlclNlbGVjdCIsImRpc3BsYXkiLCJmaWxsIiwiZmxleFNocmluayIsInRyYW5zaXRpb24iLCJjb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsImNvbG9yQWN0aW9uIiwiY29sb3JFcnJvciIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsImNyZWF0ZVN2Z0ljb24iLCJwYXRoIiwiZGVib3VuY2UiLCJ0aW1lb3V0Iiwid2FpdCIsImRlYm91bmNlZCIsInRoYXQiLCJsYXRlciIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhciIsImRlcHJlY2F0ZWRQcm9wVHlwZSIsInZhbGlkYXRvciIsInJlYXNvbiIsInJlcXVpcmVQcm9wRmFjdG9yeSIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwidW5zdXBwb3J0ZWRQcm9wIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJpc011aUVsZW1lbnQiLCJlbGVtZW50IiwibXVpTmFtZXMiLCJvd25lckRvY3VtZW50Iiwibm9kZSIsImRvY3VtZW50Iiwib3duZXJXaW5kb3ciLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsInNldFJlZiIsImN1cnJlbnQiLCJ1c2VJZCIsImlkT3ZlcnJpZGUiLCJfUmVhY3QkdXNlU3RhdGUiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJpZCIsInJhbmRvbSIsInVzZUNvbnRyb2xsZWQiLCJjb250cm9sbGVkIiwiZGVmYXVsdFByb3AiLCJpc0NvbnRyb2xsZWQiLCJzdGF0ZSIsInZhbHVlU3RhdGUiLCJzZXRWYWx1ZSIsIm5ld1ZhbHVlIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0Iiwic2VhcmNoIiwidXJsIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImlzRm9jdXNWaXNpYmxlIiwidGFnTmFtZSIsIm1hdGNoZXMiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFuZGxlQmx1clZpc2libGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsIm9uQmx1clZpc2libGUiLCJpbnN0YW5jZSIsImRvYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJSZWFjdCIsIl9kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImQiLCJfdXRpbHMiLCJmb3IiLCJwYXJhbXMiLCJub2RlVHlwZSIsInBsYWluT2JqZWN0Q29uc3RydXJjdG9yIiwiY2xvbmVTdHlsZSIsInN0eWxlIiwibmV3U3R5bGUiLCJjcmVhdGVSdWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInJlc3VsdCIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsInN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJmYWxsYmFjayIsIl9wcm9wIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsIkNTUyIsImVzY2FwZSIsInJlcGxhY2UiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJwcm9jZXNzIiwib25DaGFuZ2VWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiYXR0YWNoZWQiLCJTdHlsZVJ1bGUiLCJfQmFzZVN0eWxlUnVsZSIsIl90aGlzIiwic2VsZWN0b3JUZXh0Iiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsIm9wdHMiLCJsaW5rIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsImF0IiwicXVlcnkiLCJydWxlcyIsImF0TWF0Y2giLCJSdWxlTGlzdCIsImFkZCIsIl9wcm90byIsImdldFJ1bGUiLCJhZGRSdWxlIiwib25Qcm9jZXNzUnVsZSIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMSIsIm5hbWVSZWdFeHAiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwibmFtZU1hdGNoIiwia2V5UmVnRXhwJDEiLCJyZWZSZWdFeHAiLCJmaW5kUmVmZXJlbmNlZEtleWZyYW1lIiwia2V5ZnJhbWVzIiwicmVwbGFjZVJlZiIsInJlZktleWZyYW1lIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJrZXlSZWdFeHAkMiIsInBsdWdpbkZvbnRGYWNlUnVsZSIsIlZpZXdwb3J0UnVsZSIsInBsdWdpblZpZXdwb3J0UnVsZSIsIlNpbXBsZVJ1bGUiLCJrZXlzTWFwIiwiZGVmYXVsdFVwZGF0ZU9wdGlvbnMiLCJmb3JjZVVwZGF0ZU9wdGlvbnMiLCJyYXciLCJjb3VudGVyIiwicnVsZU9wdGlvbnMiLCJfdGhpcyRvcHRpb25zIiwicmVnaXN0ZXIiLCJzcGxpY2UiLCJ1bnJlZ2lzdGVyIiwiZm9yRWFjaCIsInVwZGF0ZSIsImRhdGEiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsInN0eWxlUnVsZSIsIm9uVXBkYXRlIiwibmV4dFZhbHVlIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJjc3MiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJxdWV1ZSIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiaW50ZXJuYWwiLCJleHRlcm5hbCIsInJlZ2lzdHJ5Iiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsInBsdWdpbiIsIlNoZWV0c1JlZ2lzdHJ5IiwicmVzZXQiLCJfdGVtcCIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIm5zIiwibW9kdWxlSWQiLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsInByZWZpeCIsIlN0cmluZyIsIm1pbmlmeSIsIm1lbW9pemUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3NzUnVsZSIsImF0dHJpYnV0ZVN0eWxlTWFwIiwiZGVsZXRlIiwiZ2V0SGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJmaW5kUHJldk5vZGUiLCJyZWdpc3RyeSQxIiwiaW5zZXJ0aW9uUG9pbnQiLCJmaW5kSGlnaGVyU2hlZXQiLCJwYXJlbnROb2RlIiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRTaWJsaW5nIiwiY29tbWVudCIsImhlYWQiLCJjaGlsZE5vZGVzIiwibm9kZVZhbHVlIiwidHJpbSIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiZ2V0QXR0cmlidXRlIiwiX2luc2VydFJ1bGUiLCJjb250YWluZXIiLCJhcHBlbmRSdWxlIiwiY3NzUnVsZXMiLCJnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCIsIm1heEluZGV4IiwiRG9tUmVuZGVyZXIiLCJoYXNJbnNlcnRlZFJ1bGVzIiwibWVkaWEiLCJtZXRhIiwiZWwiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVN0eWxlIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJuZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGUiLCJCb29sZWFuIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRSdWxlcyIsIm5hdGl2ZVBhcmVudCIsImxhdGVzdE5hdGl2ZVBhcmVudCIsIl9pbnNlcnRpb25JbmRleCIsInJlZkNzc1J1bGUiLCJydWxlU3RyIiwiaW5zZXJ0aW9uSW5kZXgiLCJuYXRpdmVSdWxlIiwiZ2V0UnVsZXMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJ2ZXJzaW9uIiwic2V0dXAiLCJjcmVhdGVTdHlsZVNoZWV0IiwicmVtb3ZlU3R5bGVTaGVldCIsImdldER5bmFtaWNTdHlsZXMiLCJ0byIsImV4dHJhY3RlZCIsImhhc0NTU1RPTVN1cHBvcnQiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwiTWFwIiwicHNldWRvQ2xhc3NlcyIsIm5vdyIsIkRhdGUiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJmblZhbHVlcyIsImZuUnVsZSIsImF0UHJlZml4IiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJwYXJ0cyIsImhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUiLCJoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUiLCJwYXJlbnRSZWdFeHAiLCJnZXRSZXBsYWNlUmVmIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsImoiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJpc05lc3RlZCIsImlzTmVzdGVkQ29uZGl0aW9uYWwiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwidG9IeXBoZW5Mb3dlciIsInRvTG93ZXJDYXNlIiwiaE5hbWUiLCJjb252ZXJ0Q2FzZSIsImNvbnZlcnRlZCIsImh5cGhlbmF0ZWRQcm9wIiwicHgiLCJtcyIsInBlcmNlbnQiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsInJlZ0V4cCIsInVuaXRzIiwiYm9yZGVyIiwibWFyZ2luIiwicGFkZGluZyIsImJvdHRvbSIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImluc2V0IiwibW90aW9uIiwib3V0bGluZSIsInBlcnNwZWN0aXZlIiwiZ2FwIiwiZ3JpZCIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwiaXNOYU4iLCJjYW1lbENhc2VkT3B0aW9ucyIsImpzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJkb2N1bWVudEVsZW1lbnQiLCJqc0Nzc01hcCIsIk1veiIsIk8iLCJXZWJraXQiLCJhcHBlYXJlbmNlIiwibm9QcmVmaWxsIiwic3VwcG9ydGVkUHJvcGVydHkiLCJjb2xvckFkanVzdCIsInRvVXBwZXIiLCJjIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJtYXNrIiwibG9uZ2hhbmQiLCJ0ZXh0T3JpZW50YXRpb24iLCJ3cml0aW5nTW9kZSIsImJyZWFrUHJvcHNPbGQiLCJpbmxpbmVMb2dpY2FsT2xkIiwibmV3UHJvcCIsInVucHJlZml4ZWQiLCJwcmVmaXhlZCIsInBhc2NhbGl6ZWQiLCJzY3JvbGxTbmFwIiwib3ZlcnNjcm9sbEJlaGF2aW9yIiwicHJvcE1hcCIsIm9yZGVyIiwiZmxleDIwMTIiLCJwcm9wTWFwJDEiLCJmbGV4IiwicHJvcEtleXMiLCJwcmVmaXhDc3MiLCJtdWx0aXBsZSIsInByb3BlcnR5RGV0ZWN0b3JzIiwiZmlsdGVyIiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwia2V5JDEiLCJlbCQxIiwiY2FjaGUkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAxIiwicDIiLCJwcmVmaXhlZFZhbHVlIiwic3VwcG9ydGVkVmFsdWUiLCJjYWNoZUtleSIsInByZWZpeFN0eWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJDEiLCJhdFJ1bGUiLCJzdXBwb3J0ZWRLZXlmcmFtZXMiLCJzb3J0IiwicHJvcDAiLCJwcm9wMSIsImRlZmF1bHRPcHRpb25zIiwiZGlzYWJsZUdlbmVyYXRpb24iLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIl9vcHRpb25zJGRpc2FibGVHbG9iYSIsImRpc2FibGVHbG9iYWwiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzZWVkUHJlZml4IiwiZ2V0TmV4dENvdW50ZXJJZCIsInN0eWxlU2hlZXQiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsImluY3JlbWVudCIsImdldFN0eWxlc0NyZWF0b3IiLCJ0aGVtaW5nRW5hYmxlZCIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJnZXRDbGFzc2VzIiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJtZXJnZUNsYXNzZXMiLCJiYXNlQ2xhc3NlcyIsIm5ld0NsYXNzZXMiLCJfcmVmMiIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJyZWZzIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZHluYW1pY1NoZWV0IiwiX3JlZjMiLCJfcmVmNCIsInVzZVN5bmNocm9ub3VzRWZmZWN0IiwiY3VycmVudEtleSIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwic2hvdWxkVXBkYXRlIiwibmV4dENsYXNzZXMiLCJpc1BsYWluT2JqZWN0IiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRvVmFsIiwibWl4IiwidG1wIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsImNvbnRlbnQiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiX2l0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZSIsImciLCJxIiwidiIsInciLCJ6IiwidSIsIiQkdHlwZW9mIiwiQSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwicHJvcElzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwib2JqZWN0Iiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwib2EiLCJwYSIsInFhIiwibWEiLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkUiLCJNYSIsIkthIiwiTGEiLCJOYSIsInN0YWNrIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJlYiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsImRlZmF1bHRTZWxlY3RlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJvcGFjaXR5Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImJpbmQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJUZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIlpkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwicmFuZ2UiLCJtZSIsIm5lIiwib2UiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJsaXN0ZW5lciIsIkciLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJUZyIsIlVnIiwibW9kZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIm1lc3NhZ2UiLCJOaSIsImNvbnNvbGUiLCJPaSIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsInVrIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiY291bnQiLCJ0b0FycmF5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJwZXJmb3JtYW5jZSIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImNzc1RleHQiLCJjc3NOb2RlIiwiYXBwbHlUb1RhZyIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX3N0eWxlIiwiX2dldElkIiwiQ2FudmFzRW50cnkiLCJfY2xhc3NDYWxsQ2hlY2siLCJ3YXZlIiwid2F2ZUN0eCIsInByb2dyZXNzIiwicHJvZ3Jlc3NDdHgiLCJjYW52YXNDb250ZXh0QXR0cmlidXRlcyIsImdldENvbnRleHQiLCJlbGVtZW50V2lkdGgiLCJ0b3RhbFdpZHRoIiwib2Zmc2V0TGVmdCIsImVsZW1lbnRTaXplIiwiaGFzUHJvZ3Jlc3NDYW52YXMiLCJjbGVhclJlY3QiLCJjYW52YXMiLCJ3YXZlQ29sb3IiLCJwcm9ncmVzc0NvbG9yIiwiZmlsbFN0eWxlIiwicmFkaXVzIiwiZmlsbFJlY3RUb0NvbnRleHQiLCJjdHgiLCJkcmF3Um91bmRlZFJlY3QiLCJmaWxsUmVjdCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJjbG9zZVBhdGgiLCJwZWFrcyIsImFic21heCIsImhhbGZIIiwib2Zmc2V0WSIsImRyYXdMaW5lVG9Db250ZXh0IiwicGVhayIsImZpcnN0IiwiY2FudmFzU3RhcnQiLCJjYW52YXNFbmQiLCJzY2FsZSIsImhhbGZPZmZzZXQiLCJhYnNtYXhIYWxmIiwiaGFsZlBpeGVsIiwiZm9ybWF0IiwicXVhbGl0eSIsIlByb21pc2UiLCJyZXNvbHZlIiwidG9CbG9iIiwidG9EYXRhVVJMIiwidXRpbCIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwiTmV3VGFyZ2V0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJEcmF3ZXIiLCJfdXRpbCRPYnNlcnZlciIsIl9pbmhlcml0cyIsIl9zdXBlciIsInBpeGVsUmF0aW8iLCJsYXN0UG9zIiwid3JhcHBlciIsInBvc2l0aW9uIiwid2Via2l0VXNlclNlbGVjdCIsImZpbGxQYXJlbnQiLCJzY3JvbGxQYXJlbnQiLCJvdmVyZmxvd1giLCJoaWRlU2Nyb2xsYmFyIiwib3ZlcmZsb3dZIiwic2V0dXBXcmFwcGVyRXZlbnRzIiwibm9QcmV2ZW50IiwiYmJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5vbWluYWxXaWR0aCIsInBhcmVudFdpZHRoIiwiZ2V0V2lkdGgiLCJydGwiLCJzY3JvbGxXaWR0aCIsIl90aGlzMiIsInNjcm9sbGJhckhlaWdodCIsIm9mZnNldEhlaWdodCIsImNsaWVudEhlaWdodCIsImludGVyYWN0IiwiZmlyZUV2ZW50IiwiaGFuZGxlRXZlbnQiLCJzZXRXaWR0aCIsImNsZWFyV2F2ZSIsImJhcldpZHRoIiwiZHJhd0JhcnMiLCJkcmF3V2F2ZSIsInJlY2VudGVyT25Qb3NpdGlvbiIsImltbWVkaWF0ZSIsImhhbGYiLCJjbGllbnRXaWR0aCIsIm1heFNjcm9sbCIsInJhdGUiLCJhdXRvQ2VudGVyUmF0ZSIsInVwZGF0ZVNpemUiLCJfcHJvZ3Jlc3MiLCJtaW5QeERlbHRhIiwicG9zIiwiYXV0b0NlbnRlciIsIm5ld1BvcyIsImF1dG9DZW50ZXJJbW1lZGlhdGVseSIsInVwZGF0ZVByb2dyZXNzIiwidW5BbGwiLCJjaGFubmVsSW5kZXgiLCJPYnNlcnZlciIsIl9kcmF3ZXIiLCJfZHJhd2VyMiIsIk11bHRpQ2FudmFzIiwiX0RyYXdlciIsIm1heENhbnZhc1dpZHRoIiwibWF4Q2FudmFzRWxlbWVudFdpZHRoIiwiY2FudmFzZXMiLCJwcm9ncmVzc1dhdmUiLCJFbnRyeUNsYXNzIiwiZHJhd2luZ0NvbnRleHRBdHRyaWJ1dGVzIiwib3ZlcmxhcCIsImJhclJhZGl1cyIsImNyZWF0ZVdyYXBwZXIiLCJjcmVhdGVFbGVtZW50cyIsIm92ZXJmbG93IiwiYm94U2l6aW5nIiwiYm9yZGVyUmlnaHRTdHlsZSIsInBvaW50ZXJFdmVudHMiLCJhZGRDYW52YXMiLCJ1cGRhdGVDdXJzb3IiLCJib3JkZXJSaWdodFdpZHRoIiwiY3Vyc29yV2lkdGgiLCJib3JkZXJSaWdodENvbG9yIiwiY3Vyc29yQ29sb3IiLCJyZXF1aXJlZENhbnZhc2VzIiwicmVtb3ZlQ2FudmFzIiwiY2FudmFzV2lkdGgiLCJsYXN0Q2FudmFzIiwiZW50cnkiLCJ1cGRhdGVEaW1lbnNpb25zIiwibGVmdE9mZnNldCIsImluaXRXYXZlIiwiaW5pdFByb2dyZXNzIiwibGFzdEVudHJ5IiwicGFyZW50RWxlbWVudCIsIl90aGlzMyIsImZyYW1lIiwiX3RoaXM0IiwicHJlcGFyZURyYXciLCJoYXNNaW5WYWxzIiwicGVha0luZGV4U2NhbGUiLCJiYXIiLCJiYXJHYXAiLCJiYXJNaW5IZWlnaHQiLCJfdGhpczUiLCJyZWZsZWN0ZWRQZWFrcyIsImRyYXdMaW5lIiwiX3RoaXM2Iiwic3BsaXRDaGFubmVsc09wdGlvbnMiLCJjaGFubmVsQ29sb3JzIiwic2V0RmlsbFN0eWxlcyIsImRyYXdMaW5lcyIsInN0YXJ0Q2FudmFzIiwiZW5kQ2FudmFzIiwiaW50ZXJzZWN0aW9uIiwieDEiLCJ5MSIsIngyIiwieTIiLCJmaWxsUmVjdHMiLCJzcGxpdENoYW5uZWxzIiwiZmlsdGVyQ2hhbm5lbHMiLCJpbmNsdWRlcyIsImRyYXdJbmRleCIsIm5vcm1hbGl6ZWRNYXgiLCJfdGhpczciLCJjaGFubmVscyIsIm92ZXJhbGxBYnNNYXgiLCJmaWx0ZXJlZENoYW5uZWxzIiwiaGlkZUNoYW5uZWwiLCJvdmVybGF5Iiwic2V0SGVpZ2h0IiwicmVsYXRpdmVOb3JtYWxpemF0aW9uIiwiY2hhbm5lbFBlYWtzIiwiYWJzTWF4IiwiYmFySGVpZ2h0Iiwibm9ybWFsaXplIiwic29tZSIsImdldEltYWdlIiwiaW1hZ2VzIiwiX2dldCIsInJlY2VpdmVyIiwiX3N1cGVyUHJvcEJhc2UiLCJNZWRpYUVsZW1lbnRXZWJBdWRpbyIsIl9NZWRpYUVsZW1lbnQiLCJzb3VyY2VNZWRpYUVsZW1lbnQiLCJzZXRQbGF5YmFja1JhdGUiLCJhdWRpb1JhdGUiLCJjcmVhdGVUaW1lciIsImNyZWF0ZVZvbHVtZU5vZGUiLCJjcmVhdGVTY3JpcHROb2RlIiwiY3JlYXRlQW5hbHlzZXJOb2RlIiwicHJlbG9hZCIsImNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSIsIm1lZGlhRWxlbWVudCIsImNvbm5lY3QiLCJhbmFseXNlciIsInJlc3VtZUF1ZGlvQ29udGV4dCIsImRlc3Ryb3lXZWJBdWRpbyIsIl93ZWJhdWRpbyIsIk1lZGlhRWxlbWVudCIsIl9XZWJBdWRpbyIsImN1cnJlbnRUaW1lIiwicGF1c2VkIiwicGxheWJhY2tSYXRlIiwicGxheSIsInBhdXNlIiwidm9sdW1lIiwibWVkaWFUeXBlIiwiZWxlbWVudFBvc2l0aW9uIiwiaXNNdXRlZCIsImJ1ZmZlciIsIm9uUGxheUVuZCIsIm1lZGlhTGlzdGVuZXJzIiwiY2FucGxheSIsImVuZGVkIiwic2Vla2VkIiwidm9sdW1lY2hhbmdlIiwibXV0ZWQiLCJvbiIsIm9uQXVkaW9Qcm9jZXNzIiwiaXNQYXVzZWQiLCJnZXRDdXJyZW50VGltZSIsImNvbnRyb2xzIiwibWVkaWFDb250cm9scyIsImF1dG9wbGF5Iiwic3JjIiwicHJldk1lZGlhIiwiX2xvYWQiLCJlbHQiLCJIVE1MTWVkaWFFbGVtZW50IiwibG9hZCIsIl9zZXR1cE1lZGlhTGlzdGVuZXJzIiwic2V0Vm9sdW1lIiwiZXhwbGljaXREdXJhdGlvbiIsInNlZWthYmxlIiwiZ2V0RHVyYXRpb24iLCJjbGVhclBsYXlFbmQiLCJzZWVrVG8iLCJwcm9taXNlIiwic2V0UGxheUVuZCIsIl9vblBsYXlFbmQiLCJ1biIsImRldmljZUlkIiwic2V0U2lua0lkIiwicmVqZWN0IiwiZGVzdHJveWVkIiwicmVtb3ZlTWVkaWFFbGVtZW50T25EZXN0cm95IiwiUGVha0NhY2hlIiwiY2xlYXJQZWFrQ2FjaGUiLCJwZWFrQ2FjaGVSYW5nZXMiLCJwZWFrQ2FjaGVMZW5ndGgiLCJ1bmNhY2hlZFJhbmdlcyIsInVuY2FjaGVkUmFuZ2VQYWlycyIsInBlYWtDYWNoZVJhbmdlUGFpcnMiLCJfbWF4IiwiX21pbiIsIl9vYnNlcnZlciIsImZldGNoSGVhZGVycyIsIkhlYWRlcnMiLCJmZXRjaFJlcXVlc3QiLCJSZXF1ZXN0IiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVyIiwiYXBwZW5kIiwicmVzcG9uc2VUeXBlIiwiZmV0Y2hPcHRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsImNyZWRlbnRpYWxzIiwicmVkaXJlY3QiLCJyZWZlcnJlciIsInNpZ25hbCIsImZldGNoIiwicmVzcG9uc2UiLCJwcm9ncmVzc0F2YWlsYWJsZSIsImNvbnRlbnRMZW5ndGgiLCJvblByb2dyZXNzIiwiUmVzcG9uc2UiLCJSZWFkYWJsZVN0cmVhbSIsIlByb2dyZXNzSGFuZGxlciIsImVyck1zZyIsImFycmF5QnVmZmVyIiwiYmxvYiIsInN0YXR1cyIsImNhdGNoIiwiX3JlYWRlciIsImdldFJlYWRlciIsInRvdGFsIiwibG9hZGVkIiwicmVhZCIsImxlbmd0aENvbXB1dGFibGUiLCJjbG9zZSIsImJ5dGVMZW5ndGgiLCJlbnF1ZXVlIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX2Fic01heCIsIl9mcmFtZSIsIl9kZWJvdW5jZSIsIl9wcmV2ZW50Q2xpY2siLCJfZmV0Y2giLCJfY2xhbXAiLCJsYXJnZXN0Iiwic21hbGxlc3QiLCJfZGlzYWJsZWRFdmVudEVtaXNzaW9ucyIsImhhbmRsZXJzIiwiaGFuZGxlciIsImV2ZW50TmFtZXMiLCJfaXNEaXNhYmxlZEV2ZW50RW1pc3Npb24iLCJwcmV2ZW50Q2xpY2tIYW5kbGVyIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX21lZGlhZWxlbWVudCIsIl9wZWFrY2FjaGUiLCJfbWVkaWFlbGVtZW50V2ViYXVkaW8iLCJXYXZlU3VyZmVyIiwiZGVmYXVsdFBhcmFtcyIsImF1ZGlvQ29udGV4dCIsImF1ZGlvU2NyaXB0UHJvY2Vzc29yIiwiYmFja2VuZCIsImJhY2tncm91bmRDb2xvciIsImRyYWdTZWxlY3Rpb24iLCJkZXN5bmNocm9uaXplZCIsImZvcmNlRGVjb2RlIiwibG9vcFNlbGVjdGlvbiIsIm1lZGlhQ29udGFpbmVyIiwibWluUHhQZXJTZWMiLCJwYXJ0aWFsUmVuZGVyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInNjcmVlbiIsImRldmljZVhEUEkiLCJsb2dpY2FsWERQSSIsInJlc3BvbnNpdmUiLCJza2lwTGVuZ3RoIiwieGhyIiwiYmFja2VuZHMiLCJXZWJBdWRpbyIsInNldEJhY2tncm91bmRDb2xvciIsInNhdmVkVm9sdW1lIiwidG1wRXZlbnRzIiwiY3VycmVudFJlcXVlc3QiLCJhcnJheWJ1ZmZlciIsInBlYWtDYWNoZSIsInN1cHBvcnRzV2ViQXVkaW8iLCJCYWNrZW5kIiwiaW5pdGlhbGlzZWRQbHVnaW5MaXN0IiwiaXNEZXN0cm95ZWQiLCJpc1JlYWR5IiwicHJldldpZHRoIiwiX29uUmVzaXplIiwiaW5pdCIsInJlZ2lzdGVyUGx1Z2lucyIsImNyZWF0ZURyYXdlciIsImNyZWF0ZUJhY2tlbmQiLCJjcmVhdGVQZWFrQ2FjaGUiLCJhZGRQbHVnaW4iLCJkZWZlckluaXQiLCJpbml0UGx1Z2luIiwicGx1Z2luU3RhdGljUHJvcCIsIkluc3RhbmNlIiwiZGVzdHJveVBsdWdpbiIsImRyYXdCdWZmZXIiLCJnZXRQbGF5ZWRQZXJjZW50cyIsIm5ld1ZvbHVtZSIsImdldFZvbHVtZSIsInNlY29uZHMiLCJza2lwIiwic2Vla0FuZENlbnRlciIsInJlY2VudGVyIiwiX3RoaXM4IiwiaXNGaW5pdGUiLCJpc1dlYkF1ZGlvQmFja2VuZCIsIm9sZFNjcm9sbFBhcmVudCIsImdldFBsYXliYWNrUmF0ZSIsInNldE11dGUiLCJtdXRlIiwiZmlsdGVycyIsImNoYW5uZWxJbmRpY2VzIiwibmV3UmFuZ2VzIiwiYWRkUmFuZ2VUb1BlYWtDYWNoZSIsImdldFBlYWtzIiwiZHJhd1BlYWtzIiwicHhQZXJTZWMiLCJfdGhpczkiLCJkZWNvZGVBcnJheUJ1ZmZlciIsImxvYWREZWNvZGVkQnVmZmVyIiwiX3RoaXMxMCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJsb2FkQXJyYXlCdWZmZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImVtcHR5IiwicHJlbG9hZElnbm9yZVJlYXNvbnMiLCJhY3RpdmVSZWFzb25zIiwid2FybiIsImxvYWRCdWZmZXIiLCJsb2FkTWVkaWFFbGVtZW50IiwiX3RoaXMxMSIsIm9uY2UiLCJnZXRBcnJheUJ1ZmZlciIsInNldFBlYWtzIiwidXJsT3JFbHQiLCJfdGhpczEyIiwibG9hZEVsdCIsIl90aGlzMTMiLCJfdGhpczE0IiwicmVxdWVzdCIsImZldGNoRmlsZSIsInBlcmNlbnRDb21wbGV0ZSIsImFjY3VyYWN5Iiwibm9XaW5kb3ciLCJvcGVuIiwiY2FuY2VsIiwiYWJvcnQiLCJzdG9wIiwiZGlzY29ubmVjdFNvdXJjZSIsImNhbmNlbEFqYXgiLCJjbGVhclRtcEV2ZW50cyIsImRlc3Ryb3lBbGxQbHVnaW5zIiwiVkVSU0lPTiIsIlBMQVlJTkciLCJQQVVTRUQiLCJGSU5JU0hFRCIsIl90aGlzJHN0YXRlQmVoYXZpb3JzIiwiX3RoaXMkc3RhdGVzIiwib2ZmbGluZUF1ZGlvQ29udGV4dCIsInN0YXRlQmVoYXZpb3JzIiwiYWRkT25BdWRpb1Byb2Nlc3MiLCJzdGFydFBvc2l0aW9uIiwiZ2V0UGxheWVkVGltZSIsInJlbW92ZU9uQXVkaW9Qcm9jZXNzIiwiZ2V0QXVkaW9Db250ZXh0IiwibGFzdFBsYXkiLCJzY2hlZHVsZWRQYXVzZSIsInN0YXRlcyIsImdhaW5Ob2RlIiwibWVyZ2VkUGVha3MiLCJvZmZsaW5lQWMiLCJzY3JpcHROb2RlIiwic3BsaXRQZWFrcyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIldhdmVTdXJmZXJBdWRpb0NvbnRleHQiLCJzYW1wbGVSYXRlIiwiV2F2ZVN1cmZlck9mZmxpbmVBdWRpb0NvbnRleHQiLCJPZmZsaW5lQXVkaW9Db250ZXh0Iiwid2Via2l0T2ZmbGluZUF1ZGlvQ29udGV4dCIsInNldExlbmd0aCIsImRpc2Nvbm5lY3QiLCJzZXRGaWx0ZXJzIiwiZGlzY29ubmVjdEZpbHRlcnMiLCJwcmV2IiwiY3VyciIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsInNjcmlwdEJ1ZmZlclNpemUiLCJjcmVhdGVKYXZhU2NyaXB0Tm9kZSIsImRlc3RpbmF0aW9uIiwib25hdWRpb3Byb2Nlc3MiLCJjcmVhdGVBbmFseXNlciIsImNyZWF0ZUdhaW4iLCJjcmVhdGVHYWluTm9kZSIsImF1ZGlvIiwiQXVkaW8iLCJkZXN0IiwiY3JlYXRlTWVkaWFTdHJlYW1EZXN0aW5hdGlvbiIsInNyY09iamVjdCIsInN0cmVhbSIsImdhaW4iLCJzZXRWYWx1ZUF0VGltZSIsImVycmJhY2siLCJnZXRPZmZsaW5lQXVkaW9Db250ZXh0IiwiZGVjb2RlQXVkaW9EYXRhIiwibnVtYmVyT2ZDaGFubmVscyIsIm5ld0J1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVNpemUiLCJzYW1wbGVTdGVwIiwiY2hhbiIsImdldENoYW5uZWxEYXRhIiwiY2xvc2VBdWRpb0NvbnRleHQiLCJjcmVhdGVTb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJub3RlR3JhaW5PbiIsIm5vdGVPZmYiLCJyZXN1bWUiLCJhZGp1c3RlZFRpbWUiLCJ0aW1lc3RhbXAiLCJjYWxsTm93IiwiZmx1c2giLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsInRvU3RyaW5nVGFnIiwiaHRtbCIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiX3Byb3BzJGNoaWxkcmVuIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsIm5leHRQcm9wcyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJUcmFuc2l0aW9uR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJfdGhpcyRwcm9wcyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJfcHJvcHMkcHVsc2F0ZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJpblByb3AiLCJfcHJvcHMkb25FeGl0ZWQiLCJsZWF2aW5nIiwic2V0TGVhdmluZyIsInJpcHBsZUNsYXNzTmFtZSIsInJpcHBsZSIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJ0aW1lb3V0SWQiLCJUb3VjaFJpcHBsZSIsIl9wcm9wcyRjZW50ZXIiLCJjZW50ZXIiLCJjZW50ZXJQcm9wIiwicmlwcGxlcyIsInNldFJpcHBsZXMiLCJyaXBwbGVDYWxsYmFjayIsImlnbm9yaW5nTW91c2VEb3duIiwic3RhcnRUaW1lciIsInN0YXJ0VGltZXJDb21taXQiLCJzdGFydENvbW1pdCIsIm9sZFJpcHBsZXMiLCJfb3B0aW9ucyRwdWxzYXRlIiwiX29wdGlvbnMkY2VudGVyIiwiX29wdGlvbnMkZmFrZUVsZW1lbnQiLCJmYWtlRWxlbWVudCIsInJlY3QiLCJzcXJ0Iiwic2l6ZVgiLCJzaXplWSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdMZWF2ZSIsIl9wcm9wcyR0YWJJbmRleCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsIl9wcm9wcyR0eXBlIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiSWNvbkJ1dHRvbiIsIl9wcm9wcyRlZGdlIiwiZWRnZSIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsIl9wcm9wcyRzaXplIiwiZWRnZVN0YXJ0IiwiZWRnZUVuZCIsImxhYmVsIiwidGV4dEFsaWduIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiY29sb3JJbmhlcml0Iiwic2l6ZVNtYWxsIiwiQ29udGFpbmVyIiwiX3Byb3BzJGRpc2FibGVHdXR0ZXJzIiwiZGlzYWJsZUd1dHRlcnMiLCJfcHJvcHMkZml4ZWQiLCJmaXhlZCIsIl9wcm9wcyRtYXhXaWR0aCIsIm1heFdpZHRoIiwibWF4V2lkdGhYcyIsIm1heFdpZHRoU20iLCJtYXhXaWR0aE1kIiwibWF4V2lkdGhMZyIsIm1heFdpZHRoWGwiLCJTUEFDSU5HUyIsIkdSSURfU0laRVMiLCJnZXRPZmZzZXQiLCJkaXYiLCJwYXJzZSIsIkdyaWQiLCJfcHJvcHMkYWxpZ25Db250ZW50IiwiYWxpZ25Db250ZW50IiwiX3Byb3BzJGFsaWduSXRlbXMiLCJjbGFzc05hbWVQcm9wIiwiX3Byb3BzJGNvbnRhaW5lciIsIl9wcm9wcyRkaXJlY3Rpb24iLCJfcHJvcHMkaXRlbSIsIl9wcm9wcyRqdXN0aWZ5IiwianVzdGlmeSIsIl9wcm9wcyRsZyIsIl9wcm9wcyRtZCIsIl9wcm9wcyRzbSIsIl9wcm9wcyRzcGFjaW5nIiwiX3Byb3BzJHdyYXAiLCJ3cmFwIiwiX3Byb3BzJHhsIiwiX3Byb3BzJHhzIiwiX3Byb3BzJHplcm9NaW5XaWR0aCIsInplcm9NaW5XaWR0aCIsImZsZXhXcmFwIiwibWluV2lkdGgiLCJmbGV4RGlyZWN0aW9uIiwiZ2VuZXJhdGVHdXR0ZXIiLCJhY2N1bXVsYXRvciIsImdsb2JhbFN0eWxlcyIsImZsZXhCYXNpcyIsImdlbmVyYXRlR3JpZCIsIlBhcGVyIiwiX3Byb3BzJHNxdWFyZSIsInNxdWFyZSIsIl9wcm9wcyRlbGV2YXRpb24iLCJlbGV2YXRpb24iLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJvdXRsaW5lZCIsInJvdW5kZWQiLCJlbGV2YXRpb25zIiwic2hhZG93IiwiYm94U2hhZG93IiwiZm9ybUNvbnRyb2xTdGF0ZSIsIm11aUZvcm1Db250cm9sIiwiRm9ybUNvbnRyb2xDb250ZXh0IiwidXNlRm9ybUNvbnRyb2wiLCJnZXRTdHlsZVZhbHVlIiwiY29tcHV0ZWRTdHlsZSIsInZpc2liaWxpdHkiLCJvbkNoYW5nZSIsInJvd3MiLCJyb3dzTWF4IiwiX3Byb3BzJHJvd3NNaW4iLCJyb3dzTWluIiwicm93c01pblByb3AiLCJpbnB1dFJlZiIsInNoYWRvd1JlZiIsInJlbmRlcnMiLCJzeW5jSGVpZ2h0IiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJIZWlnaHRTdHlsZSIsInByZXZTdGF0ZSIsImhhbmRsZVJlc2l6ZSIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJTU1IiLCJJbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJlbmRBZG9ybm1lbnQiLCJfcHJvcHMkZnVsbFdpZHRoIiwiZnVsbFdpZHRoIiwiX3Byb3BzJGlucHV0Q29tcG9uZW50IiwiaW5wdXRDb21wb25lbnQiLCJfcHJvcHMkaW5wdXRQcm9wcyIsImlucHV0UHJvcHMiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsIl9wcm9wcyRtdWx0aWxpbmUiLCJtdWx0aWxpbmUiLCJyZW5kZXJTdWZmaXgiLCJzdGFydEFkb3JubWVudCIsInZhbHVlUHJvcCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJJbnB1dENvbXBvbmVudCIsInNldEFkb3JuZWRTdGFydCIsImZvcm1Db250cm9sIiwiYWRvcm5lZFN0YXJ0IiwiYWRvcm5lZEVuZCIsIm1hcmdpbkRlbnNlIiwib25BbmltYXRpb25TdGFydCIsInJlcXVpcmVkIiwiaW5wdXRNdWx0aWxpbmUiLCJoaWRkZW5MYWJlbCIsImlucHV0SGlkZGVuTGFiZWwiLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsImlucHV0VHlwZVNlYXJjaCIsImlucHV0TWFyZ2luRGVuc2UiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsInBhZGRpbmdUb3AiLCJmb250IiwicmVzaXplIiwiSW5wdXQiLCJkaXNhYmxlVW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiYm90dG9tTGluZUNvbG9yIiwibWFyZ2luVG9wIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21TdHlsZSIsIkZpbGxlZElucHV0IiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwicGFkZGluZ0JvdHRvbSIsIldlYmtpdEJveFNoYWRvdyIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJjYXJldENvbG9yIiwiTm90Y2hlZE91dGxpbmUiLCJsYWJlbFdpZHRoUHJvcCIsImxhYmVsV2lkdGgiLCJub3RjaGVkIiwiYWxpZ24iLCJsZWdlbmRMYWJlbGxlZCIsImxlZ2VuZE5vdGNoZWQiLCJsZWdlbmQiLCJib3JkZXJXaWR0aCIsIk91dGxpbmVkSW5wdXQiLCJfcHJvcHMkbGFiZWxXaWR0aCIsIm5vdGNoZWRPdXRsaW5lIiwiZmlsbGVkIiwiYm9yZGVyQ29sb3IiLCJGb3JtTGFiZWwiLCJhc3RlcmlzayIsIklucHV0TGFiZWwiLCJfcHJvcHMkZGlzYWJsZUFuaW1hdGkiLCJkaXNhYmxlQW5pbWF0aW9uIiwic2hyaW5rUHJvcCIsInNocmluayIsImFuaW1hdGVkIiwidHJhbnNmb3JtT3JpZ2luIiwiRm9ybUNvbnRyb2wiLCJfcHJvcHMkZXJyb3IiLCJ2aXN1YWxseUZvY3VzZWQiLCJfcHJvcHMkaGlkZGVuTGFiZWwiLCJfcHJvcHMkbWFyZ2luIiwiX3Byb3BzJHJlcXVpcmVkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImluaXRpYWxGaWxsZWQiLCJzZXRGaWxsZWQiLCJfUmVhY3QkdXNlU3RhdGUzIiwiX2ZvY3VzZWQiLCJjaGlsZENvbnRleHQiLCJyZWdpc3RlckVmZmVjdCIsIm1hcmdpbk5vcm1hbCIsIm1hcmdpbkJvdHRvbSIsIkZvcm1IZWxwZXJUZXh0IiwiY29udGFpbmVkIiwiX3Byb3BzJGRpc2FibGVQb3J0YWwiLCJkaXNhYmxlUG9ydGFsIiwib25SZW5kZXJlZCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImdldENvbnRhaW5lciIsImdldFNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJTaXplIiwib2Zmc2V0V2lkdGgiLCJhcmlhSGlkZGVuIiwic2hvdyIsImdldFBhZGRpbmdSaWdodCIsImFyaWFIaWRkZW5TaWJsaW5ncyIsImN1cnJlbnROb2RlIiwibm9kZXNUb0V4Y2x1ZGUiLCJibGFja2xpc3RUYWdOYW1lcyIsImZpbmRJbmRleE9mIiwiaWR4IiwiaGFuZGxlQ29udGFpbmVyIiwiZml4ZWROb2RlcyIsInJlc3RvcmVTdHlsZSIsInJlc3RvcmVQYWRkaW5ncyIsImRpc2FibGVTY3JvbGxMb2NrIiwiaW5uZXJXaWR0aCIsImlzT3ZlcmZsb3dpbmciLCJzY3JvbGxDb250YWluZXIiLCJNb2RhbE1hbmFnZXIiLCJtb2RhbHMiLCJjb250YWluZXJzIiwibW9kYWxJbmRleCIsIm1vZGFsUmVmIiwiaGlkZGVuU2libGluZ05vZGVzIiwiaGlkZGVuU2libGluZ3MiLCJnZXRIaWRkZW5TaWJsaW5ncyIsImNvbnRhaW5lckluZGV4IiwicmVzdG9yZSIsIm5leHRUb3AiLCJfcHJvcHMkZGlzYWJsZUF1dG9Gb2MiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiX3Byb3BzJGRpc2FibGVFbmZvcmNlIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsIl9wcm9wcyRkaXNhYmxlUmVzdG9yZSIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXREb2MiLCJpc0VuYWJsZWQiLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibm9kZVRvUmVzdG9yZSIsInJvb3RSZWYiLCJwcmV2T3BlblJlZiIsImNvbnRhaW4iLCJoYXNGb2N1cyIsImxvb3BGb2N1cyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW52aXNpYmxlIiwiX3Byb3BzJGludmlzaWJsZSIsImRlZmF1bHRNYW5hZ2VyIiwiaW5Qcm9wcyIsIl9wcm9wcyRCYWNrZHJvcENvbXBvbiIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsIl9wcm9wcyRjbG9zZUFmdGVyVHJhbiIsImNsb3NlQWZ0ZXJUcmFuc2l0aW9uIiwiX3Byb3BzJGRpc2FibGVCYWNrZHJvIiwiZGlzYWJsZUJhY2tkcm9wQ2xpY2siLCJfcHJvcHMkZGlzYWJsZUVzY2FwZUsiLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsIl9wcm9wcyRkaXNhYmxlU2Nyb2xsTCIsIl9wcm9wcyRoaWRlQmFja2Ryb3AiLCJoaWRlQmFja2Ryb3AiLCJfcHJvcHMka2VlcE1vdW50ZWQiLCJrZWVwTW91bnRlZCIsIl9wcm9wcyRtYW5hZ2VyIiwibWFuYWdlciIsIm9uQmFja2Ryb3BDbGljayIsIm9uQ2xvc2UiLCJvbkVzY2FwZUtleURvd24iLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJtb3VudE5vZGVSZWYiLCJoYXNUcmFuc2l0aW9uIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImdldE1vZGFsIiwiaGFuZGxlTW91bnRlZCIsIm1vdW50IiwiaGFuZGxlT3BlbiIsInJlc29sdmVkQ29udGFpbmVyIiwiaXNUb3BNb2RhbCIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiaW5saW5lU3R5bGUiLCJoaWRkZW4iLCJjaGlsZFByb3BzIiwib25FbnRlciIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJjb25maWciLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FeGl0Iiwib25FeGl0aW5nIiwibmV4dFN0YXRlIiwic2V0TmV4dENhbGxiYWNrIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJub29wIiwicmVmbG93IiwiZ2V0VHJhbnNpdGlvblByb3BzIiwiX3Byb3BzJHN0eWxlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiZ2V0U2NhbGUiLCJlbnRlcmluZyIsImVudGVyZWQiLCJHcm93IiwiX3Byb3BzJGRpc2FibGVTdHJpY3RNIiwiZGlzYWJsZVN0cmljdE1vZGVDb21wYXQiLCJfcHJvcHMkdGltZW91dCIsIl9wcm9wcyRUcmFuc2l0aW9uQ29tcCIsIlRyYW5zaXRpb25Db21wb25lbnQiLCJ0aW1lciIsImF1dG9UaW1lb3V0IiwiZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmb3JlaWduUmVmIiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm5vZGVPckFwcGVhcmluZyIsImlzQXBwZWFyaW5nIiwiaGFuZGxlRW50ZXJpbmciLCJoYW5kbGVFbnRlciIsIl9nZXRUcmFuc2l0aW9uUHJvcHMiLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdGluZyIsImhhbmRsZUV4aXQiLCJfZ2V0VHJhbnNpdGlvblByb3BzMiIsIm5vZGVPck5leHQiLCJtYXliZU5leHQiLCJtdWlTdXBwb3J0QXV0byIsImdldE9mZnNldFRvcCIsInZlcnRpY2FsIiwiZ2V0T2Zmc2V0TGVmdCIsImhvcml6b250YWwiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsImdldEFuY2hvckVsIiwiYW5jaG9yRWwiLCJQb3BvdmVyIiwiX3Byb3BzJGFuY2hvck9yaWdpbiIsImFuY2hvck9yaWdpbiIsImFuY2hvclBvc2l0aW9uIiwiX3Byb3BzJGFuY2hvclJlZmVyZW5jIiwiYW5jaG9yUmVmZXJlbmNlIiwiY29udGFpbmVyUHJvcCIsImdldENvbnRlbnRBbmNob3JFbCIsIl9wcm9wcyRtYXJnaW5UaHJlc2hvbCIsIm1hcmdpblRocmVzaG9sZCIsIl9wcm9wcyRQYXBlclByb3BzIiwiUGFwZXJQcm9wcyIsIl9wcm9wcyR0cmFuc2Zvcm1PcmlnaSIsIl9wcm9wcyR0cmFuc2l0aW9uRHVyYSIsInRyYW5zaXRpb25EdXJhdGlvblByb3AiLCJfcHJvcHMkVHJhbnNpdGlvblByb3AiLCJUcmFuc2l0aW9uUHJvcHMiLCJwYXBlclJlZiIsImdldEFuY2hvck9mZnNldCIsImNvbnRlbnRBbmNob3JPZmZzZXQiLCJyZXNvbHZlZEFuY2hvckVsIiwiYW5jaG9yUmVjdCIsImFuY2hvclZlcnRpY2FsIiwiZ2V0Q29udGVudEFuY2hvck9mZnNldCIsImNvbnRlbnRBbmNob3JFbCIsImdldFNjcm9sbFBhcmVudCIsIm9mZnNldFRvcCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsImVsZW1UcmFuc2Zvcm1PcmlnaW4iLCJjb250YWluZXJXaW5kb3ciLCJoZWlnaHRUaHJlc2hvbGQiLCJ3aWR0aFRocmVzaG9sZCIsImRpZmYiLCJfZGlmZiIsIl9kaWZmMiIsIl9kaWZmMyIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJoYW5kbGVQYXBlclJlZiIsInVwZGF0ZVBvc2l0aW9uIiwibWF4SGVpZ2h0IiwiTGlzdCIsIl9wcm9wcyRkZW5zZSIsImRlbnNlIiwiX3Byb3BzJGRpc2FibGVQYWRkaW5nIiwiZGlzYWJsZVBhZGRpbmciLCJzdWJoZWFkZXIiLCJsaXN0U3R5bGUiLCJuZXh0SXRlbSIsImRpc2FibGVMaXN0V3JhcCIsIm5leHRFbGVtZW50U2libGluZyIsInByZXZpb3VzSXRlbSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJ0ZXh0Q3JpdGVyaWFNYXRjaGVzIiwibmV4dEZvY3VzIiwidGV4dENyaXRlcmlhIiwiaW5uZXJUZXh0IiwicmVwZWF0aW5nIiwibW92ZUZvY3VzIiwiY3VycmVudEZvY3VzIiwiZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSIsInRyYXZlcnNhbEZ1bmN0aW9uIiwid3JhcHBlZE9uY2UiLCJuZXh0Rm9jdXNEaXNhYmxlZCIsImFjdGlvbnMiLCJfcHJvcHMkYXV0b0ZvY3VzIiwiX3Byb3BzJGF1dG9Gb2N1c0l0ZW0iLCJhdXRvRm9jdXNJdGVtIiwiX3Byb3BzJGRpc2FibGVkSXRlbXNGIiwiX3Byb3BzJGRpc2FibGVMaXN0V3JhIiwibGlzdFJlZiIsInRleHRDcml0ZXJpYVJlZiIsInByZXZpb3VzS2V5TWF0Y2hlZCIsImxhc3RUaW1lIiwiYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIiLCJjb250YWluZXJFbGVtZW50Iiwibm9FeHBsaWNpdFdpZHRoIiwiYWN0aXZlSXRlbUluZGV4IiwiaXRlbXMiLCJuZXdDaGlsZFByb3BzIiwiY3JpdGVyaWEiLCJsb3dlcktleSIsImN1cnJUaW1lIiwia2VlcEZvY3VzT25DdXJyZW50IiwiUlRMX09SSUdJTiIsIkxUUl9PUklHSU4iLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIl9wcm9wcyRNZW51TGlzdFByb3BzIiwiTWVudUxpc3RQcm9wcyIsIlBvcG92ZXJDbGFzc2VzIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiY29udGVudEFuY2hvclJlZiIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwiYXJlRXF1YWxWYWx1ZXMiLCJhcmlhTGFiZWwiLCJhdXRvV2lkdGgiLCJkaXNwbGF5RW1wdHkiLCJJY29uQ29tcG9uZW50IiwibGFiZWxJZCIsIl9wcm9wcyRNZW51UHJvcHMiLCJNZW51UHJvcHMiLCJvbk9wZW4iLCJvcGVuUHJvcCIsInJlbmRlclZhbHVlIiwiX3Byb3BzJFNlbGVjdERpc3BsYXlQIiwiU2VsZWN0RGlzcGxheVByb3BzIiwidGFiSW5kZXhQcm9wIiwiX3VzZUNvbnRyb2xsZWQiLCJfdXNlQ29udHJvbGxlZDIiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJnZXRFbGVtZW50QnlJZCIsImlzQ29sbGFwc2VkIiwiZGlzcGxheVNpbmdsZSIsImNoaWxkcmVuQXJyYXkiLCJoYW5kbGVJdGVtQ2xpY2siLCJpdGVtSW5kZXgiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwic2VsZWN0Iiwic2VsZWN0TWVudSIsIm5hdGl2ZUlucHV0IiwiaWNvbk9wZW4iLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwiaWNvbkZpbGxlZCIsImljb25PdXRsaW5lZCIsImRlZmF1bHRJbnB1dCIsIk5hdGl2ZVNlbGVjdCIsIl9wcm9wcyRJY29uQ29tcG9uZW50IiwiQXJyb3dEcm9wRG93biIsIl9wcm9wcyRpbnB1dCIsIlNlbGVjdCIsIl9wcm9wcyRhdXRvV2lkdGgiLCJfcHJvcHMkZGlzcGxheUVtcHR5IiwiX3Byb3BzJG11bHRpcGxlIiwiX3Byb3BzJG5hdGl2ZSIsIm5hdGl2ZSIsInZhcmlhbnRQcm9wcyIsInZhcmlhbnRDb21wb25lbnQiLCJUZXh0RmllbGQiLCJGb3JtSGVscGVyVGV4dFByb3BzIiwiaGVscGVyVGV4dCIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJfcHJvcHMkc2VsZWN0IiwiU2VsZWN0UHJvcHMiLCJJbnB1dE1vcmUiLCJfSW5wdXRMYWJlbFByb3BzJHJlcXUiLCJkaXNwbGF5UmVxdWlyZWQiLCJoZWxwZXJUZXh0SWQiLCJpbnB1dExhYmVsSWQiLCJJbnB1dEVsZW1lbnQiLCJodG1sRm9yIiwiTGlzdEl0ZW0iLCJfcHJvcHMkYnV0dG9uIiwiY2hpbGRyZW5Qcm9wIiwiY29tcG9uZW50UHJvcCIsIl9wcm9wcyRDb250YWluZXJDb21wbyIsIkNvbnRhaW5lckNvbXBvbmVudCIsIl9wcm9wcyRDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lclByb3BzIiwiQ29udGFpbmVyQ2xhc3NOYW1lIiwiX3Byb3BzJGRpdmlkZXIiLCJfcHJvcHMkc2VsZWN0ZWQiLCJsaXN0SXRlbVJlZiIsImhhc1NlY29uZGFyeUFjdGlvbiIsImNvbXBvbmVudFByb3BzIiwiYWxpZ25JdGVtc0ZsZXhTdGFydCIsInNlY29uZGFyeUFjdGlvbiIsImJhY2tncm91bmRDbGlwIiwiTGlzdEl0ZW1JY29uIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiVHlwb2dyYXBoeSIsIl9wcm9wcyRhbGlnbiIsIl9wcm9wcyRkaXNwbGF5IiwiX3Byb3BzJGd1dHRlckJvdHRvbSIsImd1dHRlckJvdHRvbSIsIl9wcm9wcyRub1dyYXAiLCJub1dyYXAiLCJfcHJvcHMkcGFyYWdyYXBoIiwicGFyYWdyYXBoIiwiX3Byb3BzJHZhcmlhbnRNYXBwaW5nIiwidmFyaWFudE1hcHBpbmciLCJzck9ubHkiLCJhbGlnbkxlZnQiLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJjb2xvclRleHRQcmltYXJ5IiwiY29sb3JUZXh0U2Vjb25kYXJ5IiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsIkxpc3RJdGVtVGV4dCIsIl9wcm9wcyRkaXNhYmxlVHlwb2dyYSIsImRpc2FibGVUeXBvZ3JhcGh5IiwiX3Byb3BzJGluc2V0IiwicHJpbWFyeVByb3AiLCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzIiwic2Vjb25kYXJ5UHJvcCIsInNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyIsIkNvbGxhcHNlIiwiX3Byb3BzJGNvbGxhcHNlZEhlaWdoIiwiY29sbGFwc2VkSGVpZ2h0IiwiY29sbGFwc2VkSGVpZ2h0UHJvcCIsIndyYXBwZXJSZWYiLCJhdXRvVHJhbnNpdGlvbkR1cmF0aW9uIiwid3JhcHBlckhlaWdodCIsImR1cmF0aW9uMiIsIndyYXBwZXJJbm5lciIsIkJhZGdlIiwiYmFkZ2VDb250ZW50IiwiaW52aXNpYmxlUHJvcCIsIl9wcm9wcyRtYXgiLCJfcHJvcHMkb3ZlcmxhcCIsIl9wcm9wcyRzaG93WmVybyIsInNob3daZXJvIiwiZGlzcGxheVZhbHVlIiwiYmFkZ2UiLCJkb3QiLCJSQURJVVNfU1RBTkRBUkQiLCJSQURJVVNfRE9UIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5nbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3RhbmdsZSIsImFuY2hvck9yaWdpblRvcExlZnRSZWN0YW5nbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodENpcmNsZSIsImFuY2hvck9yaWdpblRvcExlZnRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0Q2lyY2xlIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwicmVzdWx0Rm4iLCJpc0VxdWFsIiwibGFzdFRoaXMiLCJsYXN0UmVzdWx0IiwibGFzdEFyZ3MiLCJjYWxsZWRPbmNlIiwibmV3QXJncyIsImNhbmNlbFRpbWVvdXQiLCJ0aW1lb3V0SUQiLCJyZXF1ZXN0VGltZW91dCIsInRpY2siLCJjYWNoZWRSVExSZXN1bHQiLCJnZXRSVExPZmZzZXRUeXBlIiwicmVjYWxjdWxhdGUiLCJvdXRlckRpdiIsIm91dGVyU3R5bGUiLCJpbm5lckRpdiIsImlubmVyU3R5bGUiLCJkZWZhdWx0SXRlbUtleSQxIiwiY3JlYXRlTGlzdENvbXBvbmVudCIsIl9jbGFzcyIsImdldEl0ZW1PZmZzZXQiLCJnZXRFc3RpbWF0ZWRUb3RhbFNpemUiLCJnZXRJdGVtU2l6ZSIsImdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50IiwiZ2V0U3RhcnRJbmRleEZvck9mZnNldCIsImdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgiLCJpbml0SW5zdGFuY2VQcm9wcyIsInNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UiLCJ2YWxpZGF0ZVByb3BzIiwiX1B1cmVDb21wb25lbnQiLCJfaW5zdGFuY2VQcm9wcyIsIl9vdXRlclJlZiIsIl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkIiwiaXNTY3JvbGxpbmciLCJzY3JvbGxEaXJlY3Rpb24iLCJzY3JvbGxPZmZzZXQiLCJpbml0aWFsU2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkIiwiX2NhbGxPbkl0ZW1zUmVuZGVyZWQiLCJvdmVyc2NhblN0YXJ0SW5kZXgiLCJvdmVyc2NhblN0b3BJbmRleCIsInZpc2libGVTdGFydEluZGV4IiwidmlzaWJsZVN0b3BJbmRleCIsIm9uSXRlbXNSZW5kZXJlZCIsIl9jYWxsT25TY3JvbGwiLCJvblNjcm9sbCIsIl9nZXRJdGVtU3R5bGUiLCJpdGVtU2l6ZSIsImxheW91dCIsIml0ZW1TdHlsZUNhY2hlIiwiX2dldEl0ZW1TdHlsZUNhY2hlIiwiX29mZnNldCIsImlzSG9yaXpvbnRhbCIsImlzUnRsIiwib2Zmc2V0SG9yaXpvbnRhbCIsIl8iLCJfXyIsIl9fXyIsIl9vblNjcm9sbEhvcml6b250YWwiLCJfZXZlbnQkY3VycmVudFRhcmdldCIsIl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkIiwiX29uU2Nyb2xsVmVydGljYWwiLCJfZXZlbnQkY3VycmVudFRhcmdldDIiLCJfb3V0ZXJSZWZTZXR0ZXIiLCJvdXRlclJlZiIsIl9yZXNldElzU2Nyb2xsaW5nIiwidmFsaWRhdGVTaGFyZWRQcm9wcyQxIiwic2Nyb2xsVG8iLCJzY3JvbGxUb0l0ZW0iLCJpdGVtQ291bnQiLCJfdGhpcyRwcm9wczIiLCJfY2FsbFByb3BzQ2FsbGJhY2tzIiwiX3RoaXMkcHJvcHMzIiwiX3RoaXMkc3RhdGUiLCJfdGhpcyRwcm9wczQiLCJpbm5lckVsZW1lbnRUeXBlIiwiaW5uZXJUYWdOYW1lIiwiaXRlbURhdGEiLCJfdGhpcyRwcm9wczQkaXRlbUtleSIsIml0ZW1LZXkiLCJvdXRlckVsZW1lbnRUeXBlIiwib3V0ZXJUYWdOYW1lIiwidXNlSXNTY3JvbGxpbmciLCJfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQiLCJfZ2V0UmFuZ2VUb1JlbmRlciIsInN0YXJ0SW5kZXgiLCJzdG9wSW5kZXgiLCJlc3RpbWF0ZWRUb3RhbFNpemUiLCJ3aWxsQ2hhbmdlIiwiX3RoaXMkX2dldFJhbmdlVG9SZW5kMiIsIl9vdmVyc2NhblN0YXJ0SW5kZXgiLCJfb3ZlcnNjYW5TdG9wSW5kZXgiLCJfdmlzaWJsZVN0YXJ0SW5kZXgiLCJfdmlzaWJsZVN0b3BJbmRleCIsIl90aGlzJHN0YXRlMiIsIl9zY3JvbGxEaXJlY3Rpb24iLCJfc2Nyb2xsT2Zmc2V0IiwiX3Njcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCIsIl90aGlzJHByb3BzNSIsIm92ZXJzY2FuQ291bnQiLCJfdGhpcyRzdGF0ZTMiLCJvdmVyc2NhbkJhY2t3YXJkIiwib3ZlcnNjYW5Gb3J3YXJkIiwiRml4ZWRTaXplTGlzdCIsImxhc3RJdGVtT2Zmc2V0IiwibWF4T2Zmc2V0IiwibWluT2Zmc2V0IiwibWlkZGxlT2Zmc2V0IiwiX3JlZjUiLCJfcmVmNiIsIm51bVZpc2libGVJdGVtcyIsIl9yZWY3IiwiaXNCcm93c2VyIiwibmF2aWdhdG9yIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidXNlckFnZW50IiwiY2FsbGVkIiwic2NoZWR1bGVkIiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImdldFBhcmVudE5vZGUiLCJob3N0IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwiZ2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZSIsInJlZmVyZW5jZU5vZGUiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImlzSUUxMCIsImlzSUUiLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwic2lkZSIsInVwcGVyU2lkZSIsInNjcm9sbGluZ0VsZW1lbnQiLCJpbmNsdWRlU2Nyb2xsIiwic3VidHJhY3QiLCJtb2RpZmllciIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJnZXRTaXplIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImRlZmluZVByb3BlcnRpZXMiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlzRml4ZWQiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImJvdW5kYXJpZXNOb2RlIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiZ2V0QXJlYSIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJmaWx0ZXJlZEFyZWFzIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiY29tbW9uT2Zmc2V0UGFyZW50IiwiZ2V0T3V0ZXJTaXplcyIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJmaW5kIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiY3VyIiwiZW5hYmxlZCIsImFycm93U3R5bGVzIiwiZmxpcHBlZCIsInBvc2l0aW9uRml4ZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsImlzQ3JlYXRlZCIsIm9uQ3JlYXRlIiwiaXNNb2RpZmllckVuYWJsZWQiLCJtb2RpZmllck5hbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJnZXRXaW5kb3ciLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwic2Nyb2xsRWxlbWVudCIsImV2ZW50c0VuYWJsZWQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImlzTnVtZXJpYyIsInNldFN0eWxlcyIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNoaWZ0T2Zmc2V0cyIsInByZXZlbnRPdmVyZmxvdyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwia2VlcFRvZ2V0aGVyIiwib3BTaWRlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50Iiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIiwiZmxpcFZhcmlhdGlvbnMiLCJmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50IiwiZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJpbm5lciIsInN1YnRyYWN0TGVuZ3RoIiwiaGlkZSIsImJvdW5kIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInJlZmVyZW5jZVdpZHRoIiwicG9wcGVyV2lkdGgiLCJpc1ZhcmlhdGlvbiIsImhvcml6b250YWxUb0ludGVnZXIiLCJ2ZXJ0aWNhbFRvSW50ZWdlciIsImdldFJvdW5kZWRPZmZzZXRzIiwicHJlZml4ZWRQcm9wZXJ0eSIsImludmVydFRvcCIsImludmVydExlZnQiLCJhcHBseVN0eWxlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwianF1ZXJ5IiwiVXRpbHMiLCJnbG9iYWwiLCJQb3BwZXJVdGlscyIsImRlZmF1bHRQb3BwZXJPcHRpb25zIiwiX3Byb3BzJHBsYWNlbWVudCIsImluaXRpYWxQbGFjZW1lbnQiLCJfcHJvcHMkcG9wcGVyT3B0aW9ucyIsInBvcHBlck9wdGlvbnMiLCJwb3BwZXJSZWZQcm9wIiwicG9wcGVyUmVmIiwiX3Byb3BzJHRyYW5zaXRpb24iLCJ0b29sdGlwUmVmIiwib3duUmVmIiwiaGFuZGxlUG9wcGVyUmVmIiwiaGFuZGxlUG9wcGVyUmVmUmVmIiwicnRsUGxhY2VtZW50IiwiZmxpcFBsYWNlbWVudCIsInNldFBsYWNlbWVudCIsImhhbmRsZVBvcHBlclVwZGF0ZSIsImh5c3RlcnNpc09wZW4iLCJoeXN0ZXJzaXNUaW1lciIsIlRvb2x0aXAiLCJfcHJvcHMkYXJyb3ciLCJfcHJvcHMkZGlzYWJsZUZvY3VzTGkiLCJkaXNhYmxlRm9jdXNMaXN0ZW5lciIsIl9wcm9wcyRkaXNhYmxlSG92ZXJMaSIsImRpc2FibGVIb3Zlckxpc3RlbmVyIiwiX3Byb3BzJGRpc2FibGVUb3VjaExpIiwiZGlzYWJsZVRvdWNoTGlzdGVuZXIiLCJfcHJvcHMkZW50ZXJEZWxheSIsImVudGVyRGVsYXkiLCJfcHJvcHMkZW50ZXJOZXh0RGVsYXkiLCJlbnRlck5leHREZWxheSIsIl9wcm9wcyRlbnRlclRvdWNoRGVsYSIsImVudGVyVG91Y2hEZWxheSIsImlkUHJvcCIsIl9wcm9wcyRpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlIiwiX3Byb3BzJGxlYXZlRGVsYXkiLCJsZWF2ZURlbGF5IiwiX3Byb3BzJGxlYXZlVG91Y2hEZWxhIiwibGVhdmVUb3VjaERlbGF5IiwiX3Byb3BzJFBvcHBlckNvbXBvbmVuIiwiUG9wcGVyQ29tcG9uZW50IiwiUG9wcGVyUHJvcHMiLCJ0aXRsZSIsImNoaWxkTm9kZSIsInNldENoaWxkTm9kZSIsImFycm93UmVmIiwic2V0QXJyb3dSZWYiLCJpZ25vcmVOb25Ub3VjaEV2ZW50cyIsImNsb3NlVGltZXIiLCJlbnRlclRpbWVyIiwibGVhdmVUaW1lciIsInRvdWNoVGltZXIiLCJmb3J3YXJkIiwiY2hpbGRyZW5Qcm9wcyIsIm9uTW91c2VPdmVyIiwiY2hpbGRJc0ZvY3VzVmlzaWJsZSIsInNldENoaWxkSXNGb2N1c1Zpc2libGUiLCJoYW5kbGVMZWF2ZSIsImRldGVjdFRvdWNoU3RhcnQiLCJoYW5kbGVVc2VSZWYiLCJoYW5kbGVGb2N1c1JlZiIsInNob3VsZFNob3dOYXRpdmVUaXRsZSIsImludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycyIsIm1lcmdlZFBvcHBlclByb3BzIiwicG9wcGVySW50ZXJhY3RpdmUiLCJwb3BwZXJBcnJvdyIsInBsYWNlbWVudElubmVyIiwiVHJhbnNpdGlvblByb3BzSW5uZXIiLCJ0b3VjaCIsInRvb2x0aXBBcnJvdyIsIndvcmRXcmFwIiwidG9vbHRpcFBsYWNlbWVudExlZnQiLCJ0b29sdGlwUGxhY2VtZW50UmlnaHQiLCJ0b29sdGlwUGxhY2VtZW50VG9wIiwidG9vbHRpcFBsYWNlbWVudEJvdHRvbSIsImRlZmF1bHRUaW1lb3V0IiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsInJlbmRlclJvdyIsIm5vdGV3YXYiLCJab29tIiwibmFtYV9hdWRpbyIsIm5vdGUiLCJzZXRPcGVuIiwiQXNzaWdubWVudCIsIkRpdmlkZXIiLCJfcHJvcHMkYWJzb2x1dGUiLCJhYnNvbHV0ZSIsIl9wcm9wcyRmbGV4SXRlbSIsImZsZXhJdGVtIiwiX3Byb3BzJGxpZ2h0IiwiX3Byb3BzJG9yaWVudGF0aW9uIiwib3JpZW50YXRpb24iLCJfcHJvcHMkcm9sZSIsIm1pZGRsZSIsImFsaWduU2VsZiIsIkJhY2tkcm9wIiwic2V0VHJhbnNsYXRlVmFsdWUiLCJmYWtlVHJhbnNmb3JtIiwib2Zmc2V0WCIsInRyYW5zZm9ybVZhbHVlcyIsImdldFRyYW5zbGF0ZVZhbHVlIiwid2Via2l0VHJhbnNmb3JtIiwiY2hpbGRyZW5SZWYiLCJoYW5kbGVSZWZJbnRlcm1lZGlhcnkiLCJvcHBvc2l0ZURpcmVjdGlvbiIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJfcHJvcHMkYW5jaG9yIiwiYW5jaG9yIiwiYW5jaG9yUHJvcCIsIl9wcm9wcyRNb2RhbFByb3BzIiwiTW9kYWxQcm9wcyIsIkJhY2tkcm9wUHJvcHNQcm9wIiwiX3Byb3BzJG9wZW4iLCJTbGlkZVByb3BzIiwiZ2V0QW5jaG9yIiwiZG9ja2VkIiwic2xpZGluZ0RyYXdlciIsInBhcGVyQW5jaG9yTGVmdCIsInBhcGVyQW5jaG9yUmlnaHQiLCJwYXBlckFuY2hvclRvcCIsInBhcGVyQW5jaG9yQm90dG9tIiwicGFwZXJBbmNob3JEb2NrZWRMZWZ0IiwiYm9yZGVyUmlnaHQiLCJwYXBlckFuY2hvckRvY2tlZFRvcCIsInBhcGVyQW5jaG9yRG9ja2VkUmlnaHQiLCJib3JkZXJMZWZ0IiwicGFwZXJBbmNob3JEb2NrZWRCb3R0b20iLCJib3JkZXJUb3AiLCJTd2l0Y2hCYXNlIiwiY2hlY2tlZFByb3AiLCJjaGVja2VkSWNvbiIsImRpc2FibGVkUHJvcCIsInNldENoZWNrZWRTdGF0ZSIsImhhc0xhYmVsRm9yIiwibmV3Q2hlY2tlZCIsIlN3aXRjaCIsInRodW1iIiwic3dpdGNoQmFzZSIsIkZvcm1Db250cm9sTGFiZWwiLCJjb250cm9sIiwiX3Byb3BzJGxhYmVsUGxhY2VtZW50IiwibGFiZWxQbGFjZW1lbnQiLCJjb250cm9sUHJvcHMiLCJsYWJlbFBsYWNlbWVudFN0YXJ0IiwibGFiZWxQbGFjZW1lbnRUb3AiLCJsYWJlbFBsYWNlbWVudEJvdHRvbSIsIkZvcm1Hcm91cCIsIl9wcm9wcyRyb3ciLCJyb3ciLCJzd2l0Y2giLCJTd2l0Y2hUaGVtZSIsImlzTGlnaHQiLCJoYW5kbGVDaGFuZ2VUb2dnbGUiLCJhcmlhLWxhYmVsIiwiZHJhd2VyUGFwZXIiLCJ0b29sYmFySWNvbiIsImRyYXdlclBhcGVyQ2xvc2UiLCJoYW5kbGVEcmF3ZXJDbG9zZSIsInRvZ2dsZVRoZW1lIiwia2V5U3RvcmUiLCJzZXRJc0xpZ2h0IiwiZWxlY3Ryb24iLCJzdG9yZUFwaSIsImdldFN0b3JlIiwiY2xzeCIsIkNoZXZyb25MZWZ0IiwiTGlzdEl0ZW1zIiwiR2FwIiwiSW5wdXRBZG9ybm1lbnQiLCJfcHJvcHMkZGlzYWJsZVBvaW50ZXIiLCJkaXNhYmxlUG9pbnRlckV2ZW50cyIsInZhcmlhbnRQcm9wIiwicG9zaXRpb25TdGFydCIsInBvc2l0aW9uRW5kIiwidGV4dEZpZWxkIiwid2lkdGhGdWxsIiwid2hpdGVTcGFjZVdyYXAiLCJEZXRhaWxGaWxlIiwiZmlsZU5hbWUiLCJuYW1lV2F2IiwiY3VycmVudENvdW50IiwiaGFuZGxlQ2hhbmdlUG9zaXRpb24iLCJhcmlhLWRlc2NyaWJlZGJ5IiwiQXBwQmFyIiwiX3Byb3BzJHBvc2l0aW9uIiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsInBvc2l0aW9uU3RhdGljIiwicG9zaXRpb25SZWxhdGl2ZSIsImNvbG9yRGVmYXVsdCIsImNvbG9yVHJhbnNwYXJlbnQiLCJUb29sYmFyIiwicmVndWxhciIsImFwcEJhclNoaWZ0IiwibWVudUJ1dHRvbiIsIm1lbnVCdXR0b25IaWRkZW4iLCJhcHBCYXJTcGFjZXIiLCJOYXZiYXIiLCJoYW5kbGVEcmF3ZXJPcGVuIiwiaGFuZGxlU2VsZWN0RmlsZSIsIkZvbGRlck9wZW4iLCJEaWFsb2ciLCJfcHJvcHMkZnVsbFNjcmVlbiIsImZ1bGxTY3JlZW4iLCJfcHJvcHMkUGFwZXJDb21wb25lbnQiLCJQYXBlckNvbXBvbmVudCIsIl9wcm9wcyRzY3JvbGwiLCJzY3JvbGwiLCJhcmlhTGFiZWxsZWRieSIsIm1vdXNlRG93blRhcmdldCIsInBhcGVyRnVsbFNjcmVlbiIsInBhcGVyRnVsbFdpZHRoIiwic2Nyb2xsUGFwZXIiLCJzY3JvbGxCb2R5IiwicGFwZXJTY3JvbGxQYXBlciIsInBhcGVyU2Nyb2xsQm9keSIsInBhcGVyV2lkdGhGYWxzZSIsInBhcGVyV2lkdGhYcyIsInBhcGVyV2lkdGhTbSIsInBhcGVyV2lkdGhNZCIsInBhcGVyV2lkdGhMZyIsInBhcGVyV2lkdGhYbCIsIkRpYWxvZ1RpdGxlIiwiYXJpYS1sYWJlbGxlZGJ5IiwiRGlhbG9nQWN0aW9ucyIsIl9wcm9wcyRkaXNhYmxlU3BhY2luZyIsImRpc2FibGVTcGFjaW5nIiwiRGlhbG9nQ29udGVudCIsIl9wcm9wcyRkaXZpZGVycyIsImRpdmlkZXJzIiwiRGlhbG9nQ29udGVudFRleHQiLCJCdXR0b24iLCJfcHJvcHMkZGlzYWJsZUVsZXZhdGkiLCJkaXNhYmxlRWxldmF0aW9uIiwiZW5kSWNvblByb3AiLCJlbmRJY29uIiwic3RhcnRJY29uUHJvcCIsInN0YXJ0SWNvbiIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwiY29udGFpbmVkUHJpbWFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsInRleHRTaXplU21hbGwiLCJ0ZXh0U2l6ZUxhcmdlIiwib3V0bGluZWRTaXplU21hbGwiLCJvdXRsaW5lZFNpemVMYXJnZSIsImNvbnRhaW5lZFNpemVTbWFsbCIsImNvbnRhaW5lZFNpemVMYXJnZSIsInNpemVMYXJnZSIsImljb25TaXplU21hbGwiLCJpY29uU2l6ZU1lZGl1bSIsImljb25TaXplTGFyZ2UiLCJEaWFsb2dJbnB1dCIsImhhbmRsZUNsb3NlRGlhbG9nIiwiaGFuZGxlT25DaGFuZ2UiLCJoYW5kbGVPblNhdmUiLCJEaWFsb2dDb25maXIiLCJoYW5kbGVPbkNsb3NlIiwiaGFuZGxlT25PayIsImZpeGVkV2lkdGhCdXR0b24iLCJoYW5kbGVDbGljayIsImZpeGVkSGVpZ2h0IiwicGFwZXJNb2RhbCIsIndpdGhvdXRMYWJlbCIsIkRhc2hib2FyZCIsIm9uVG9nZ2xlVGhlbWUiLCJvcGVuRGlhbG9nSW5wdXQiLCJzZXRPcGVuRGlhbG9nSW5wdXQiLCJvcGVuRGlhbG9nQXBwbHkiLCJzZXRPcGVuRGlhbG9nQXBwbHkiLCJvcGVuRGlhbG9nU2F2ZSIsInNldE9wZW5EaWFsb2dTYXZlIiwiZmlsZVBhdGgiLCJzZXRGaWxlUGF0aCIsInNldEZpbGVOYW1lIiwic2V0RGF0YSIsInNldFBvc2l0aW9uIiwic2V0Q3VycmVudENvdW50IiwicGxheWluZyIsInNldFBsYXlpbmciLCJkYXRhQ29udGFpbnNOb3RlcyIsInNldERhdGFDb250YWluc05vdGVzIiwic2V0Tm90ZSIsIndhdmVmb3JtIiwiY29udGFpbmVyV2F2ZVJlZiIsImhhbmRsZU9wZW5EaWFsb2dJbnB1dCIsImhhbmRsZUNsb3NlRGlhbG9nSW5wdXQiLCJoYW5kbGVXcml0ZU5vdGUiLCJoYW5kbGVTYXZlTm90ZSIsImhhbmRsZU9wZW5EaWFsb2dBcHBseSIsImhhbmRsZUNsb3NlRGlhbG9nQXBwbHkiLCJoYW5kbGVPcGVuRGlhbG9nU2F2ZSIsImhhbmRsZUNsb3NlRGlhbG9nU2F2ZSIsImZpbGVzQXBpIiwic2VsZWN0RmlsZSIsImZ1bGxQYXRoIiwiZGF0YVByZWxvYWQiLCJmaWxlIiwibGlzdE5vdGUiLCJsYXN0SW5kZXhPZiIsImF1ZGlvRGlyIiwiYXVkaW9QYXRoIiwiaGFuZGxlUHVzaE5ld0RhdGEiLCJuZXdJdGVtIiwiaW5kZXhJbk5ld0RhdGEiLCJmaW5kSW5kZXhJbk5ld0RhdGEiLCJtb2RpZnlGaWxlQ3N2IiwiZml4ZWRIZWlnaHRQYXBlciIsIk5hdmlnYXRlQmVmb3JlIiwicGxheVBhdXNlIiwiUGxheUFycm93IiwiUGF1c2UiLCJOYXZpZ2F0ZU5leHQiLCJ0ZWtzX3RyYW5zY3JpcHQiLCJleHBvcnRUb0NzdiIsImxvY2FsVGhlbWUiLCJvdXRlclRoZW1lIiwibWVyZ2VPdXRlckxvY2FsVGhlbWUiLCJUaGVtZUNvbnRleHQiLCJzZXRUaGVtZSIsInRvZ2dsZURhcmtUaGVtZSIsIm5ld1BhbGV0dGVUeXBlIiwic2V0U3RvcmUiLCJjcmVhdGVNdWlUaGVtZSIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiO3dDQUFlLFNBQVNBLEVBQWtCQyxFQUFLQyxJQUNsQyxNQUFQQSxHQUFlQSxFQUFNRCxFQUFJRSxVQUFRRCxFQUFNRCxFQUFJRSxRQUUvQyxJQUFLLElBQUlDLEVBQUksRUFBR0MsRUFBTyxJQUFJQyxNQUFNSixHQUFNRSxFQUFJRixFQUFLRSxJQUM5Q0MsRUFBS0QsR0FBS0gsRUFBSUcsR0FHaEIsT0FBT0MsRSw4Q0NQTSxTQUFTRSxFQUF1QkMsR0FDN0MsUUFBYSxJQUFUQSxFQUNGLE1BQU0sSUFBSUMsZUFBZSw2REFHM0IsT0FBT0QsRSw4Q0NMVCxTQUFTRSxFQUFrQkMsRUFBUUMsR0FDakMsSUFBSyxJQUFJUixFQUFJLEVBQUdBLEVBQUlRLEVBQU1ULE9BQVFDLElBQUssQ0FDckMsSUFBSVMsRUFBYUQsRUFBTVIsR0FDdkJTLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqREMsT0FBT0MsZUFBZVAsRUFBUUUsRUFBV00sSUFBS04sSUFJbkMsU0FBU08sRUFBYUMsRUFBYUMsRUFBWUMsR0FHNUQsT0FGSUQsR0FBWVosRUFBa0JXLEVBQVlHLFVBQVdGLEdBQ3JEQyxHQUFhYixFQUFrQlcsRUFBYUUsR0FDekNG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RUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVB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QUEsV0FBdUIsQ0FDN0Q1OUgsTUFBTzBTLEdBQ05xRyxJLDYvQkNTTCxTQXJEWSxLQUNWLElBQU0yNkcsRUFBVyxTQUNWaGhILEVBQU9tckgsSUFBWTl0RSxjQUFTLENBQ2pDempELFFBQVMsQ0FDUDFILEtBQU0sUUFDTjZGLFFBQVMsQ0FDUEYsTUFBTyxVQUNQNkIsS0FBTSxVQUNOVCxLQUFNLFVBQ05pQyxhQUFjLFdBRWhCbEQsVUFBVyxDQUNUSCxNQUFPLFVBQ1A2QixLQUFNLFVBQ05ULEtBQU0sVUFDTmlDLGFBQWMsZUFLcEJzaUQsZUFBUyxJQUFDLFlBQ1IydEUsRUFBUyxTQUNKbnJILEdBREcsSUFFTnBHLFFBQVMsU0FDSm9HLEVBQU1wRyxTQURKLElBRUwxSCxZQUFhZ3ZILFNBQVNDLFNBQVNDLFNBQVNKLFVBQzlCRSxTQUFTQyxTQUFTQyxTQUFTSixHQUNqQyxnQkFHUCxJQUVILElBQU1vSyxFQUFrQjE5RyxlQUFrQixLQUN4QyxJQUFJMjlHLEVBQXdDLFVBQXZCcnJILEVBQU1wRyxRQUFRMUgsS0FBbUIsT0FBUyxRQUMvRGd2SCxTQUFTQyxTQUFTbUssU0FBU3RLLEVBQVVxSyxHQUNyQ0YsRUFBUyxTQUNKbnJILEdBREcsSUFFTnBHLFFBQVMsU0FDSm9HLEVBQU1wRyxTQURKLElBRUwxSCxLQUFNbTVILFNBR1QsQ0FBQ3JySCxJQUVFb0MsR0FBV21wSCxRQUFldnJILEdBRWhDLE9BQ0UsZ0JBQUMsR0FBRCxDQUFrQkEsTUFBT29DLEdBQ3ZCLGdCQUFDd2xILEdBQUQsQ0FBV0MsY0FBZXVELE0scUNDckQ1QnpwSCxHQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxLQUFJLEtBQVNBLElBSVgsWUNMZjZwSCxTQUFnQixnQkFBQyxHQUFELE1BQVM3aEgsU0FBU2t4RixlQUFlLFUiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZlwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICByZXR1cm4gY2FjaGU7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB7XG4gICAgICBcImRlZmF1bHRcIjogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpO1xuXG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuXG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG5cbiAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajtcblxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDEsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2JcIi5jb25jYXQoY29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnLCBcIihcIikuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cXG5XZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDMsIGNvbG9yKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IHZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0KS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KChlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dIDogZW5kKSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICB2YXIgX3Rvb2xiYXI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IFRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMiksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygyKVxuICAgICAgfSwgc3R5bGVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBcIlwiLmNvbmNhdChicmVha3BvaW50cy51cCgneHMnKSwgXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSwge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIGJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgfSksIF90b29sYmFyKVxuICB9LCBtaXhpbnMpO1xufSIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5kaWdvOyIsInZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG5leHBvcnQgZGVmYXVsdCBwaW5rOyIsInZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJ2YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwidmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwidmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IGluZGlnbyBmcm9tICcuLi9jb2xvcnMvaW5kaWdvJztcbmltcG9ydCBwaW5rIGZyb20gJy4uL2NvbG9ycy9waW5rJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICcuL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogZ3JleVs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IHZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBncmV5WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIHZhciB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIHZhciB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuXG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9IGRhcmtlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXREYXJrKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIHZhciBfcGFsZXR0ZSRwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5LFxuICAgICAgcHJpbWFyeSA9IF9wYWxldHRlJHByaW1hcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogaW5kaWdvWzMwMF0sXG4gICAgbWFpbjogaW5kaWdvWzUwMF0sXG4gICAgZGFyazogaW5kaWdvWzcwMF1cbiAgfSA6IF9wYWxldHRlJHByaW1hcnksXG4gICAgICBfcGFsZXR0ZSRzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeSA9IF9wYWxldHRlJHNlY29uZGFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBwaW5rLkEyMDAsXG4gICAgbWFpbjogcGluay5BNDAwLFxuICAgIGRhcms6IHBpbmsuQTcwMFxuICB9IDogX3BhbGV0dGUkc2Vjb25kYXJ5LFxuICAgICAgX3BhbGV0dGUkZXJyb3IgPSBwYWxldHRlLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcGFsZXR0ZSRlcnJvciA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICBtYWluOiByZWRbNTAwXSxcbiAgICBkYXJrOiByZWRbNzAwXVxuICB9IDogX3BhbGV0dGUkZXJyb3IsXG4gICAgICBfcGFsZXR0ZSR3YXJuaW5nID0gcGFsZXR0ZS53YXJuaW5nLFxuICAgICAgd2FybmluZyA9IF9wYWxldHRlJHdhcm5pbmcgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgbWFpbjogb3JhbmdlWzUwMF0sXG4gICAgZGFyazogb3JhbmdlWzcwMF1cbiAgfSA6IF9wYWxldHRlJHdhcm5pbmcsXG4gICAgICBfcGFsZXR0ZSRpbmZvID0gcGFsZXR0ZS5pbmZvLFxuICAgICAgaW5mbyA9IF9wYWxldHRlJGluZm8gPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogYmx1ZVszMDBdLFxuICAgIG1haW46IGJsdWVbNTAwXSxcbiAgICBkYXJrOiBibHVlWzcwMF1cbiAgfSA6IF9wYWxldHRlJGluZm8sXG4gICAgICBfcGFsZXR0ZSRzdWNjZXNzID0gcGFsZXR0ZS5zdWNjZXNzLFxuICAgICAgc3VjY2VzcyA9IF9wYWxldHRlJHN1Y2Nlc3MgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogZ3JlZW5bMzAwXSxcbiAgICBtYWluOiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzcwMF1cbiAgfSA6IF9wYWxldHRlJHN1Y2Nlc3MsXG4gICAgICBfcGFsZXR0ZSR0eXBlID0gcGFsZXR0ZS50eXBlLFxuICAgICAgdHlwZSA9IF9wYWxldHRlJHR5cGUgPT09IHZvaWQgMCA/ICdsaWdodCcgOiBfcGFsZXR0ZSR0eXBlLFxuICAgICAgX3BhbGV0dGUkY29udHJhc3RUaHJlID0gcGFsZXR0ZS5jb250cmFzdFRocmVzaG9sZCxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gX3BhbGV0dGUkY29udHJhc3RUaHJlID09PSB2b2lkIDAgPyAzIDogX3BhbGV0dGUkY29udHJhc3RUaHJlLFxuICAgICAgX3BhbGV0dGUkdG9uYWxPZmZzZXQgPSBwYWxldHRlLnRvbmFsT2Zmc2V0LFxuICAgICAgdG9uYWxPZmZzZXQgPSBfcGFsZXR0ZSR0b25hbE9mZnNldCA9PT0gdm9pZCAwID8gMC4yIDogX3BhbGV0dGUkdG9uYWxPZmZzZXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ3YXJuaW5nXCIsIFwiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgdmFyIGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuXG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgdmFyIGF1Z21lbnRDb2xvciA9IGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG5cbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuXG4gICAgaWYgKCFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNCwgbWFpblNoYWRlKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXFxuYGNvbG9yLm1haW5gIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IGBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbiksIFwiYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cXG5cXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cXG5cXG5pbXBvcnQge1xceEEwZ3JlZW4gfSBmcm9tIFxcXCJAbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnNcXFwiO1xcblxcbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogZ3JlZW4sXFxufSB9KTtcXG5cXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxcbn0gfSk7XCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg1LCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cblxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG5cbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcblxuICB2YXIgdHlwZXMgPSB7XG4gICAgZGFyazogZGFyayxcbiAgICBsaWdodDogbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHdhcm5pbmcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3IoaW5mbyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHN1Y2Nlc3MpLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cblxudmFyIGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbnZhciBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIHZhciBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmJGZvbnRGYW1pbHkgPT09IHZvaWQgMCA/IGRlZmF1bHRGb250RmFtaWx5IDogX3JlZiRmb250RmFtaWx5LFxuICAgICAgX3JlZiRmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9yZWYkZm9udFNpemUgPT09IHZvaWQgMCA/IDE0IDogX3JlZiRmb250U2l6ZSxcbiAgICAgIF9yZWYkZm9udFdlaWdodExpZ2h0ID0gX3JlZi5mb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSBfcmVmJGZvbnRXZWlnaHRMaWdodCA9PT0gdm9pZCAwID8gMzAwIDogX3JlZiRmb250V2VpZ2h0TGlnaHQsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPSBfcmVmLmZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPT09IHZvaWQgMCA/IDQwMCA6IF9yZWYkZm9udFdlaWdodFJlZ3VsYSxcbiAgICAgIF9yZWYkZm9udFdlaWdodE1lZGl1bSA9IF9yZWYuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPT09IHZvaWQgMCA/IDUwMCA6IF9yZWYkZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIF9yZWYkZm9udFdlaWdodEJvbGQgPSBfcmVmLmZvbnRXZWlnaHRCb2xkLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSBfcmVmJGZvbnRXZWlnaHRCb2xkID09PSB2b2lkIDAgPyA3MDAgOiBfcmVmJGZvbnRXZWlnaHRCb2xkLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgYWxsVmFyaWFudHMgPSBfcmVmLmFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTIgPSBfcmVmLnB4VG9SZW0sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGh0bWxGb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIHZhciBweFRvUmVtID0gcHhUb1JlbTIgfHwgZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWYsIFwicmVtXCIpO1xuICB9O1xuXG4gIHZhciBidWlsZFZhcmlhbnQgPSBmdW5jdGlvbiBidWlsZFZhcmlhbnQoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnOyAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cblxudmFyIHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIHNtOiA2MDAsXG4gIG1kOiA5NjAsXG4gIGxnOiAxMjgwLFxuICB4bDogMTkyMFxufTtcbnZhciBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleV0sIFwicHgpXCIpO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMudGhlbWUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKHByb3BWYWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF90aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIGFjY1tfdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgdmFyIGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xudmFyIGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG52YXIgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG52YXIgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm9wJHNwbGl0ID0gcHJvcC5zcGxpdCgnJyksXG4gICAgICBfcHJvcCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfcHJvcCRzcGxpdCwgMiksXG4gICAgICBhID0gX3Byb3Akc3BsaXQyWzBdLFxuICAgICAgYiA9IF9wcm9wJHNwbGl0MlsxXTtcblxuICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZnVuY3Rpb24gKGRpcikge1xuICAgIHJldHVybiBwcm9wZXJ0eSArIGRpcjtcbiAgfSkgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG52YXIgc3BhY2luZ0tleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcgfHwgODtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGFicywgXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhYnMgPiB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAoXCIuY29uY2F0KGFicywgXCIpIG92ZXJmbG93cy5cIiksIFwiVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKSwgXCIuXCIpLCBcIlwiLmNvbmNhdChhYnMsIFwiID4gXCIpLmNvbmNhdCh0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSwgXCIsIHlvdSBuZWVkIHRvIGFkZCB0aGUgbWlzc2luZyB2YWx1ZXMuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgdGhlbWUuc3BhY2luZ2AgdmFsdWUgKFwiLmNvbmNhdCh0aGVtZVNwYWNpbmcsIFwiKSBpcyBpbnZhbGlkLlwiKSwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIHZhciBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICB2YXIgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBcIi1cIi5jb25jYXQodHJhbnNmb3JtZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wVmFsdWUpIHtcbiAgICByZXR1cm4gY3NzUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3NzUHJvcGVydHkpIHtcbiAgICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gICAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgICBpZiAoc3BhY2luZ0tleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH0pLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkIGFwcGxpZWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zIGFuZCB0eXBlLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIHZhciB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcblxuICB2YXIgc3BhY2luZyA9IGZ1bmN0aW9uIHNwYWNpbmcoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzLmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGFyZ3MubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKDEpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShhcmdzWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5tYXAoZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQob3V0cHV0LCBcInB4XCIpIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTsgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdG8gcmVtb3ZlIGluIHY1LlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNwYWNpbmcsICd1bml0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCF3YXJuT25jZSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGVtZS5zcGFjaW5nLnVuaXQgdXNhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZC4nLCAnSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LicsICdZb3UgY2FuIHJlcGxhY2UgYHRoZW1lLnNwYWNpbmcudW5pdCAqIHlgIHdpdGggYHRoZW1lLnNwYWNpbmcoeSlgLicsICcnLCAnWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5PbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgICB9XG4gIH0pO1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInR5cG9ncmFwaHlcIl0pO1xuXG4gIHZhciBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICB2YXIgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgdmFyIHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gUHJvdmlkZSBkZWZhdWx0IHByb3BzXG4gICAgc2hhZG93czogc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZyxcbiAgICBzaGFwZTogc2hhcGUsXG4gICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgIHpJbmRleDogekluZGV4XG4gIH0sIG90aGVyKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFyZ3VtZW50KSB7XG4gICAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KTtcbiAgfSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIHBhcmVudEtleSkge1xuICAgICAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICAgICAgdmFyIGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKGRlcHRoID09PSAxKSB7XG4gICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiBjaGlsZCkge1xuICAgICAgICAgICAgdHJhdmVyc2UoY2hpbGQsIGtleSwgZGVwdGggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgXCIuY29uY2F0KHBhcmVudEtleSwgXCJgIGNvbXBvbmVudCBpbmNyZWFzZXMgXCIpICsgXCJ0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGludGVybmFsIHN0YXRlLlwiKSwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCAnSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAkcnVsZU5hbWUgc3ludGF4OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9wc2V1ZG8tY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShtdWlUaGVtZS5vdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNdWlUaGVtZTsiLCJpbXBvcnQgY3JlYXRlTXVpVGhlbWUgZnJvbSAnLi9jcmVhdGVNdWlUaGVtZSc7XG52YXIgZGVmYXVsdFRoZW1lID0gY3JlYXRlTXVpVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgdmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgdmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgfTtcblxuICAgICAgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogQXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl0uXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoZnVuY3Rpb24gKGFuaW1hdGVkUHJvcCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgfSkuam9pbignLCcpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlcyA9IGZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICAgIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImRlZmF1bHRUaGVtZVwiLCBcIndpdGhUaGVtZVwiLCBcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFN0eWxlcyhzdHlsZXMpKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBXaXRoU3R5bGVzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gV2l0aFN0eWxlcyhwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2xhc3Nlc1Byb3AgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJpbm5lclJlZlwiXSk7IC8vIFRoZSB3cmFwcGVyIHJlY2VpdmVzIG9ubHkgdXNlciBzdXBwbGllZCBwcm9wcywgd2hpY2ggY291bGQgYmUgYSBzdWJzZXQgb2ZcbiAgICAgIC8vIHRoZSBhY3R1YWwgcHJvcHMgQ29tcG9uZW50IG1pZ2h0IHJlY2VpdmUgZHVlIHRvIG1lcmdpbmcgd2l0aCBkZWZhdWx0UHJvcHMuXG4gICAgICAvLyBTbyBjb3B5aW5nIGl0IGhlcmUgd291bGQgZ2l2ZSB1cyB0aGUgc2FtZSByZXN1bHQgaW4gdGhlIHdyYXBwZXIgYXMgd2VsbC5cblxuXG4gICAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlcyhfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LmRlZmF1bHRQcm9wcywgcHJvcHMpKTtcbiAgICAgIHZhciB0aGVtZTtcbiAgICAgIHZhciBtb3JlID0gb3RoZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgd2l0aFRoZW1lKSB7XG4gICAgICAgIC8vIG5hbWUgYW5kIHdpdGhUaGVtZSBhcmUgaW52YXJpYW50IGluIHRoZSBvdXRlciBzY29wZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgICAgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIG1vcmUgPSBnZXRUaGVtZVByb3BzKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcm9wczogb3RoZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgIC8vIFNvIHdlIGRvbid0IGhhdmUgdG8gdXNlIHRoZSBgd2l0aFRoZW1lKClgIEhpZ2hlci1vcmRlciBDb21wb25lbnQuXG5cblxuICAgICAgICBpZiAod2l0aFRoZW1lICYmICFtb3JlLnRoZW1lKSB7XG4gICAgICAgICAgbW9yZS50aGVtZSA9IHRoZW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiBpbm5lclJlZiB8fCByZWYsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgICAgIH0sIG1vcmUpKTtcbiAgICB9KTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgZGVjb3JhdGVkIGNvbXBvbmVudC5cbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmlubmVyUmVmID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsOyAvLyByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAvLyAgICdNYXRlcmlhbC1VSTogVGhlIGBpbm5lclJlZmAgcHJvcCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuICcgK1xuICAgICAgICAvLyAgICAgJ1JlZnMgYXJlIG5vdyBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCB0byB0aGUgaW5uZXIgY29tcG9uZW50LicsXG4gICAgICAgIC8vICk7XG4gICAgICB9KVxuICAgIH0gOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9IFwiV2l0aFN0eWxlcyhcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhTdHlsZXMsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gRXhwb3NlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cbiAgICAgIFdpdGhTdHlsZXMuTmFrZWQgPSBDb21wb25lbnQ7XG4gICAgICBXaXRoU3R5bGVzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgV2l0aFN0eWxlcy51c2VTdHlsZXMgPSB1c2VTdHlsZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyBhcyB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgb3B0aW9ucykge1xuICByZXR1cm4gd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5cIiA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmdW5jKSB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIGZ1bmN0aW9uICgpIHt9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3ZnSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3N2ZycgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgaHRtbENvbG9yID0gcHJvcHMuaHRtbENvbG9yLFxuICAgICAgdGl0bGVBY2Nlc3MgPSBwcm9wcy50aXRsZUFjY2VzcyxcbiAgICAgIF9wcm9wcyR2aWV3Qm94ID0gcHJvcHMudmlld0JveCxcbiAgICAgIHZpZXdCb3ggPSBfcHJvcHMkdmlld0JveCA9PT0gdm9pZCAwID8gJzAgMCAyNCAyNCcgOiBfcHJvcHMkdmlld0JveCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwidGl0bGVBY2Nlc3NcIiwgXCJ2aWV3Qm94XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBodG1sQ29sb3IsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0aXRsZUFjY2VzcyA/IHVuZGVmaW5lZCA6IHRydWUsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6IHVuZGVmaW5lZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgbnVsbCwgdGl0bGVBY2Nlc3MpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydhY3Rpb24nLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAnbGFyZ2UnLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nXG59KShTdmdJY29uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcbi8qKlxuICogUHJpdmF0ZSBtb2R1bGUgcmVzZXJ2ZWQgZm9yIEBtYXRlcmlhbC11aS94IHBhY2thZ2VzLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCA9IGZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIF9leHRlbmRzKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCBwYXRoKTtcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIE5lZWQgdG8gc2V0IGBkaXNwbGF5TmFtZWAgb24gdGhlIGlubmVyIGNvbXBvbmVudCBmb3IgUmVhY3QubWVtby5cbiAgICAvLyBSZWFjdCBwcmlvciB0byAxNi4xNCBpZ25vcmVzIGBkaXNwbGF5TmFtZWAgb24gdGhlIHdyYXBwZXIuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gU3ZnSWNvbi5tdWlOYW1lO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oIC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENvbXBvbmVudCkpO1xufSIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMpIHtcbiAgdmFyIHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE2NjtcbiAgdmFyIHRpbWVvdXQ7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC10aGlzXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgICBmdW5jLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcblxuICByZXR1cm4gZGVib3VuY2VkO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlcHJlY2F0ZWRQcm9wVHlwZSh2YWxpZGF0b3IsIHJlYXNvbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBcIi5jb25jYXQobG9jYXRpb24sIFwiIGBcIikuY29uY2F0KHByb3BGdWxsTmFtZVNhZmUsIFwiYCBvZiBcIikgKyBcImBcIi5jb25jYXQoY29tcG9uZW50TmFtZVNhZmUsIFwiYCBpcyBkZXByZWNhdGVkLiBcIikuY29uY2F0KHJlYXNvbikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVQcm9wRmFjdG9yeShjb21wb25lbnROYW1lSW5FcnJvcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHJlcXVpcmVQcm9wID0gZnVuY3Rpb24gcmVxdWlyZVByb3AocmVxdWlyZWRQcm9wKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBwcm9wIGBcIi5jb25jYXQocHJvcEZ1bGxOYW1lU2FmZSwgXCJgIG9mIFwiKSArIFwiYFwiLmNvbmNhdChjb21wb25lbnROYW1lSW5FcnJvciwgXCJgIG11c3QgYmUgdXNlZCBvbiBgXCIpLmNvbmNhdChyZXF1aXJlZFByb3AsIFwiYC5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiByZXF1aXJlUHJvcDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN1cHBvcnRlZFByb3AocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIHByb3AgYFwiLmNvbmNhdChwcm9wRnVsbE5hbWVTYWZlLCBcImAgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSBpdC5cIikpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNdWlFbGVtZW50KGVsZW1lbnQsIG11aU5hbWVzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsIi8vIFRPRE8gdjU6IGNvbnNpZGVyIHRvIG1ha2UgaXQgcHJpdmF0ZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbWF0ZXJpYWwtdWkveCBwYWNrYWdlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKSxcbiAgICAgIGRlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldERlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSByYW5kb20gdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgc2V0RGVmYXVsdElkKFwibXVpLVwiLmNvbmNhdChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTUpKSk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKF9yZWYpIHtcbiAgdmFyIGNvbnRyb2xsZWQgPSBfcmVmLmNvbnRyb2xsZWQsXG4gICAgICBkZWZhdWx0UHJvcCA9IF9yZWYuZGVmYXVsdCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBfcmVmJHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0YXRlID0gX3JlZiRzdGF0ZSA9PT0gdm9pZCAwID8gJ3ZhbHVlJyA6IF9yZWYkc3RhdGU7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApLFxuICAgICAgdmFsdWVTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBcIi5jb25jYXQoaXNDb250cm9sbGVkID8gJycgOiAndW4nLCBcImNvbnRyb2xsZWQgXCIpLmNvbmNhdChzdGF0ZSwgXCIgc3RhdGUgb2YgXCIpLmNvbmNhdChuYW1lLCBcIiB0byBiZSBcIikuY29uY2F0KGlzQ29udHJvbGxlZCA/ICd1bicgOiAnJywgXCJjb250cm9sbGVkLlwiKSwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIFwiRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIgXCIpICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciwgaXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2NvbnRyb2xsZWRdKTtcblxuICAgIHZhciBfUmVhY3QkdXNlUmVmMiA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9SZWFjdCR1c2VSZWYyLmN1cnJlbnQ7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCBcIi5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCBcIikuY29uY2F0KG5hbWUsIFwiIGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBcIikgKyBcIlRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG5cbiAgdmFyIHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICgwLCByZWYuY3VycmVudCkuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LCBbXSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZkEgPT0gbnVsbCAmJiByZWZCID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAocmVmVmFsdWUpIHtcbiAgICAgIHNldFJlZihyZWZBLCByZWZWYWx1ZSk7XG4gICAgICBzZXRSZWYocmVmQiwgcmVmVmFsdWUpO1xuICAgIH07XG4gIH0sIFtyZWZBLCByZWZCXSk7XG59IiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL3Y0LjEuNS9zcmMvZm9jdXMtdmlzaWJsZS5qc1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbnZhciBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG52YXIgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgdGV4dDogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxufTtcbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICB2YXIgdHlwZSA9IG5vZGUudHlwZSxcbiAgICAgIHRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gYnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3JcbiAgLy8gd2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vyc1xuICAvLyByZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgLy8gbm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gdGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHlcblxuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkIG9uIGEgZm9jdXMtdmlzaWJsZSBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gIH0sIDEwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG5cbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKGlzRm9jdXNWaXNpYmxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGU6IGlzRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1clZpc2libGU6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogcmVmXG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDNoLTQuMThDMTQuNCAxLjg0IDEzLjMgMSAxMiAxYy0xLjMgMC0yLjQuODQtMi44MiAySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTcgMGMuNTUgMCAxIC40NSAxIDFzLS40NSAxLTEgMS0xLS40NS0xLTEgLjQ1LTEgMS0xem0yIDE0SDd2LTJoN3Yyem0zLTRIN3YtMmgxMHYyem0wLTRIN1Y3aDEwdjJ6XCJcbn0pLCAnQXNzaWdubWVudCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNDEgNy40MUwxNCA2bC02IDYgNiA2IDEuNDEtMS40MUwxMC44MyAxMnpcIlxufSksICdDaGV2cm9uTGVmdCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAgNmgtOGwtMi0ySDRjLTEuMSAwLTEuOTkuOS0xLjk5IDJMMiAxOGMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjhjMC0xLjEtLjktMi0yLTJ6bTAgMTJINFY4aDE2djEwelwiXG59KSwgJ0ZvbGRlck9wZW4nKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMThoMTh2LTJIM3Yyem0wLTVoMTh2LTJIM3Yyem0wLTd2MmgxOFY2SDN6XCJcbn0pLCAnTWVudScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNDEgNy40MUwxNCA2bC02IDYgNiA2IDEuNDEtMS40MUwxMC44MyAxMnpcIlxufSksICdOYXZpZ2F0ZUJlZm9yZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAgNkw4LjU5IDcuNDEgMTMuMTcgMTJsLTQuNTggNC41OUwxMCAxOGw2LTZ6XCJcbn0pLCAnTmF2aWdhdGVOZXh0Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk02IDE5aDRWNUg2djE0em04LTE0djE0aDRWNWgtNHpcIlxufSksICdQYXVzZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOCA1djE0bDExLTd6XCJcbn0pLCAnUGxheUFycm93Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXRpbHMuY3JlYXRlU3ZnSWNvbjtcbiAgfVxufSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHNcIik7IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuXG52YXIgcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IgPSB7fS5jb25zdHJ1Y3RvcjtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgaWYgKHN0eWxlID09IG51bGwgfHwgdHlwZW9mIHN0eWxlICE9PSAnb2JqZWN0JykgcmV0dXJuIHN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHJldHVybiBzdHlsZS5tYXAoY2xvbmVTdHlsZSk7XG4gIGlmIChzdHlsZS5jb25zdHJ1Y3RvciAhPT0gcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IpIHJldHVybiBzdHlsZTtcbiAgdmFyIG5ld1N0eWxlID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIG5ld1N0eWxlW25hbWVdID0gY2xvbmVTdHlsZShzdHlsZVtuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmV3U3R5bGU7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZSBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgaWYgKG5hbWUgPT09IHZvaWQgMCkge1xuICAgIG5hbWUgPSAndW5uYW1lZCc7XG4gIH1cblxuICB2YXIganNzID0gb3B0aW9ucy5qc3M7XG4gIHZhciBkZWNsQ29weSA9IGNsb25lU3R5bGUoZGVjbCk7XG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlOyAvLyBJdCBpcyBhbiBhdC1ydWxlIGFuZCBpdCBoYXMgbm8gaW5zdGFuY2UuXG5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBydWxlIFwiICsgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbnZhciB0b0Nzc1ZhbHVlID0gZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSwgaWdub3JlSW1wb3J0YW50KSB7XG4gIGlmIChpZ25vcmVJbXBvcnRhbnQgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZUltcG9ydGFudCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nOyAvLyBLZXkgbWlnaHQgY29udGFpbiBhIHVuaXF1ZSBzdWZmaXggaW4gY2FzZSB0aGUgYG5hbWVgIHBhc3NlZCBieSB1c2VyIHdhcyBkdXBsaWNhdGUuXG5cbiAgICB0aGlzLnF1ZXJ5ID0gb3B0aW9ucy5uYW1lIHx8IFwiQFwiICsgdGhpcy5hdDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBSZWZlcmVuY2VkIGtleWZyYW1lcyBydWxlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIHJlZmVyZW5jZSBmb3IgYSBhbmltYXRpb24gbmFtZS5cbiAqL1xuXG5cbnZhciByZXBsYWNlUmVmID0gZnVuY3Rpb24gcmVwbGFjZVJlZihzdHlsZSwgcHJvcCwga2V5ZnJhbWVzKSB7XG4gIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICB2YXIgcmVmS2V5ZnJhbWUgPSBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbHVlLCBrZXlmcmFtZXMpO1xuXG4gIGlmIChyZWZLZXlmcmFtZSAhPT0gdmFsdWUpIHtcbiAgICBzdHlsZVtwcm9wXSA9IHJlZktleWZyYW1lO1xuICB9XG59O1xuXG52YXIgcGx1Z2luID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXlSZWdFeHAkMS50ZXN0KGtleSkgPyBuZXcgS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykgOiBudWxsO1xuICB9LFxuICAvLyBBbmltYXRpb24gbmFtZSByZWYgcmVwbGFjZXIuXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuIHN0eWxlO1xuICAgIGlmICgnYW5pbWF0aW9uLW5hbWUnIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uLW5hbWUnLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIGlmICgnYW5pbWF0aW9uJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbicsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvbkNoYW5nZVZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbCwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGlmICghc2hlZXQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGNhc2UgJ2FuaW1hdGlvbi1uYW1lJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEtleWZyYW1lUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoS2V5ZnJhbWVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVSdWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwuYXBwbHkoX0Jhc2VTdHlsZVJ1bGUsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luS2V5ZnJhbWVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbmV3IEtleWZyYW1lUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIEZvbnRGYWNlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hdCA9ICdAZm9udC1mYWNlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGb250RmFjZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQyID0gL0Bmb250LWZhY2UvO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAkMi50ZXN0KGtleSkgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lcyxcbiAgICAgIHNlbGVjdG9yOiB1bmRlZmluZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIXJ1bGUgfHwgLy8gU3R5bGUgc2hlZXQgd2FzIGNyZWF0ZWQgd2l0aG91dCBsaW5rOiB0cnVlIGFuZCBhdHRhY2hlZCwgaW4gdGhpcyBjYXNlIHdlXG4gICAgLy8gd29uJ3QgYmUgYWJsZSB0byByZW1vdmUgdGhlIENTUyBydWxlIGZyb20gdGhlIERPTS5cbiAgICB0aGlzLmF0dGFjaGVkICYmICFydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG4gICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICByZWdpc3RyeS5wdXNoKHNoZWV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgYSBwb3NpdGlvbi5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICByZWdpc3RyeS5zcGxpY2UoaSwgMCwgc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHNoZWV0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYWxsIGF0dGFjaGVkIHNoZWV0cyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBhdHRhY2hlZCA9IF9yZWYuYXR0YWNoZWQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhdHRhY2hlZFwiXSk7XG5cbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMucmVnaXN0cnlbaV07XG5cbiAgICAgIGlmIChhdHRhY2hlZCAhPSBudWxsICYmIHNoZWV0LmF0dGFjaGVkICE9PSBhdHRhY2hlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzcykgY3NzICs9ICdcXG4nO1xuICAgICAgY3NzICs9IHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogXCJpbmRleFwiLFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoaWdoZXN0IGluZGV4IG51bWJlci5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCA/IDAgOiB0aGlzLnJlZ2lzdHJ5W3RoaXMucmVnaXN0cnkubGVuZ3RoIC0gMV0ub3B0aW9ucy5pbmRleDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cblxudmFyIHJlZ2lzdHJ5ID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xudmFyIGdldFByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHJlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmRlbGV0ZShwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gRE9NRXhjZXB0aW9uIFxcXCJcIiArIGVyci5tZXNzYWdlICsgXCJcXFwiIHdhcyB0aHJvd24uIFRyaWVkIHRvIHJlbW92ZSBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNlbGVjdG9yLlxuICovXG52YXIgc2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKiBXZSBhc3N1bWUgaXQgY2FuJ3QgYmUgbnVsbC5cbiAqL1xuXG5cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG59KTtcbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBub2RlIGJlZm9yZSB3aGljaCB3ZSBjYW4gaW5zZXJ0IHRoZSBzaGVldC5cbiAqL1xuZnVuY3Rpb24gZmluZFByZXZOb2RlKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ2lzdHJ5JDEgPSByZWdpc3RyeS5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkkMS5sZW5ndGggPiAwKSB7XG4gICAgLy8gVHJ5IHRvIGluc2VydCBiZWZvcmUgdGhlIG5leHQgaGlnaGVyIHNoZWV0LlxuICAgIHZhciBzaGVldCA9IGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnkkMSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIHRyeSB7XG4gICAgaWYgKCdpbnNlcnRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgIHZhciBjID0gY29udGFpbmVyO1xuICAgICAgYy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICB9IC8vIEtleWZyYW1lcyBydWxlLlxuICAgIGVsc2UgaWYgKCdhcHBlbmRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgICAgdmFyIF9jID0gY29udGFpbmVyO1xuXG4gICAgICAgIF9jLmFwcGVuZFJ1bGUocnVsZSk7XG4gICAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gXCIgKyBlcnIubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXggPSBmdW5jdGlvbiBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleChjb250YWluZXIsIGluZGV4KSB7XG4gIHZhciBtYXhJbmRleCA9IGNvbnRhaW5lci5jc3NSdWxlcy5sZW5ndGg7IC8vIEluIGNhc2UgcHJldmlvdXMgaW5zZXJ0aW9uIGZhaWxzLCBwYXNzZWQgaW5kZXggbWlnaHQgYmUgd3JvbmdcblxuICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA+IG1heEluZGV4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmV0dXJuIG1heEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICAvLyBXaWxsIGJlIGVtcHR5IGlmIGxpbms6IHRydWUgb3B0aW9uIGlzIG5vdCBzZXQsIGJlY2F1c2VcbiAgLy8gaXQgaXMgb25seSBmb3IgdXNlIHRvZ2V0aGVyIHdpdGggaW5zZXJ0UnVsZSBBUEkuXG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSByZWdpc3RyeS5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gbW9zdCBicm93c2VycyBjcmVhdGUgYSBuZXcgQ1NTU3R5bGVTaGVldCwgZXhjZXB0IG9mIGFsbCBJRXMuXG5cbiAgICB2YXIgZGVwbG95ZWQgPSBCb29sZWFuKHRoaXMuc2hlZXQgJiYgdGhpcy5zaGVldC5kZXBsb3llZCk7XG5cbiAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzICYmIGRlcGxveWVkKSB7XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpOyAvLyBJbiB0aGUgbW9zdCBicm93c2VycywgcnVsZXMgaW5zZXJ0ZWQgdXNpbmcgaW5zZXJ0UnVsZSgpIEFQSSB3aWxsIGJlIGxvc3Qgd2hlbiBzdHlsZSBlbGVtZW50IGlzIHJlbW92ZWQuXG4gICAgLy8gVGhvdWdoIElFIHdpbGwga2VlcCB0aGVtIGFuZCB3ZSBuZWVkIGEgY29uc2lzdGVudCBiZWhhdmlvci5cblxuICAgIGlmICh0aGlzLnNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5jc3NSdWxlcyA9IFtdO1xuICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gJ1xcbic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0O1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcblxuICAgIGlmIChzaGVldC5vcHRpb25zLmxpbmspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXFxuXCIgKyBzaGVldC50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IFJ1bGVMaXN0IGludG8gYW4gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhydWxlcywgbmF0aXZlUGFyZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5pbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGVzLmluZGV4W2ldLCBpLCBuYXRpdmVQYXJlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4LCBuYXRpdmVQYXJlbnQpIHtcbiAgICBpZiAobmF0aXZlUGFyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIG5hdGl2ZVBhcmVudCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgdmFyIHBhcmVudCA9IHJ1bGU7XG4gICAgICB2YXIgbGF0ZXN0TmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuXG4gICAgICBpZiAocnVsZS50eXBlID09PSAnY29uZGl0aW9uYWwnIHx8IHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgdmFyIF9pbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpOyAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG5cblxuICAgICAgICBsYXRlc3ROYXRpdmVQYXJlbnQgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHBhcmVudC50b1N0cmluZyh7XG4gICAgICAgICAgY2hpbGRyZW46IGZhbHNlXG4gICAgICAgIH0pLCBfaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIF9pbnNlcnRpb25JbmRleCwgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhwYXJlbnQucnVsZXMsIGxhdGVzdE5hdGl2ZVBhcmVudCk7XG4gICAgICByZXR1cm4gbGF0ZXN0TmF0aXZlUGFyZW50O1xuICAgIH1cblxuICAgIHZhciBydWxlU3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgIGlmICghcnVsZVN0cikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBpbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpO1xuXG4gICAgdmFyIG5hdGl2ZVJ1bGUgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHJ1bGVTdHIsIGluc2VydGlvbkluZGV4KTtcblxuICAgIGlmIChuYXRpdmVSdWxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG4gICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIGluc2VydGlvbkluZGV4LCBuYXRpdmVSdWxlKTtcbiAgICByZXR1cm4gbmF0aXZlUnVsZTtcbiAgfTtcblxuICBfcHJvdG8ucmVmQ3NzUnVsZSA9IGZ1bmN0aW9uIHJlZkNzc1J1bGUocnVsZSwgaW5kZXgsIGNzc1J1bGUpIHtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBjc3NSdWxlOyAvLyBXZSBvbmx5IHdhbnQgdG8gcmVmZXJlbmNlIHRoZSB0b3AgbGV2ZWwgcnVsZXMsIGRlbGV0ZVJ1bGUgQVBJIGRvZXNuJ3Qgc3VwcG9ydCByZW1vdmluZyBuZXN0ZWQgcnVsZXNcbiAgICAvLyBsaWtlIHJ1bGVzIGluc2lkZSBtZWRpYSBxdWVyaWVzIG9yIGtleWZyYW1lc1xuXG4gICAgaWYgKHJ1bGUub3B0aW9ucy5wYXJlbnQgaW5zdGFuY2VvZiBTdHlsZVNoZWV0KSB7XG4gICAgICB0aGlzLmNzc1J1bGVzW2luZGV4XSA9IGNzc1J1bGU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5jc3NSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgIHJldHVybiB0aGlzLmNzc1J1bGVzLmluZGV4T2YoY3NzUnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAqXG4gICAqIE9ubHkgdXNlZCBmb3Igc29tZSBvbGQgYnJvd3NlcnMgYmVjYXVzZSB0aGV5IGNhbid0IHNldCBhIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBsYWNlUnVsZSA9IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC41LjFcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gcmVnaXN0cnkuaW5kZXggPT09IDAgPyAwIDogcmVnaXN0cnkuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHJlZ2lzdHJ5LnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKiBbRGVwcmVjYXRlZF0gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBjcmVhdGVSdWxlJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVSdWxlKHVuZGVmaW5lZCwgbmFtZSwgc3R5bGUpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cblxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyXG4gICAgfSk7XG5cbiAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlSWQpIHJ1bGVPcHRpb25zLmdlbmVyYXRlSWQgPSB0aGlzLmdlbmVyYXRlSWQ7XG4gICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgaWYgKCFydWxlT3B0aW9ucy5rZXlmcmFtZXMpIHJ1bGVPcHRpb25zLmtleWZyYW1lcyA9IHt9O1xuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICBpZiAocnVsZSkgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIHN0eWxlcyBvYmplY3Qgd2l0aCBvbmx5IHByb3BzIHRoYXQgY29udGFpbiBmdW5jdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciB0byA9IG51bGw7XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcblxuICAgICAgaWYgKGV4dHJhY3RlZCkge1xuICAgICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgICB0b1trZXldID0gZXh0cmFjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c01hbmFnZXIoKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuc2hlZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5zaGVldDtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICBpZiAodGhpcy5zaGVldHMuaGFzKGtleSkpIHJldHVybjtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuc2hlZXRzLnNldChrZXksIHtcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIHJlZnM6IDBcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFuYWdlID0gZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkge1xuICAgICAgICBlbnRyeS5zaGVldC5hdHRhY2goKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkucmVmcysrO1xuICAgICAgcmV0dXJuIGVudHJ5LnNoZWV0O1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byBtYW5hZ2VcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8udW5tYW5hZ2UgPSBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPiAwKSB7XG4gICAgICAgIGVudHJ5LnJlZnMtLTtcbiAgICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIGVudHJ5LnNoZWV0LmRldGFjaCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgfVxuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbi8qKlxuICogQSBiZXR0ZXIgYWJzdHJhY3Rpb24gb3ZlciBDU1MuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIElzb25lbiAoU2xvYm9kc2tvaSkgLyBJc29uZW4gMjAxNC1wcmVzZW50XG4gKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3NcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogRXhwb3J0IGEgY29uc3RhbnQgaW5kaWNhdGluZyBpZiB0aGlzIGJyb3dzZXIgaGFzIENTU1RPTSBzdXBwb3J0LlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuICovXG52YXIgaGFzQ1NTVE9NU3VwcG9ydCA9IHR5cGVvZiBDU1MgPT09ICdvYmplY3QnICYmIENTUyAhPSBudWxsICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBqc3MgPSBjcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQganNzO1xuZXhwb3J0IHsgUnVsZUxpc3QsIFNoZWV0c01hbmFnZXIsIFNoZWV0c1JlZ2lzdHJ5LCBjcmVhdGUsIGNyZWF0ZUdlbmVyYXRlSWQsIGNyZWF0ZVJ1bGUsIGdldER5bmFtaWNTdHlsZXMsIGhhc0NTU1RPTVN1cHBvcnQsIHJlZ2lzdHJ5IGFzIHNoZWV0cywgdG9Dc3NWYWx1ZSB9O1xuIiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsImltcG9ydCBuZXN0ZWQgZnJvbSAnLi4vVGhlbWVQcm92aWRlci9uZXN0ZWQnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBsaXN0IG9mIHRoZSBzdHlsZSBydWxlIG5hbWUgd2UgdXNlIGFzIGRyb3AgaW4gcmVwbGFjZW1lbnQgZm9yIHRoZSBidWlsdC1pblxuICogcHNldWRvIGNsYXNzZXMgKDpjaGVja2VkLCA6ZGlzYWJsZWQsIDpmb2N1c2VkLCBldGMuKS5cbiAqXG4gKiBXaHkgZG8gdGhleSBleGlzdCBpbiB0aGUgZmlyc3QgcGxhY2U/XG4gKiBUaGVzZSBjbGFzc2VzIGFyZSB1c2VkIGF0IGEgc3BlY2lmaWNpdHkgb2YgMi5cbiAqIEl0IGFsbG93cyB0aGVtIHRvIG92ZXJyaWRlIHByZXZpb3VzbHkgZGVmaW5pZWQgc3R5bGVzIGFzIHdlbGwgYXNcbiAqIGJlaW5nIHVudG91Y2hlZCBieSBzaW1wbGUgdXNlciBvdmVycmlkZXMuXG4gKi9cblxudmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTsgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkZGlzYWJsZUdsb2JhID0gb3B0aW9ucy5kaXNhYmxlR2xvYmFsLFxuICAgICAgZGlzYWJsZUdsb2JhbCA9IF9vcHRpb25zJGRpc2FibGVHbG9iYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkaXNhYmxlR2xvYmEsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcixcbiAgICAgIF9vcHRpb25zJHNlZWQgPSBvcHRpb25zLnNlZWQsXG4gICAgICBzZWVkID0gX29wdGlvbnMkc2VlZCA9PT0gdm9pZCAwID8gJycgOiBfb3B0aW9ucyRzZWVkO1xuICB2YXIgc2VlZFByZWZpeCA9IHNlZWQgPT09ICcnID8gJycgOiBcIlwiLmNvbmNhdChzZWVkLCBcIi1cIik7XG4gIHZhciBydWxlQ291bnRlciA9IDA7XG5cbiAgdmFyIGdldE5leHRDb3VudGVySWQgPSBmdW5jdGlvbiBnZXROZXh0Q291bnRlcklkKCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJ1bGVDb3VudGVyID49IDFlMTApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBydWxlQ291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydWxlQ291bnRlcjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgbmFtZSA9IHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lOyAvLyBJcyBhIGdsb2JhbCBzdGF0aWMgTVVJIHN0eWxlP1xuXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiAhc3R5bGVTaGVldC5vcHRpb25zLmxpbmsgJiYgIWRpc2FibGVHbG9iYWwpIHtcbiAgICAgIC8vIFdlIGNhbiB1c2UgYSBzaG9ydGhhbmQgY2xhc3MgbmFtZSwgd2UgbmV2ZXIgdXNlIHRoZSBrZXlzIHRvIHN0eWxlIHRoZSBjb21wb25lbnRzLlxuICAgICAgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihydWxlLmtleSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIk11aS1cIi5jb25jYXQocnVsZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4ID0gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQub3B0aW9ucy50aGVtZVtuZXN0ZWRdIHx8IHNlZWQgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICB2YXIgc3VmZml4ID0gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTsgLy8gSGVscCB3aXRoIGRlYnVnZ2FiaWxpdHkuXG5cbiAgICBpZiAoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LCBcIi1cIikuY29uY2F0KHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdWZmaXgpO1xuICB9O1xufSIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIG5vdyA9IERhdGUubm93KCk7XG52YXIgZm5WYWx1ZXNOcyA9IFwiZm5WYWx1ZXNcIiArIG5vdztcbnZhciBmblJ1bGVOcyA9IFwiZm5TdHlsZVwiICsgKytub3c7XG5cbnZhciBmdW5jdGlvblBsdWdpbiA9IGZ1bmN0aW9uIGZ1bmN0aW9uUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICAvLyBFbXB0eSBvYmplY3Qgd2lsbCByZW1vdmUgYWxsIGN1cnJlbnRseSBkZWZpbmVkIHByb3BzXG4gICAgICAgIC8vIGluIGNhc2UgZnVuY3Rpb24gcnVsZSByZXR1cm5zIGEgZmFsc3kgdmFsdWUuXG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKSB8fCB7fTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVJ1bGUuc3R5bGVbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25QbHVnaW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBSdWxlTGlzdCB9IGZyb20gJ2pzcyc7XG5cbnZhciBhdCA9ICdAZ2xvYmFsJztcbnZhciBhdFByZWZpeCA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKHJ1bGUpIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm47XG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NHbG9iYWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaW4gXFxcIlwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgcHJldk9wdGlvbnMpIHtcbiAgICAvLyBPcHRpb25zIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCwgbm93IHdlIG9ubHkgaW5jcmVhc2UgaW5kZXguXG4gICAgaWYgKHByZXZPcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZPcHRpb25zLCB7XG4gICAgICBpbmRleDogcHJldk9wdGlvbnMuaW5kZXggKyAxIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgfSk7XG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHJ1bGUub3B0aW9ucywge1xuICAgICAgbmVzdGluZ0xldmVsOiBuZXN0aW5nTGV2ZWwsXG4gICAgICBpbmRleDogY29udGFpbmVyLmluZGV4T2YocnVsZSkgKyAxIC8vIFdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCBuYW1lIHRvIGJlIHNldCBvcHRpb25zIGZvciBjaGxpZC5cblxuICAgIH0pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpIC8vIEZsb3cgZXhwZWN0cyBtb3JlIG9wdGlvbnMgYnV0IHRoZXkgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgIC8vIEFuZCBmbG93IGRvZXNuJ3Qga25vdyB0aGlzIHdpbGwgYWx3YXlzIGJlIGEgU3R5bGVSdWxlIHdoaWNoIGhhcyB0aGUgYWRkUnVsZSBtZXRob2RcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzTmVzdGVkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICdoeXBoZW5hdGUtc3R5bGUtbmFtZSc7XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIHZhciBrZXkgPSBwcm9wLmluZGV4T2YoJy0tJykgPT09IDAgPyBwcm9wIDogaHlwaGVuYXRlKHByb3ApO1xuICAgIGNvbnZlcnRlZFtrZXldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wLmluZGV4T2YoJy0tJykgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSBoeXBoZW5hdGUocHJvcCk7IC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG5cbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTsgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgeyBoYXNDU1NUT01TdXBwb3J0IH0gZnJvbSAnanNzJztcblxudmFyIHB4ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MubXMgOiAnbXMnO1xudmFyIHBlcmNlbnQgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5wZXJjZW50IDogJyUnO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLXBsdWdpbi1kZWZhdWx0LXVuaXQgQ1NTIHByb3BlcnR5IHVuaXRzXG4gKlxuICogQHR5cGUgb2JqZWN0XG4gKi9cblxudmFyIGRlZmF1bHRVbml0cyA9IHtcbiAgLy8gQW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgJ2FuaW1hdGlvbi1kZWxheSc6IG1zLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEJhY2tncm91bmQgcHJvcGVydGllc1xuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiBweCxcbiAgJ2JhY2tncm91bmQtc2l6ZSc6IHB4LFxuICAvLyBCb3JkZXIgUHJvcGVydGllc1xuICBib3JkZXI6IHB4LFxuICAnYm9yZGVyLWJvdHRvbSc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiBweCxcbiAgJ2JvcmRlci1sZWZ0JzogcHgsXG4gICdib3JkZXItbGVmdC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0JzogcHgsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci10b3AnOiBweCxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXdpZHRoJzogcHgsXG4gICdib3JkZXItd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jayc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZSc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0JzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXdpZHRoJzogcHgsXG4gICdib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItc3RhcnQtZW5kLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtZW5kLXJhZGl1cyc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrJzogcHgsXG4gICdtYXJnaW4tYmxvY2stZW5kJzogcHgsXG4gICdtYXJnaW4tYmxvY2stc3RhcnQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtZW5kJzogcHgsXG4gICdtYXJnaW4taW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLWVuZCc6IHB4LFxuICAncGFkZGluZy1ibG9jay1zdGFydCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLWVuZCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gTWFzayBwcm9wZXJ0aWVzXG4gICdtYXNrLXBvc2l0aW9uLXgnOiBweCxcbiAgJ21hc2stcG9zaXRpb24teSc6IHB4LFxuICAnbWFzay1zaXplJzogcHgsXG4gIC8vIFdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICBoZWlnaHQ6IHB4LFxuICB3aWR0aDogcHgsXG4gICdtaW4taGVpZ2h0JzogcHgsXG4gICdtYXgtaGVpZ2h0JzogcHgsXG4gICdtaW4td2lkdGgnOiBweCxcbiAgJ21heC13aWR0aCc6IHB4LFxuICAvLyBQb3NpdGlvbiBwcm9wZXJ0aWVzXG4gIGJvdHRvbTogcHgsXG4gIGxlZnQ6IHB4LFxuICB0b3A6IHB4LFxuICByaWdodDogcHgsXG4gIGluc2V0OiBweCxcbiAgJ2luc2V0LWJsb2NrJzogcHgsXG4gICdpbnNldC1ibG9jay1lbmQnOiBweCxcbiAgJ2luc2V0LWJsb2NrLXN0YXJ0JzogcHgsXG4gICdpbnNldC1pbmxpbmUnOiBweCxcbiAgJ2luc2V0LWlubGluZS1lbmQnOiBweCxcbiAgJ2luc2V0LWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIGdhcDogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdyb3ctZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07IC8vIEFkZCB0aGUgdW5pdCBpZiBhdmFpbGFibGUsIGV4Y2VwdCBmb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiAwcHguXG5cbiAgICBpZiAodW5pdCAmJiAhKHZhbHVlID09PSAwICYmIHVuaXQgPT09IHB4KSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCJpbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcblxuLy8gRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG52YXIganMgPSAnJztcbnZhciBjc3MgPSAnJztcbnZhciB2ZW5kb3IgPSAnJztcbnZhciBicm93c2VyID0gJyc7XG52YXIgaXNUb3VjaCA9IGlzSW5Ccm93c2VyICYmICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgLy8gT3JkZXIgbWF0dGVycy4gV2UgbmVlZCB0byBjaGVjayBXZWJraXQgdGhlIGxhc3Qgb25lIGJlY2F1c2VcbiAgLy8gb3RoZXIgdmVuZG9ycyB1c2UgdG8gYWRkIFdlYmtpdCBwcmVmaXhlcyB0byBzb21lIHByb3BlcnRpZXNcbiAgdmFyIGpzQ3NzTWFwID0ge1xuICAgIE1vejogJy1tb3otJyxcbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuXG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcblxuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcblxuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGpzID0ga2V5O1xuICAgICAgY3NzID0ganNDc3NNYXBba2V5XTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBFZGdlIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICdtc0h5cGhlbnMnIGluIHN0eWxlKSB7XG4gICAganMgPSAnbXMnO1xuICAgIGNzcyA9IGpzQ3NzTWFwLm1zO1xuICAgIGJyb3dzZXIgPSAnZWRnZSc7XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgU2FmYXJpIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICctYXBwbGUtdHJhaWxpbmctd29yZCcgaW4gc3R5bGUpIHtcbiAgICB2ZW5kb3IgPSAnYXBwbGUnO1xuICB9XG59XG4vKipcbiAqIFZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEB0eXBlIHt7anM6IFN0cmluZywgY3NzOiBTdHJpbmcsIHZlbmRvcjogU3RyaW5nLCBicm93c2VyOiBTdHJpbmd9fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbnZhciBwcmVmaXggPSB7XG4gIGpzOiBqcyxcbiAgY3NzOiBjc3MsXG4gIHZlbmRvcjogdmVuZG9yLFxuICBicm93c2VyOiBicm93c2VyLFxuICBpc1RvdWNoOiBpc1RvdWNoXG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYSBrZXlmcmFtZSBhdC1ydWxlIHNob3VsZCBiZSBwcmVmaXhlZCBvciBub3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZEtleWZyYW1lcyhrZXkpIHtcbiAgLy8gS2V5ZnJhbWVzIGlzIGFscmVhZHkgcHJlZml4ZWQuIGUuZy4ga2V5ID0gJ0Atd2Via2l0LWtleWZyYW1lcyBhJ1xuICBpZiAoa2V5WzFdID09PSAnLScpIHJldHVybiBrZXk7IC8vIE5vIG5lZWQgdG8gcHJlZml4IElFL0VkZ2UuIE9sZGVyIGJyb3dzZXJzIHdpbGwgaWdub3JlIHVuc3VwcG9ydGVkIHJ1bGVzLlxuICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9a2V5ZnJhbWVzXG5cbiAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIGtleTtcbiAgcmV0dXJuIFwiQFwiICsgcHJlZml4LmNzcyArIFwia2V5ZnJhbWVzXCIgKyBrZXkuc3Vic3RyKDEwKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWFwcGVhcmFuY2VcblxudmFyIGFwcGVhcmVuY2UgPSB7XG4gIG5vUHJlZmlsbDogWydhcHBlYXJhbmNlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdhcHBlYXJhbmNlJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNvbG9yLWFkanVzdFxuXG52YXIgY29sb3JBZGp1c3QgPSB7XG4gIG5vUHJlZmlsbDogWydjb2xvci1hZGp1c3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2NvbG9yLWFkanVzdCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JykgcmV0dXJuIHByZWZpeC5jc3MgKyBcInByaW50LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuLyoqXG4gKiBSZXBsYWNlcyB0aGUgbGV0dGVyIHdpdGggdGhlIGNhcGl0YWwgbGV0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gY1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwtY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIHBhc2NhbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXNjYWxpemUoc3RyKSB7XG4gIHJldHVybiBjYW1lbGl6ZShcIi1cIiArIHN0cik7XG59XG5cbi8vIGJ1dCB3ZSBjYW4gdXNlIGEgbG9uZ2hhbmQgcHJvcGVydHkgaW5zdGVhZC5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tYXNrXG5cbnZhciBtYXNrID0ge1xuICBub1ByZWZpbGw6IFsnbWFzayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9ebWFzay8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBsb25naGFuZCA9ICdtYXNrLWltYWdlJztcblxuICAgICAgaWYgKGNhbWVsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dGV4dC1vcmllbnRhdGlvblxuXG52YXIgdGV4dE9yaWVudGF0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndGV4dC1vcmllbnRhdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndGV4dC1vcmllbnRhdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnICYmICFwcmVmaXguaXNUb3VjaCkge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNmb3JtXG5cbnZhciB0cmFuc2Zvcm0gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2Zvcm0nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2Zvcm0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2l0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNpdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXdyaXRpbmctbW9kZVxuXG52YXIgd3JpdGluZ01vZGUgPSB7XG4gIG5vUHJlZmlsbDogWyd3cml0aW5nLW1vZGUnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3dyaXRpbmctbW9kZScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ21zJyAmJiBwcmVmaXguYnJvd3NlciAhPT0gJ2VkZ2UnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD11c2VyLXNlbGVjdFxuXG52YXIgdXNlclNlbGVjdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ3VzZXItc2VsZWN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd1c2VyLXNlbGVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onIHx8IHByZWZpeC5qcyA9PT0gJ21zJyB8fCBwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApOyAvLyBSZXR1cm4gY3VzdG9tIENTUyB2YXJpYWJsZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScpIHJldHVybiBwcm9wOyAvLyBSZXR1cm4gYWxyZWFkeSBwcmVmaXhlZCB2YWx1ZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScgJiYgcHJvcFsxXSA9PT0gJy0nKSByZXR1cm4gcHJvcDtcbiAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wOyAvLyBUcnkgd2Via2l0IGZhbGxiYWNrLlxuXG4gICAgaWYgKHByZWZpeC5qcyAhPT0gJ1dlYmtpdCcgJiYgXCJXZWJraXRcIiArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNjcm9sbC1zbmFwXG5cbnZhciBzY3JvbGxTbmFwID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wLnN1YnN0cmluZygwLCAxMSkgIT09ICdzY3JvbGwtc25hcCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBcIlwiICsgcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1vdmVyc2Nyb2xsLWJlaGF2aW9yXG5cbnZhciBvdmVyc2Nyb2xsQmVoYXZpb3IgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdvdmVyc2Nyb2xsLWJlaGF2aW9yJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBcInNjcm9sbC1jaGFpbmluZ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCA9IHtcbiAgJ2ZsZXgtZ3Jvdyc6ICdmbGV4LXBvc2l0aXZlJyxcbiAgJ2ZsZXgtc2hyaW5rJzogJ2ZsZXgtbmVnYXRpdmUnLFxuICAnZmxleC1iYXNpcyc6ICdmbGV4LXByZWZlcnJlZC1zaXplJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdmbGV4LXBhY2snLFxuICBvcmRlcjogJ2ZsZXgtb3JkZXInLFxuICAnYWxpZ24taXRlbXMnOiAnZmxleC1hbGlnbicsXG4gICdhbGlnbi1jb250ZW50JzogJ2ZsZXgtbGluZS1wYWNrJyAvLyAnYWxpZ24tc2VsZicgaXMgaGFuZGxlZCBieSAnYWxpZ24tc2VsZicgcGx1Z2luLlxuXG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDEyLlxuXG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcFtwcm9wXTtcbiAgICBpZiAoIW5ld1Byb3ApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByb3BNYXAkMSA9IHtcbiAgZmxleDogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZ3Jvdyc6ICdib3gtZmxleCcsXG4gICdmbGV4LWRpcmVjdGlvbic6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gIG9yZGVyOiAnYm94LW9yZGluYWwtZ3JvdXAnLFxuICAnYWxpZ24taXRlbXMnOiAnYm94LWFsaWduJyxcbiAgJ2ZsZXgtZmxvdyc6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnYm94LXBhY2snXG59O1xudmFyIHByb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcE1hcCQxKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgdXNlclNlbGVjdCwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICd2YXInKSByZXR1cm4gJ3Zhcic7XG4gIGlmIChwMSA9PT0gJ2FsbCcpIHJldHVybiAnYWxsJztcbiAgaWYgKHAyID09PSAnYWxsJykgcmV0dXJuICcsIGFsbCc7XG4gIHZhciBwcmVmaXhlZFZhbHVlID0gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG4gIGlmICghcHJlZml4ZWRWYWx1ZSkgcmV0dXJuIHAxIHx8IHAyO1xuICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbn1cblxuaWYgKGlzSW5Ccm93c2VyKSBlbCQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIGlmIG5lZWRlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgdmFyIHByZWZpeGVkVmFsdWUgPSB2YWx1ZTtcbiAgaWYgKCFlbCQxIHx8IHByb3BlcnR5ID09PSAnY29udGVudCcpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkVmFsdWUsIHN1cHBvcnRlZFByb3BlcnR5IH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJDEgJiYgc3VwcG9ydGVkVmFsdWUkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQganNzUHJlc2V0IGZyb20gJy4uL2pzc1ByZXNldCc7IC8vIERlZmF1bHQgSlNTIGluc3RhbmNlLlxuXG52YXIganNzID0gY3JlYXRlKGpzc1ByZXNldCgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG5leHBvcnQgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpc2FibGVHZW5lcmF0aW9uOiBmYWxzZSxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICBqc3M6IGpzcyxcbiAgc2hlZXRzQ2FjaGU6IG51bGwsXG4gIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gIHNoZWV0c1JlZ2lzdHJ5OiBudWxsXG59O1xuZXhwb3J0IHZhciBTdHlsZXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0T3B0aW9ucyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0eWxlc0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU3R5bGVzQ29udGV4dCc7XG59XG5cbnZhciBpbmplY3RGaXJzdE5vZGU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZXNQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRpbmplY3RGaXJzdCA9IHByb3BzLmluamVjdEZpcnN0LFxuICAgICAgaW5qZWN0Rmlyc3QgPSBfcHJvcHMkaW5qZWN0Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluamVjdEZpcnN0LFxuICAgICAgX3Byb3BzJGRpc2FibGVHZW5lcmF0ID0gcHJvcHMuZGlzYWJsZUdlbmVyYXRpb24sXG4gICAgICBkaXNhYmxlR2VuZXJhdGlvbiA9IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUdlbmVyYXQsXG4gICAgICBsb2NhbE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5qZWN0Rmlyc3RcIiwgXCJkaXNhYmxlR2VuZXJhdGlvblwiXSk7XG5cbiAgdmFyIG91dGVyT3B0aW9ucyA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCk7XG5cbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgb3V0ZXJPcHRpb25zLCB7XG4gICAgZGlzYWJsZUdlbmVyYXRpb246IGRpc2FibGVHZW5lcmF0aW9uXG4gIH0sIGxvY2FsT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgIWNvbnRleHQuc2hlZXRzTWFuYWdlcikge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgU2VydmVyU3R5bGVTaGVldHMgQVBJIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIGEgY3VzdG9tIGluc2VydGlvblBvaW50IGFuZCA8U3R5bGVzQ29udGV4dCBpbmplY3RGaXJzdD4gYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmplY3RGaXJzdCAmJiBsb2NhbE9wdGlvbnMuanNzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgdGhlIGpzcyBhbmQgaW5qZWN0Rmlyc3QgcHJvcHMgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWluamVjdEZpcnN0Tm9kZSkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgaW5qZWN0Rmlyc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnbXVpLWluamVjdC1maXJzdCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoaW5qZWN0Rmlyc3ROb2RlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGNvbnRleHQuanNzID0gY3JlYXRlKHtcbiAgICAgIHBsdWdpbnM6IGpzc1ByZXNldCgpLnBsdWdpbnMsXG4gICAgICBpbnNlcnRpb25Qb2ludDogaW5qZWN0Rmlyc3ROb2RlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn0iLCJpbXBvcnQgZnVuY3Rpb25zIGZyb20gJ2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbic7XG5pbXBvcnQgZ2xvYmFsIGZyb20gJ2pzcy1wbHVnaW4tZ2xvYmFsJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnanNzLXBsdWdpbi1uZXN0ZWQnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdqc3MtcGx1Z2luLWNhbWVsLWNhc2UnO1xuaW1wb3J0IGRlZmF1bHRVbml0IGZyb20gJ2pzcy1wbHVnaW4tZGVmYXVsdC11bml0JztcbmltcG9ydCB2ZW5kb3JQcmVmaXhlciBmcm9tICdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcic7XG5pbXBvcnQgcHJvcHNTb3J0IGZyb20gJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCc7IC8vIFN1YnNldCBvZiBqc3MtcHJlc2V0LWRlZmF1bHQgd2l0aCBvbmx5IHRoZSBwbHVnaW5zIHRoZSBNYXRlcmlhbC1VSSBjb21wb25lbnRzIGFyZSB1c2luZy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtmdW5jdGlvbnMoKSwgZ2xvYmFsKCksIG5lc3RlZCgpLCBjYW1lbENhc2UoKSwgZGVmYXVsdFVuaXQoKSwgLy8gRGlzYWJsZSB0aGUgdmVuZG9yIHByZWZpeGVyIHNlcnZlci1zaWRlLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAgLy8gVGhpcyB3YXksIHdlIGNhbiBnZXQgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAvLyBJbiB0aGUgZG9jdW1lbnRhdGlvbiwgd2UgYXJlIHVzaW5nIGBhdXRvcHJlZml4ZXJgIHRvIHNvbHZlIHRoaXMgcHJvYmxlbS5cbiAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2ZW5kb3JQcmVmaXhlcigpLCBwcm9wc1NvcnQoKV1cbiAgfTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG5cbiAgcmV0dXJuIHVzZVN0eWxlcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgIGNsb25lOiB0cnVlXG4gIH07XG4gIHZhciBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtYXRlcmlhbC11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgdmFyIHVybCA9ICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuICdNaW5pZmllZCBNYXRlcmlhbC1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJoMXtjb2xvcjphcXVhfWhlYWRlcnstd2Via2l0LWFwcC1yZWdpb246ZHJhZ31idXR0b257LXdlYmtpdC1hcHAtcmVnaW9uOm5vLWRyYWd9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2pzL2luZGV4LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsR0FDRSxVQUFBLENBR0YsT0FDRSx1QkFBQSxDQUdGLE9BQ0UsMEJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaDEge1xcbiAgY29sb3I6IGN5YW47XFxufVxcblxcbmhlYWRlciB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxufVxcblxcbmJ1dHRvbiB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IG5vLWRyYWc7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPTYwMTAzLGM9NjAxMDYsZD02MDEwNyxlPTYwMTA4LGY9NjAxMTQsZz02MDEwOSxoPTYwMTEwLGs9NjAxMTIsbD02MDExMyxtPTYwMTIwLG49NjAxMTUscD02MDExNixxPTYwMTIxLHI9NjAxMjIsdT02MDExNyx2PTYwMTI5LHc9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgeD1TeW1ib2wuZm9yO2I9eChcInJlYWN0LmVsZW1lbnRcIik7Yz14KFwicmVhY3QucG9ydGFsXCIpO2Q9eChcInJlYWN0LmZyYWdtZW50XCIpO2U9eChcInJlYWN0LnN0cmljdF9tb2RlXCIpO2Y9eChcInJlYWN0LnByb2ZpbGVyXCIpO2c9eChcInJlYWN0LnByb3ZpZGVyXCIpO2g9eChcInJlYWN0LmNvbnRleHRcIik7az14KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7bD14KFwicmVhY3Quc3VzcGVuc2VcIik7bT14KFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtuPXgoXCJyZWFjdC5tZW1vXCIpO3A9eChcInJlYWN0LmxhenlcIik7cT14KFwicmVhY3QuYmxvY2tcIik7cj14KFwicmVhY3Quc2VydmVyLmJsb2NrXCIpO3U9eChcInJlYWN0LmZ1bmRhbWVudGFsXCIpO3Y9eChcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7dz14KFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbmZ1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHQ9YS4kJHR5cGVvZjtzd2l0Y2godCl7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIGw6Y2FzZSBtOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGg6Y2FzZSBrOmNhc2UgcDpjYXNlIG46Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHR9fWNhc2UgYzpyZXR1cm4gdH19fXZhciB6PWcsQT1iLEI9ayxDPWQsRD1wLEU9bixGPWMsRz1mLEg9ZSxJPWw7ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj16O2V4cG9ydHMuRWxlbWVudD1BO2V4cG9ydHMuRm9yd2FyZFJlZj1CO2V4cG9ydHMuRnJhZ21lbnQ9QztleHBvcnRzLkxhenk9RDtleHBvcnRzLk1lbW89RTtleHBvcnRzLlBvcnRhbD1GO2V4cG9ydHMuUHJvZmlsZXI9RztleHBvcnRzLlN0cmljdE1vZGU9SDtcbmV4cG9ydHMuU3VzcGVuc2U9STtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWx9O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PXZ8fGE9PT1lfHxhPT09bHx8YT09PW18fGE9PT13fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09dXx8YS4kJHR5cGVvZj09PXF8fGFbMF09PT1yKT8hMDohMX07XG5leHBvcnRzLnR5cGVPZj15O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLyohXG4gKiB3YXZlc3VyZmVyLmpzIDQuNS4wICgyMDIxLTAyLTE0KVxuICogaHR0cHM6Ly93YXZlc3VyZmVyLWpzLm9yZ1xuICogQGxpY2Vuc2UgQlNELTMtQ2xhdXNlXG4gKi9cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiV2F2ZVN1cmZlclwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJXYXZlU3VyZmVyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIldhdmVTdXJmZXJcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL3NyYy9kcmF3ZXIuY2FudmFzZW50cnkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2RyYXdlci5jYW52YXNlbnRyeS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbC9zdHlsZSAqLyBcIi4vc3JjL3V0aWwvc3R5bGUuanNcIikpO1xuXG52YXIgX2dldElkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWwvZ2V0LWlkICovIFwiLi9zcmMvdXRpbC9nZXQtaWQuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxuICogVGhlIGBDYW52YXNFbnRyeWAgY2xhc3MgcmVwcmVzZW50cyBhbiBlbGVtZW50IGNvbnNpc3Rpbmcgb2YgYSB3YXZlIGBjYW52YXNgXG4gKiBhbmQgYW4gKG9wdGlvbmFsKSBwcm9ncmVzcyB3YXZlIGBjYW52YXNgLlxuICpcbiAqIFRoZSBgTXVsdGlDYW52YXNgIHJlbmRlcmVyIHVzZXMgb25lIG9yIG1vcmUgYENhbnZhc0VudHJ5YCBpbnN0YW5jZXMgdG9cbiAqIHJlbmRlciBhIHdhdmVmb3JtLCBkZXBlbmRpbmcgb24gdGhlIHpvb20gbGV2ZWwuXG4gKi9cbnZhciBDYW52YXNFbnRyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhbnZhc0VudHJ5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYW52YXNFbnRyeSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2F2ZSBub2RlXG4gICAgICpcbiAgICAgKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy53YXZlID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBUaGUgd2F2ZSBjYW52YXMgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG5cbiAgICB0aGlzLndhdmVDdHggPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSAob3B0aW9uYWwpIHByb2dyZXNzIHdhdmUgbm9kZVxuICAgICAqXG4gICAgICogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fVxuICAgICAqL1xuXG4gICAgdGhpcy5wcm9ncmVzcyA9IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhlIChvcHRpb25hbCkgcHJvZ3Jlc3Mgd2F2ZSBjYW52YXMgcmVuZGVyaW5nIGNvbnRleHRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG5cbiAgICB0aGlzLnByb2dyZXNzQ3R4ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBTdGFydCBvZiB0aGUgYXJlYSB0aGUgY2FudmFzIHNob3VsZCByZW5kZXIsIGJldHdlZW4gMCBhbmQgMVxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICAgIHRoaXMuc3RhcnQgPSAwO1xuICAgIC8qKlxuICAgICAqIEVuZCBvZiB0aGUgYXJlYSB0aGUgY2FudmFzIHNob3VsZCByZW5kZXIsIGJldHdlZW4gMCBhbmQgMVxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICAgIHRoaXMuZW5kID0gMTtcbiAgICAvKipcbiAgICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBlbnRyeVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICAgIHRoaXMuaWQgPSAoMCwgX2dldElkLmRlZmF1bHQpKHR5cGVvZiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgIT09ICd1bmRlZmluZWQnID8gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKCkgKyAnXycgOiAnY2FudmFzZW50cnlfJyk7XG4gICAgLyoqXG4gICAgICogQ2FudmFzIDJkIGNvbnRleHQgYXR0cmlidXRlc1xuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKi9cblxuICAgIHRoaXMuY2FudmFzQ29udGV4dEF0dHJpYnV0ZXMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogU3RvcmUgdGhlIHdhdmUgY2FudmFzIGVsZW1lbnQgYW5kIGNyZWF0ZSB0aGUgMkQgcmVuZGVyaW5nIGNvbnRleHRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gZWxlbWVudCBUaGUgd2F2ZSBgY2FudmFzYCBlbGVtZW50LlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhDYW52YXNFbnRyeSwgW3tcbiAgICBrZXk6IFwiaW5pdFdhdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFdhdmUoZWxlbWVudCkge1xuICAgICAgdGhpcy53YXZlID0gZWxlbWVudDtcbiAgICAgIHRoaXMud2F2ZUN0eCA9IHRoaXMud2F2ZS5nZXRDb250ZXh0KCcyZCcsIHRoaXMuY2FudmFzQ29udGV4dEF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9yZSB0aGUgcHJvZ3Jlc3Mgd2F2ZSBjYW52YXMgZWxlbWVudCBhbmQgY3JlYXRlIHRoZSAyRCByZW5kZXJpbmdcbiAgICAgKiBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBlbGVtZW50IFRoZSBwcm9ncmVzcyB3YXZlIGBjYW52YXNgIGVsZW1lbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbml0UHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFByb2dyZXNzKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MgPSBlbGVtZW50O1xuICAgICAgdGhpcy5wcm9ncmVzc0N0eCA9IHRoaXMucHJvZ3Jlc3MuZ2V0Q29udGV4dCgnMmQnLCB0aGlzLmNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBkaW1lbnNpb25zXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZWxlbWVudFdpZHRoIFdpZHRoIG9mIHRoZSBlbnRyeVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFdpZHRoIFRvdGFsIHdpZHRoIG9mIHRoZSBtdWx0aSBjYW52YXMgcmVuZGVyZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggVGhlIG5ldyB3aWR0aCBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVGhlIG5ldyBoZWlnaHQgb2YgdGhlIGVsZW1lbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZURpbWVuc2lvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRGltZW5zaW9ucyhlbGVtZW50V2lkdGgsIHRvdGFsV2lkdGgsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIC8vIHdoZXJlIHRoZSBjYW52YXMgc3RhcnRzIGFuZCBlbmRzIGluIHRoZSB3YXZlZm9ybSwgcmVwcmVzZW50ZWQgYXMgYVxuICAgICAgLy8gZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLndhdmUub2Zmc2V0TGVmdCAvIHRvdGFsV2lkdGggfHwgMDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5zdGFydCArIGVsZW1lbnRXaWR0aCAvIHRvdGFsV2lkdGg7IC8vIHNldCB3YXZlIGNhbnZhcyBkaW1lbnNpb25zXG5cbiAgICAgIHRoaXMud2F2ZS53aWR0aCA9IHdpZHRoO1xuICAgICAgdGhpcy53YXZlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIHZhciBlbGVtZW50U2l6ZSA9IHtcbiAgICAgICAgd2lkdGg6IGVsZW1lbnRXaWR0aCArICdweCdcbiAgICAgIH07XG4gICAgICAoMCwgX3N0eWxlLmRlZmF1bHQpKHRoaXMud2F2ZSwgZWxlbWVudFNpemUpO1xuXG4gICAgICBpZiAodGhpcy5oYXNQcm9ncmVzc0NhbnZhcykge1xuICAgICAgICAvLyBzZXQgcHJvZ3Jlc3MgY2FudmFzIGRpbWVuc2lvbnNcbiAgICAgICAgdGhpcy5wcm9ncmVzcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnByb2dyZXNzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgKDAsIF9zdHlsZS5kZWZhdWx0KSh0aGlzLnByb2dyZXNzLCBlbGVtZW50U2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSB3YXZlIGFuZCBwcm9ncmVzcyByZW5kZXJpbmcgY29udGV4dHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyV2F2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcldhdmUoKSB7XG4gICAgICAvLyB3YXZlXG4gICAgICB0aGlzLndhdmVDdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2F2ZUN0eC5jYW52YXMud2lkdGgsIHRoaXMud2F2ZUN0eC5jYW52YXMuaGVpZ2h0KTsgLy8gcHJvZ3Jlc3NcblxuICAgICAgaWYgKHRoaXMuaGFzUHJvZ3Jlc3NDYW52YXMpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzc0N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5wcm9ncmVzc0N0eC5jYW52YXMud2lkdGgsIHRoaXMucHJvZ3Jlc3NDdHguY2FudmFzLmhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZmlsbCBzdHlsZXMgZm9yIHdhdmUgYW5kIHByb2dyZXNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2F2ZUNvbG9yIEZpbGwgY29sb3IgZm9yIHRoZSB3YXZlIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gcHJvZ3Jlc3NDb2xvciBGaWxsIGNvbG9yIGZvciB0aGUgcHJvZ3Jlc3MgY2FudmFzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRGaWxsU3R5bGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxTdHlsZXMod2F2ZUNvbG9yLCBwcm9ncmVzc0NvbG9yKSB7XG4gICAgICB0aGlzLndhdmVDdHguZmlsbFN0eWxlID0gd2F2ZUNvbG9yO1xuXG4gICAgICBpZiAodGhpcy5oYXNQcm9ncmVzc0NhbnZhcykge1xuICAgICAgICB0aGlzLnByb2dyZXNzQ3R4LmZpbGxTdHlsZSA9IHByb2dyZXNzQ29sb3I7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYXcgYSByZWN0YW5nbGUgZm9yIHdhdmUgYW5kIHByb2dyZXNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBYIHN0YXJ0IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgWSBzdGFydCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgUmFkaXVzIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZpbGxSZWN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsUmVjdHMoeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG4gICAgICB0aGlzLmZpbGxSZWN0VG9Db250ZXh0KHRoaXMud2F2ZUN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKTtcblxuICAgICAgaWYgKHRoaXMuaGFzUHJvZ3Jlc3NDYW52YXMpIHtcbiAgICAgICAgdGhpcy5maWxsUmVjdFRvQ29udGV4dCh0aGlzLnByb2dyZXNzQ3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEcmF3IHRoZSBhY3R1YWwgcmVjdGFuZ2xlIG9uIGEgYGNhbnZhc2AgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBSZW5kZXJpbmcgY29udGV4dCBvZiB0YXJnZXQgY2FudmFzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggWCBzdGFydCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IFkgc3RhcnQgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIFJhZGl1cyBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJmaWxsUmVjdFRvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsUmVjdFRvQ29udGV4dChjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgIHRoaXMuZHJhd1JvdW5kZWRSZWN0KGN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJhdyBhIHJvdW5kZWQgcmVjdGFuZ2xlIG9uIENhbnZhc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDYW52YXMgY29udGV4dFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IFgtcG9zaXRpb24gb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5IFktcG9zaXRpb24gb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgUmFkaXVzIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQGV4YW1wbGUgZHJhd1JvdW5kZWRSZWN0KGN0eCwgNTAsIDUwLCA1LCAxMCwgMylcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdSb3VuZGVkUmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3Um91bmRlZFJlY3QoY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgICAgIGlmIChoZWlnaHQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwZWFrcyBhcmUgZmxvYXQgdmFsdWVzIGZyb20gLTEgdG8gMS4gVXNlIGFic29sdXRlIGhlaWdodCB2YWx1ZXMgaW5cbiAgICAgIC8vIG9yZGVyIHRvIGNvcnJlY3RseSBjYWxjdWxhdGUgcm91bmRlZCByZWN0YW5nbGUgY29vcmRpbmF0ZXNcblxuXG4gICAgICBpZiAoaGVpZ2h0IDwgMCkge1xuICAgICAgICBoZWlnaHQgKj0gLTE7XG4gICAgICAgIHkgLT0gaGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMsIHkpO1xuICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByYWRpdXMpO1xuICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByYWRpdXMsIHkgKyBoZWlnaHQpO1xuICAgICAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5ICsgaGVpZ2h0KTtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyByYWRpdXMsIHkpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBhY3R1YWwgd2F2ZSBhbmQgcHJvZ3Jlc3MgbGluZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IHBlYWtzIEFycmF5IHdpdGggcGVha3MgZGF0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhYnNtYXggTWF4aW11bSBwZWFrIHZhbHVlIChhYnNvbHV0ZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGFsZkggSGFsZiB0aGUgaGVpZ2h0IG9mIHRoZSB3YXZlZm9ybVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRZIE9mZnNldCB0byB0aGUgdG9wXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSB4LW9mZnNldCBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcmVhIHRoYXRcbiAgICAgKiBzaG91bGQgYmUgcmVuZGVyZWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSB4LW9mZnNldCBvZiB0aGUgZW5kIG9mIHRoZSBhcmVhIHRoYXRcbiAgICAgKiBzaG91bGQgYmUgcmVuZGVyZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdMaW5lc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3TGluZXMocGVha3MsIGFic21heCwgaGFsZkgsIG9mZnNldFksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHRoaXMuZHJhd0xpbmVUb0NvbnRleHQodGhpcy53YXZlQ3R4LCBwZWFrcywgYWJzbWF4LCBoYWxmSCwgb2Zmc2V0WSwgc3RhcnQsIGVuZCk7XG5cbiAgICAgIGlmICh0aGlzLmhhc1Byb2dyZXNzQ2FudmFzKSB7XG4gICAgICAgIHRoaXMuZHJhd0xpbmVUb0NvbnRleHQodGhpcy5wcm9ncmVzc0N0eCwgcGVha3MsIGFic21heCwgaGFsZkgsIG9mZnNldFksIHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdGhlIGFjdHVhbCB3YXZlZm9ybSBsaW5lIG9uIGEgYGNhbnZhc2AgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBSZW5kZXJpbmcgY29udGV4dCBvZiB0YXJnZXQgY2FudmFzXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gcGVha3MgQXJyYXkgd2l0aCBwZWFrcyBkYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFic21heCBNYXhpbXVtIHBlYWsgdmFsdWUgKGFic29sdXRlKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmSCBIYWxmIHRoZSBoZWlnaHQgb2YgdGhlIHdhdmVmb3JtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFkgT2Zmc2V0IHRvIHRoZSB0b3BcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBlbmQgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZHJhd0xpbmVUb0NvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0xpbmVUb0NvbnRleHQoY3R4LCBwZWFrcywgYWJzbWF4LCBoYWxmSCwgb2Zmc2V0WSwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuZ3RoID0gcGVha3MubGVuZ3RoIC8gMjtcbiAgICAgIHZhciBmaXJzdCA9IE1hdGgucm91bmQobGVuZ3RoICogdGhpcy5zdGFydCk7IC8vIHVzZSBvbmUgbW9yZSBwZWFrIHZhbHVlIHRvIG1ha2Ugc3VyZSB3ZSBqb2luIHBlYWtzIGF0IGVuZHMgLS0gdW5sZXNzLFxuICAgICAgLy8gb2YgY291cnNlLCB0aGlzIGlzIHRoZSBsYXN0IGNhbnZhc1xuXG4gICAgICB2YXIgbGFzdCA9IE1hdGgucm91bmQobGVuZ3RoICogdGhpcy5lbmQpICsgMTtcbiAgICAgIHZhciBjYW52YXNTdGFydCA9IGZpcnN0O1xuICAgICAgdmFyIGNhbnZhc0VuZCA9IGxhc3Q7XG4gICAgICB2YXIgc2NhbGUgPSB0aGlzLndhdmUud2lkdGggLyAoY2FudmFzRW5kIC0gY2FudmFzU3RhcnQgLSAxKTsgLy8gb3B0aW1pemF0aW9uXG5cbiAgICAgIHZhciBoYWxmT2Zmc2V0ID0gaGFsZkggKyBvZmZzZXRZO1xuICAgICAgdmFyIGFic21heEhhbGYgPSBhYnNtYXggLyBoYWxmSDtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oKGNhbnZhc1N0YXJ0IC0gZmlyc3QpICogc2NhbGUsIGhhbGZPZmZzZXQpO1xuICAgICAgY3R4LmxpbmVUbygoY2FudmFzU3RhcnQgLSBmaXJzdCkgKiBzY2FsZSwgaGFsZk9mZnNldCAtIE1hdGgucm91bmQoKHBlYWtzWzIgKiBjYW52YXNTdGFydF0gfHwgMCkgLyBhYnNtYXhIYWxmKSk7XG4gICAgICB2YXIgaSwgcGVhaywgaDtcblxuICAgICAgZm9yIChpID0gY2FudmFzU3RhcnQ7IGkgPCBjYW52YXNFbmQ7IGkrKykge1xuICAgICAgICBwZWFrID0gcGVha3NbMiAqIGldIHx8IDA7XG4gICAgICAgIGggPSBNYXRoLnJvdW5kKHBlYWsgLyBhYnNtYXhIYWxmKTtcbiAgICAgICAgY3R4LmxpbmVUbygoaSAtIGZpcnN0KSAqIHNjYWxlICsgdGhpcy5oYWxmUGl4ZWwsIGhhbGZPZmZzZXQgLSBoKTtcbiAgICAgIH0gLy8gZHJhdyB0aGUgYm90dG9tIGVkZ2UgZ29pbmcgYmFja3dhcmRzLCB0byBtYWtlIGEgc2luZ2xlXG4gICAgICAvLyBjbG9zZWQgaHVsbCB0byBmaWxsXG5cblxuICAgICAgdmFyIGogPSBjYW52YXNFbmQgLSAxO1xuXG4gICAgICBmb3IgKGo7IGogPj0gY2FudmFzU3RhcnQ7IGotLSkge1xuICAgICAgICBwZWFrID0gcGVha3NbMiAqIGogKyAxXSB8fCAwO1xuICAgICAgICBoID0gTWF0aC5yb3VuZChwZWFrIC8gYWJzbWF4SGFsZik7XG4gICAgICAgIGN0eC5saW5lVG8oKGogLSBmaXJzdCkgKiBzY2FsZSArIHRoaXMuaGFsZlBpeGVsLCBoYWxmT2Zmc2V0IC0gaCk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5saW5lVG8oKGNhbnZhc1N0YXJ0IC0gZmlyc3QpICogc2NhbGUsIGhhbGZPZmZzZXQgLSBNYXRoLnJvdW5kKChwZWFrc1syICogY2FudmFzU3RhcnQgKyAxXSB8fCAwKSAvIGFic21heEhhbGYpKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgZW50cnlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMud2F2ZUN0eCA9IG51bGw7XG4gICAgICB0aGlzLndhdmUgPSBudWxsO1xuICAgICAgdGhpcy5wcm9ncmVzc0N0eCA9IG51bGw7XG4gICAgICB0aGlzLnByb2dyZXNzID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGltYWdlIGRhdGEgb2YgdGhlIHdhdmUgYGNhbnZhc2AgZWxlbWVudFxuICAgICAqXG4gICAgICogV2hlbiB1c2luZyBhIGB0eXBlYCBvZiBgJ2Jsb2InYCwgdGhpcyB3aWxsIHJldHVybiBhIGBQcm9taXNlYCB0aGF0XG4gICAgICogcmVzb2x2ZXMgd2l0aCBhIGBCbG9iYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQ9J2ltYWdlL3BuZycgQW4gb3B0aW9uYWwgdmFsdWUgb2YgYSBmb3JtYXQgdHlwZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eT0wLjkyIEFuIG9wdGlvbmFsIHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZT0nZGF0YVVSTCcgRWl0aGVyICdkYXRhVVJMJyBvciAnYmxvYicuXG4gICAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2V9IFdoZW4gdXNpbmcgdGhlIGRlZmF1bHQgYCdkYXRhVVJMJ2AgYHR5cGVgIHRoaXNcbiAgICAgKiByZXR1cm5zIGEgZGF0YSBVUkwuIFdoZW4gdXNpbmcgdGhlIGAnYmxvYidgIGB0eXBlYCB0aGlzIHJldHVybnMgYVxuICAgICAqIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggYSBgQmxvYmAgaW5zdGFuY2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRJbWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbWFnZShmb3JtYXQsIHF1YWxpdHksIHR5cGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlID09PSAnYmxvYicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgX3RoaXMud2F2ZS50b0Jsb2IocmVzb2x2ZSwgZm9ybWF0LCBxdWFsaXR5KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkYXRhVVJMJykge1xuICAgICAgICByZXR1cm4gdGhpcy53YXZlLnRvRGF0YVVSTChmb3JtYXQsIHF1YWxpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYW52YXNFbnRyeTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2FudmFzRW50cnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvZHJhd2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9kcmF3ZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciB1dGlsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsICovIFwiLi9zcmMvdXRpbC9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbi8qKlxuICogUGFyZW50IGNsYXNzIGZvciByZW5kZXJlcnNcbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2ZXJ9XG4gKi9cbnZhciBEcmF3ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF91dGlsJE9ic2VydmVyKSB7XG4gIF9pbmhlcml0cyhEcmF3ZXIsIF91dGlsJE9ic2VydmVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERyYXdlcik7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgY29udGFpbmVyIG5vZGUgb2YgdGhlIHdhdmVzdXJmZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtXYXZlc3VyZmVyUGFyYW1zfSBwYXJhbXMgVGhlIHdhdmVzdXJmZXIgaW5pdGlhbGlzYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gRHJhd2VyKGNvbnRhaW5lciwgcGFyYW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyYXdlcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7V2F2ZXN1cmZlclBhcmFtc31cbiAgICAgKi9cblxuICAgIF90aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIHJlbmRlcmVyXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICAgIF90aGlzLndpZHRoID0gMDtcbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXJlclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgICBfdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0ICogX3RoaXMucGFyYW1zLnBpeGVsUmF0aW87XG4gICAgX3RoaXMubGFzdFBvcyA9IDA7XG4gICAgLyoqXG4gICAgICogVGhlIGA8d2F2ZT5gIGVsZW1lbnQgd2hpY2ggaXMgYWRkZWQgdG8gdGhlIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cblxuICAgIF90aGlzLndyYXBwZXIgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWxpYXMgb2YgYHV0aWwuc3R5bGVgXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIFRoZSBlbGVtZW50IHRoYXQgdGhlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlcyBUaGUgbWFwIG9mIHByb3BOYW1lOiBhdHRyaWJ1dGUsIGJvdGggYXJlIHVzZWQgYXMtaXNcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IGVsXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKERyYXdlciwgW3tcbiAgICBrZXk6IFwic3R5bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3R5bGUoZWwsIHN0eWxlcykge1xuICAgICAgcmV0dXJuIHV0aWwuc3R5bGUoZWwsIHN0eWxlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgd3JhcHBlciBgPHdhdmU+YCBlbGVtZW50LCBzdHlsZSBpdCBhbmQgc2V0IHVwIHRoZSBldmVudHMgZm9yXG4gICAgICogaW50ZXJhY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVdyYXBwZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlV3JhcHBlcigpIHtcbiAgICAgIHRoaXMud3JhcHBlciA9IHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3dhdmUnKSk7XG4gICAgICB0aGlzLnN0eWxlKHRoaXMud3JhcHBlciwge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICB3ZWJraXRVc2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGhlaWdodDogdGhpcy5wYXJhbXMuaGVpZ2h0ICsgJ3B4J1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnBhcmFtcy5maWxsUGFyZW50IHx8IHRoaXMucGFyYW1zLnNjcm9sbFBhcmVudCkge1xuICAgICAgICB0aGlzLnN0eWxlKHRoaXMud3JhcHBlciwge1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgb3ZlcmZsb3dYOiB0aGlzLnBhcmFtcy5oaWRlU2Nyb2xsYmFyID8gJ2hpZGRlbicgOiAnYXV0bycsXG4gICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXR1cFdyYXBwZXJFdmVudHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGNsaWNrIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIENsaWNrIGV2ZW50XG4gICAgICogQHBhcmFtIHs/Ym9vbGVhbn0gbm9QcmV2ZW50IFNldCB0byB0cnVlIHRvIG5vdCBjYWxsIGBlLnByZXZlbnREZWZhdWx0KClgXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBQbGF5YmFjayBwb3NpdGlvbiBmcm9tIDAgdG8gMVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSwgbm9QcmV2ZW50KSB7XG4gICAgICAhbm9QcmV2ZW50ICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBjbGllbnRYID0gZS50YXJnZXRUb3VjaGVzID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgICB2YXIgYmJveCA9IHRoaXMud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBub21pbmFsV2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgdmFyIHBhcmVudFdpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuICAgICAgdmFyIHByb2dyZXNzO1xuXG4gICAgICBpZiAoIXRoaXMucGFyYW1zLmZpbGxQYXJlbnQgJiYgbm9taW5hbFdpZHRoIDwgcGFyZW50V2lkdGgpIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSAodGhpcy5wYXJhbXMucnRsID8gYmJveC5yaWdodCAtIGNsaWVudFggOiBjbGllbnRYIC0gYmJveC5sZWZ0KSAqICh0aGlzLnBhcmFtcy5waXhlbFJhdGlvIC8gbm9taW5hbFdpZHRoKSB8fCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSAoKHRoaXMucGFyYW1zLnJ0bCA/IGJib3gucmlnaHQgLSBjbGllbnRYIDogY2xpZW50WCAtIGJib3gubGVmdCkgKyB0aGlzLndyYXBwZXIuc2Nyb2xsTGVmdCkgLyB0aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGggfHwgMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHV0aWwuY2xhbXAocHJvZ3Jlc3MsIDAsIDEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXR1cFdyYXBwZXJFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBXcmFwcGVyRXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBzY3JvbGxiYXJIZWlnaHQgPSBfdGhpczIud3JhcHBlci5vZmZzZXRIZWlnaHQgLSBfdGhpczIud3JhcHBlci5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHNjcm9sbGJhckhlaWdodCAhPT0gMCkge1xuICAgICAgICAgIC8vIHNjcm9sbGJhciBpcyB2aXNpYmxlLiAgQ2hlY2sgaWYgY2xpY2sgd2FzIG9uIGl0XG4gICAgICAgICAgdmFyIGJib3ggPSBfdGhpczIud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIGlmIChlLmNsaWVudFkgPj0gYmJveC5ib3R0b20gLSBzY3JvbGxiYXJIZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBtb3VzZWRvd24gYXMgaXQgd2FzIG9uIHRoZSBzY3JvbGxiYXJcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMyLnBhcmFtcy5pbnRlcmFjdCkge1xuICAgICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ2NsaWNrJywgZSwgX3RoaXMyLmhhbmRsZUV2ZW50KGUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoX3RoaXMyLnBhcmFtcy5pbnRlcmFjdCkge1xuICAgICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ2RibGNsaWNrJywgZSwgX3RoaXMyLmhhbmRsZUV2ZW50KGUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5maXJlRXZlbnQoJ3Njcm9sbCcsIGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYXcgcGVha3Mgb24gdGhlIGNhbnZhc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBDYW4gYWxzbyBiZSBhbiBhcnJheSBvZiBhcnJheXNcbiAgICAgKiBmb3Igc3BsaXQgY2hhbm5lbCByZW5kZXJpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSB3aWR0aCBvZiB0aGUgYXJlYSB0aGF0IHNob3VsZCBiZSBkcmF3blxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgeC1vZmZzZXQgb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJlYSB0aGF0XG4gICAgICogc2hvdWxkIGJlIHJlbmRlcmVkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgeC1vZmZzZXQgb2YgdGhlIGVuZCBvZiB0aGUgYXJlYSB0aGF0IHNob3VsZCBiZVxuICAgICAqIHJlbmRlcmVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkcmF3UGVha3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1BlYWtzKHBlYWtzLCBsZW5ndGgsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICghdGhpcy5zZXRXaWR0aChsZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuY2xlYXJXYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGFyYW1zLmJhcldpZHRoID8gdGhpcy5kcmF3QmFycyhwZWFrcywgMCwgc3RhcnQsIGVuZCkgOiB0aGlzLmRyYXdXYXZlKHBlYWtzLCAwLCBzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIHRvIHRoZSBiZWdpbm5pbmdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0U2Nyb2xsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0U2Nyb2xsKCkge1xuICAgICAgaWYgKHRoaXMud3JhcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLndyYXBwZXIuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY2VudGVyIHRoZSB2aWV3LXBvcnQgYXQgYSBjZXJ0YWluIHBlcmNlbnQgb2YgdGhlIHdhdmVmb3JtXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGVyY2VudCBWYWx1ZSBmcm9tIDAgdG8gMSBvbiB0aGUgd2F2ZWZvcm1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlY2VudGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VudGVyKHBlcmNlbnQpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMud3JhcHBlci5zY3JvbGxXaWR0aCAqIHBlcmNlbnQ7XG4gICAgICB0aGlzLnJlY2VudGVyT25Qb3NpdGlvbihwb3NpdGlvbiwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlY2VudGVyIHRoZSB2aWV3LXBvcnQgb24gYSBwb3NpdGlvbiwgZWl0aGVyIHNjcm9sbCB0aGVyZSBpbW1lZGlhdGVseSBvclxuICAgICAqIGluIHN0ZXBzIG9mIDUgcGl4ZWxzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gWC1vZmZzZXQgaW4gcGl4ZWxzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbW1lZGlhdGUgU2V0IHRvIHRydWUgdG8gaW1tZWRpYXRlbHkgc2Nyb2xsIHNvbWV3aGVyZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVjZW50ZXJPblBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VudGVyT25Qb3NpdGlvbihwb3NpdGlvbiwgaW1tZWRpYXRlKSB7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IHRoaXMud3JhcHBlci5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIGhhbGYgPSB+fih0aGlzLndyYXBwZXIuY2xpZW50V2lkdGggLyAyKTtcbiAgICAgIHZhciBtYXhTY3JvbGwgPSB0aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGggLSB0aGlzLndyYXBwZXIuY2xpZW50V2lkdGg7XG4gICAgICB2YXIgdGFyZ2V0ID0gcG9zaXRpb24gLSBoYWxmO1xuICAgICAgdmFyIG9mZnNldCA9IHRhcmdldCAtIHNjcm9sbExlZnQ7XG5cbiAgICAgIGlmIChtYXhTY3JvbGwgPT0gMCkge1xuICAgICAgICAvLyBubyBuZWVkIHRvIGNvbnRpbnVlIGlmIHNjcm9sbGJhciBpcyBub3QgdGhlcmVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBpZiB0aGUgY3Vyc29yIGlzIGN1cnJlbnRseSB2aXNpYmxlLi4uXG5cblxuICAgICAgaWYgKCFpbW1lZGlhdGUgJiYgLWhhbGYgPD0gb2Zmc2V0ICYmIG9mZnNldCA8IGhhbGYpIHtcbiAgICAgICAgLy8gc2V0IHJhdGUgYXQgd2hpY2ggd2F2ZWZvcm0gaXMgY2VudGVyZWRcbiAgICAgICAgdmFyIHJhdGUgPSB0aGlzLnBhcmFtcy5hdXRvQ2VudGVyUmF0ZTsgLy8gbWFrZSByYXRlIGRlcGVuZCBvbiB3aWR0aCBvZiB2aWV3IGFuZCBsZW5ndGggb2Ygd2F2ZWZvcm1cblxuICAgICAgICByYXRlIC89IGhhbGY7XG4gICAgICAgIHJhdGUgKj0gbWF4U2Nyb2xsO1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heCgtcmF0ZSwgTWF0aC5taW4ocmF0ZSwgb2Zmc2V0KSk7XG4gICAgICAgIHRhcmdldCA9IHNjcm9sbExlZnQgKyBvZmZzZXQ7XG4gICAgICB9IC8vIGxpbWl0IHRhcmdldCB0byB2YWxpZCByYW5nZSAoMCB0byBtYXhTY3JvbGwpXG5cblxuICAgICAgdGFyZ2V0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4U2Nyb2xsLCB0YXJnZXQpKTsgLy8gbm8gdXNlIGF0dGVtcHRpbmcgdG8gc2Nyb2xsIGlmIHdlJ3JlIG5vdCBtb3ZpbmdcblxuICAgICAgaWYgKHRhcmdldCAhPSBzY3JvbGxMZWZ0KSB7XG4gICAgICAgIHRoaXMud3JhcHBlci5zY3JvbGxMZWZ0ID0gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGluIHBpeGVsc1xuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBIb3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbiBpbiBwaXhlbHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFNjcm9sbFhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Nyb2xsWCgpIHtcbiAgICAgIHZhciB4ID0gMDtcblxuICAgICAgaWYgKHRoaXMud3JhcHBlcikge1xuICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMucGFyYW1zLnBpeGVsUmF0aW87XG4gICAgICAgIHggPSBNYXRoLnJvdW5kKHRoaXMud3JhcHBlci5zY3JvbGxMZWZ0ICogcGl4ZWxSYXRpbyk7IC8vIEluIGNhc2VzIG9mIGVsYXN0aWMgc2Nyb2xsIChzYWZhcmkgd2l0aCBtb3VzZSB3aGVlbCkgeW91IGNhblxuICAgICAgICAvLyBzY3JvbGwgYmV5b25kIHRoZSBsaW1pdHMgb2YgdGhlIGNvbnRhaW5lclxuICAgICAgICAvLyBDYWxjdWxhdGUgYW5kIGZsb29yIHRoZSBzY3JvbGxhYmxlIGV4dGVudCB0byBtYWtlIHN1cmUgYW4gb3V0XG4gICAgICAgIC8vIG9mIGJvdW5kcyB2YWx1ZSBpcyBub3QgcmV0dXJuZWRcbiAgICAgICAgLy8gVGlja2V0ICMxMzEyXG5cbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnNjcm9sbFBhcmVudCkge1xuICAgICAgICAgIHZhciBtYXhTY3JvbGwgPSB+fih0aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGggKiBwaXhlbFJhdGlvIC0gdGhpcy5nZXRXaWR0aCgpKTtcbiAgICAgICAgICB4ID0gTWF0aC5taW4obWF4U2Nyb2xsLCBNYXRoLm1heCgwLCB4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2lkdGggb2YgdGhlIGNvbnRhaW5lclxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgd2lkdGggb2YgdGhlIGNvbnRhaW5lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0V2lkdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V2lkdGgoKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmNvbnRhaW5lci5jbGllbnRXaWR0aCAqIHRoaXMucGFyYW1zLnBpeGVsUmF0aW8pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHdpZHRoIG9mIHRoZSBjb250YWluZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBUaGUgbmV3IHdpZHRoIG9mIHRoZSBjb250YWluZXJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB3aWR0aCBvZiB0aGUgY29udGFpbmVyIHdhcyB1cGRhdGVkIG9yIG5vdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0V2lkdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0V2lkdGgod2lkdGgpIHtcbiAgICAgIGlmICh0aGlzLndpZHRoID09IHdpZHRoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5wYXJhbXMuZmlsbFBhcmVudCB8fCB0aGlzLnBhcmFtcy5zY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgdGhpcy5zdHlsZSh0aGlzLndyYXBwZXIsIHtcbiAgICAgICAgICB3aWR0aDogJydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0eWxlKHRoaXMud3JhcHBlciwge1xuICAgICAgICAgIHdpZHRoOiB+fih0aGlzLndpZHRoIC8gdGhpcy5wYXJhbXMucGl4ZWxSYXRpbykgKyAncHgnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGhlaWdodCBvZiB0aGUgY29udGFpbmVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgd2FzIHVwZGF0ZWQgb3Igbm90XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRIZWlnaHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SGVpZ2h0KGhlaWdodCkge1xuICAgICAgaWYgKGhlaWdodCA9PSB0aGlzLmhlaWdodCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdGhpcy5zdHlsZSh0aGlzLndyYXBwZXIsIHtcbiAgICAgICAgaGVpZ2h0OiB+fih0aGlzLmhlaWdodCAvIHRoaXMucGFyYW1zLnBpeGVsUmF0aW8pICsgJ3B4J1xuICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYnkgd2F2ZXN1cmZlciB3aGVuIHByb2dyZXNzIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHByb2dyZXNzIEZyb20gMCB0byAxXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwcm9ncmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9ncmVzcyhfcHJvZ3Jlc3MpIHtcbiAgICAgIHZhciBtaW5QeERlbHRhID0gMSAvIHRoaXMucGFyYW1zLnBpeGVsUmF0aW87XG4gICAgICB2YXIgcG9zID0gTWF0aC5yb3VuZChfcHJvZ3Jlc3MgKiB0aGlzLndpZHRoKSAqIG1pblB4RGVsdGE7XG5cbiAgICAgIGlmIChwb3MgPCB0aGlzLmxhc3RQb3MgfHwgcG9zIC0gdGhpcy5sYXN0UG9zID49IG1pblB4RGVsdGEpIHtcbiAgICAgICAgdGhpcy5sYXN0UG9zID0gcG9zO1xuXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5zY3JvbGxQYXJlbnQgJiYgdGhpcy5wYXJhbXMuYXV0b0NlbnRlcikge1xuICAgICAgICAgIHZhciBuZXdQb3MgPSB+fih0aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGggKiBfcHJvZ3Jlc3MpO1xuICAgICAgICAgIHRoaXMucmVjZW50ZXJPblBvc2l0aW9uKG5ld1BvcywgdGhpcy5wYXJhbXMuYXV0b0NlbnRlckltbWVkaWF0ZWx5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3MocG9zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3YXZlc3VyZmVyIGlzIGRlc3Ryb3llZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy51bkFsbCgpO1xuXG4gICAgICBpZiAodGhpcy53cmFwcGVyKSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXIucGFyZW50Tm9kZSA9PSB0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMud3JhcHBlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndyYXBwZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBSZW5kZXJlci1zcGVjaWZpYyBtZXRob2RzICovXG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYWZ0ZXIgY3Vyc29yIHJlbGF0ZWQgcGFyYW1zIGhhdmUgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlQ3Vyc29yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUN1cnNvcigpIHt9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHNpemUgb2YgdGhlIGNvbnRhaW5lciBjaGFuZ2VzIHNvIHRoZSByZW5kZXJlciBjYW4gYWRqdXN0XG4gICAgICpcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHt9XG4gICAgLyoqXG4gICAgICogRHJhdyBhIHdhdmVmb3JtIHdpdGggYmFyc1xuICAgICAqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBDYW4gYWxzbyBiZSBhbiBhcnJheSBvZiBhcnJheXMgZm9yIHNwbGl0IGNoYW5uZWxcbiAgICAgKiByZW5kZXJpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBjaGFubmVsLiBOb3JtYWxseVxuICAgICAqIHNob3VsZCBiZSAwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSB4LW9mZnNldCBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcmVhIHRoYXRcbiAgICAgKiBzaG91bGQgYmUgcmVuZGVyZWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSB4LW9mZnNldCBvZiB0aGUgZW5kIG9mIHRoZSBhcmVhIHRoYXQgc2hvdWxkIGJlXG4gICAgICogcmVuZGVyZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdCYXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdCYXJzKHBlYWtzLCBjaGFubmVsSW5kZXgsIHN0YXJ0LCBlbmQpIHt9XG4gICAgLyoqXG4gICAgICogRHJhdyBhIHdhdmVmb3JtXG4gICAgICpcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfE51bWJlci48QXJyYXlbXT59IHBlYWtzIENhbiBhbHNvIGJlIGFuIGFycmF5IG9mIGFycmF5cyBmb3Igc3BsaXQgY2hhbm5lbFxuICAgICAqIHJlbmRlcmluZ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjaGFubmVsSW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGNoYW5uZWwuIE5vcm1hbGx5XG4gICAgICogc2hvdWxkIGJlIDBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBlbmQgb2YgdGhlIGFyZWEgdGhhdCBzaG91bGQgYmVcbiAgICAgKiByZW5kZXJlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZHJhd1dhdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd1dhdmUocGVha3MsIGNoYW5uZWxJbmRleCwgc3RhcnQsIGVuZCkge31cbiAgICAvKipcbiAgICAgKiBDbGVhciB0aGUgd2F2ZWZvcm1cbiAgICAgKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJXYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyV2F2ZSgpIHt9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBuZXcgcHJvZ3Jlc3NcbiAgICAgKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiBYLU9mZnNldCBvZiBwcm9ncmVzcyBwb3NpdGlvbiBpbiBwaXhlbHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVByb2dyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKSB7fVxuICB9XSk7XG5cbiAgcmV0dXJuIERyYXdlcjtcbn0odXRpbC5PYnNlcnZlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERyYXdlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kcmF3ZXIubXVsdGljYW52YXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2RyYXdlci5tdWx0aWNhbnZhcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kcmF3ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZHJhd2VyICovIFwiLi9zcmMvZHJhd2VyLmpzXCIpKTtcblxudmFyIHV0aWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWwgKi8gXCIuL3NyYy91dGlsL2luZGV4LmpzXCIpKTtcblxudmFyIF9kcmF3ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2RyYXdlci5jYW52YXNlbnRyeSAqLyBcIi4vc3JjL2RyYXdlci5jYW52YXNlbnRyeS5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbi8qKlxuICogTXVsdGlDYW52YXMgcmVuZGVyZXIgZm9yIHdhdmVzdXJmZXIuIElzIGN1cnJlbnRseSB0aGUgZGVmYXVsdCBhbmQgc29sZVxuICogYnVpbHRpbiByZW5kZXJlci5cbiAqXG4gKiBBIGBNdWx0aUNhbnZhc2AgY29uc2lzdHMgb2Ygb25lIG9yIG1vcmUgYENhbnZhc0VudHJ5YCBpbnN0YW5jZXMsIGRlcGVuZGluZ1xuICogb24gdGhlIHpvb20gbGV2ZWwuXG4gKi9cbnZhciBNdWx0aUNhbnZhcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0RyYXdlcikge1xuICBfaW5oZXJpdHMoTXVsdGlDYW52YXMsIF9EcmF3ZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTXVsdGlDYW52YXMpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgVGhlIGNvbnRhaW5lciBub2RlIG9mIHRoZSB3YXZlc3VyZmVyIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7V2F2ZXN1cmZlclBhcmFtc30gcGFyYW1zIFRoZSB3YXZlc3VyZmVyIGluaXRpYWxpc2F0aW9uIG9wdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIE11bHRpQ2FudmFzKGNvbnRhaW5lciwgcGFyYW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE11bHRpQ2FudmFzKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCBwYXJhbXMpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgICBfdGhpcy5tYXhDYW52YXNXaWR0aCA9IHBhcmFtcy5tYXhDYW52YXNXaWR0aDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gICAgX3RoaXMubWF4Q2FudmFzRWxlbWVudFdpZHRoID0gTWF0aC5yb3VuZChwYXJhbXMubWF4Q2FudmFzV2lkdGggLyBwYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIHByb2dyZXNzIHdhdmUgaXMgcmVuZGVyZWQuIElmIHRoZSBgd2F2ZUNvbG9yYFxuICAgICAqIGFuZCBgcHJvZ3Jlc3NDb2xvcmAgYXJlIHRoZSBzYW1lIGNvbG9yIGl0IGlzIG5vdC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgX3RoaXMuaGFzUHJvZ3Jlc3NDYW52YXMgPSBwYXJhbXMud2F2ZUNvbG9yICE9IHBhcmFtcy5wcm9ncmVzc0NvbG9yO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgICBfdGhpcy5oYWxmUGl4ZWwgPSAwLjUgLyBwYXJhbXMucGl4ZWxSYXRpbztcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGBDYW52YXNFbnRyeWAgaW5zdGFuY2VzLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuXG4gICAgX3RoaXMuY2FudmFzZXMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG4gICAgICovXG5cbiAgICBfdGhpcy5wcm9ncmVzc1dhdmUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENsYXNzIHVzZWQgdG8gZ2VuZXJhdGUgZW50cmllcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cblxuICAgIF90aGlzLkVudHJ5Q2xhc3MgPSBfZHJhd2VyMi5kZWZhdWx0O1xuICAgIC8qKlxuICAgICAqIENhbnZhcyAyZCBjb250ZXh0IGF0dHJpYnV0ZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuXG4gICAgX3RoaXMuY2FudmFzQ29udGV4dEF0dHJpYnV0ZXMgPSBwYXJhbXMuZHJhd2luZ0NvbnRleHRBdHRyaWJ1dGVzO1xuICAgIC8qKlxuICAgICAqIE92ZXJsYXAgYWRkZWQgYmV0d2VlbiBlbnRyaWVzIHRvIHByZXZlbnQgdmVydGljYWwgd2hpdGUgc3RyaXBlc1xuICAgICAqIGJldHdlZW4gYGNhbnZhc2AgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gICAgX3RoaXMub3ZlcmxhcCA9IDIgKiBNYXRoLmNlaWwocGFyYW1zLnBpeGVsUmF0aW8gLyAyKTtcbiAgICAvKipcbiAgICAgKiBUaGUgcmFkaXVzIG9mIHRoZSB3YXZlIGJhcnMuIE1ha2VzIGJhcnMgcm91bmRlZFxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICAgIF90aGlzLmJhclJhZGl1cyA9IHBhcmFtcy5iYXJSYWRpdXMgfHwgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGRyYXdlclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhNdWx0aUNhbnZhcywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5jcmVhdGVXcmFwcGVyKCk7XG4gICAgICB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgY2FudmFzIGVsZW1lbnRzIGFuZCBzdHlsZSB0aGVtXG4gICAgICpcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUVsZW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzKCkge1xuICAgICAgdGhpcy5wcm9ncmVzc1dhdmUgPSB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd3YXZlJyksIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHpJbmRleDogMyxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgd2lkdGg6ICcwJyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgYm9yZGVyUmlnaHRTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgICB9KSk7XG4gICAgICB0aGlzLmFkZENhbnZhcygpO1xuICAgICAgdGhpcy51cGRhdGVDdXJzb3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIGN1cnNvciBzdHlsZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlQ3Vyc29yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUN1cnNvcigpIHtcbiAgICAgIHRoaXMuc3R5bGUodGhpcy5wcm9ncmVzc1dhdmUsIHtcbiAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogdGhpcy5wYXJhbXMuY3Vyc29yV2lkdGggKyAncHgnLFxuICAgICAgICBib3JkZXJSaWdodENvbG9yOiB0aGlzLnBhcmFtcy5jdXJzb3JDb2xvclxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkanVzdCB0byB0aGUgdXBkYXRlZCBzaXplIGJ5IGFkZGluZyBvciByZW1vdmluZyBjYW52YXNlc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlU2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0b3RhbFdpZHRoID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gdGhpcy5wYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgICB2YXIgcmVxdWlyZWRDYW52YXNlcyA9IE1hdGguY2VpbCh0b3RhbFdpZHRoIC8gKHRoaXMubWF4Q2FudmFzRWxlbWVudFdpZHRoICsgdGhpcy5vdmVybGFwKSk7IC8vIGFkZCByZXF1aXJlZCBjYW52YXNlc1xuXG4gICAgICB3aGlsZSAodGhpcy5jYW52YXNlcy5sZW5ndGggPCByZXF1aXJlZENhbnZhc2VzKSB7XG4gICAgICAgIHRoaXMuYWRkQ2FudmFzKCk7XG4gICAgICB9IC8vIHJlbW92ZSBvbGRlciBleGlzdGluZyBjYW52YXNlcywgaWYgYW55XG5cblxuICAgICAgd2hpbGUgKHRoaXMuY2FudmFzZXMubGVuZ3RoID4gcmVxdWlyZWRDYW52YXNlcykge1xuICAgICAgICB0aGlzLnJlbW92ZUNhbnZhcygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FudmFzV2lkdGggPSB0aGlzLm1heENhbnZhc1dpZHRoICsgdGhpcy5vdmVybGFwO1xuICAgICAgdmFyIGxhc3RDYW52YXMgPSB0aGlzLmNhbnZhc2VzLmxlbmd0aCAtIDE7XG4gICAgICB0aGlzLmNhbnZhc2VzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gICAgICAgIGlmIChpID09IGxhc3RDYW52YXMpIHtcbiAgICAgICAgICBjYW52YXNXaWR0aCA9IF90aGlzMi53aWR0aCAtIF90aGlzMi5tYXhDYW52YXNXaWR0aCAqIGxhc3RDYW52YXM7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIudXBkYXRlRGltZW5zaW9ucyhlbnRyeSwgY2FudmFzV2lkdGgsIF90aGlzMi5oZWlnaHQpO1xuXG4gICAgICAgIGVudHJ5LmNsZWFyV2F2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNhbnZhcyB0byB0aGUgY2FudmFzIGxpc3RcbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkQ2FudmFzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZENhbnZhcygpIHtcbiAgICAgIHZhciBlbnRyeSA9IG5ldyB0aGlzLkVudHJ5Q2xhc3MoKTtcbiAgICAgIGVudHJ5LmNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzID0gdGhpcy5jYW52YXNDb250ZXh0QXR0cmlidXRlcztcbiAgICAgIGVudHJ5Lmhhc1Byb2dyZXNzQ2FudmFzID0gdGhpcy5oYXNQcm9ncmVzc0NhbnZhcztcbiAgICAgIGVudHJ5LmhhbGZQaXhlbCA9IHRoaXMuaGFsZlBpeGVsO1xuICAgICAgdmFyIGxlZnRPZmZzZXQgPSB0aGlzLm1heENhbnZhc0VsZW1lbnRXaWR0aCAqIHRoaXMuY2FudmFzZXMubGVuZ3RoOyAvLyB3YXZlXG5cbiAgICAgIGVudHJ5LmluaXRXYXZlKHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLCB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB6SW5kZXg6IDIsXG4gICAgICAgIGxlZnQ6IGxlZnRPZmZzZXQgKyAncHgnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgfSkpKTsgLy8gcHJvZ3Jlc3NcblxuICAgICAgaWYgKHRoaXMuaGFzUHJvZ3Jlc3NDYW52YXMpIHtcbiAgICAgICAgZW50cnkuaW5pdFByb2dyZXNzKHRoaXMucHJvZ3Jlc3NXYXZlLmFwcGVuZENoaWxkKHRoaXMuc3R5bGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksIHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICBsZWZ0OiBsZWZ0T2Zmc2V0ICsgJ3B4JyxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICAgIH0pKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvcCBzaW5nbGUgY2FudmFzIGZyb20gdGhlIGxpc3RcbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlQ2FudmFzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNhbnZhcygpIHtcbiAgICAgIHZhciBsYXN0RW50cnkgPSB0aGlzLmNhbnZhc2VzW3RoaXMuY2FudmFzZXMubGVuZ3RoIC0gMV07IC8vIHdhdmVcblxuICAgICAgbGFzdEVudHJ5LndhdmUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChsYXN0RW50cnkud2F2ZSk7IC8vIHByb2dyZXNzXG5cbiAgICAgIGlmICh0aGlzLmhhc1Byb2dyZXNzQ2FudmFzKSB7XG4gICAgICAgIGxhc3RFbnRyeS5wcm9ncmVzcy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGxhc3RFbnRyeS5wcm9ncmVzcyk7XG4gICAgICB9IC8vIGNsZWFudXBcblxuXG4gICAgICBpZiAobGFzdEVudHJ5KSB7XG4gICAgICAgIGxhc3RFbnRyeS5kZXN0cm95KCk7XG4gICAgICAgIGxhc3RFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzZXMucG9wKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZGltZW5zaW9ucyBvZiBhIGNhbnZhcyBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0NhbnZhc0VudHJ5fSBlbnRyeSBUYXJnZXQgZW50cnlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggVGhlIG5ldyB3aWR0aCBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVGhlIG5ldyBoZWlnaHQgb2YgdGhlIGVsZW1lbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZURpbWVuc2lvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlRGltZW5zaW9ucyhlbnRyeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9IE1hdGgucm91bmQod2lkdGggLyB0aGlzLnBhcmFtcy5waXhlbFJhdGlvKTtcbiAgICAgIHZhciB0b3RhbFdpZHRoID0gTWF0aC5yb3VuZCh0aGlzLndpZHRoIC8gdGhpcy5wYXJhbXMucGl4ZWxSYXRpbyk7IC8vIHVwZGF0ZSBjYW52YXMgZGltZW5zaW9uc1xuXG4gICAgICBlbnRyeS51cGRhdGVEaW1lbnNpb25zKGVsZW1lbnRXaWR0aCwgdG90YWxXaWR0aCwgd2lkdGgsIGhlaWdodCk7IC8vIHN0eWxlIGVsZW1lbnRcblxuICAgICAgdGhpcy5zdHlsZSh0aGlzLnByb2dyZXNzV2F2ZSwge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIHdob2xlIG11bHRpLWNhbnZhc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJXYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyV2F2ZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB1dGlsLmZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLmNhbnZhc2VzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJ5LmNsZWFyV2F2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYXcgYSB3YXZlZm9ybSB3aXRoIGJhcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW118TnVtYmVyLjxBcnJheVtdPn0gcGVha3MgQ2FuIGFsc28gYmUgYW4gYXJyYXkgb2YgYXJyYXlzXG4gICAgICogZm9yIHNwbGl0IGNoYW5uZWwgcmVuZGVyaW5nXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNoYW5uZWxJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgY2hhbm5lbC4gTm9ybWFsbHlcbiAgICAgKiBzaG91bGQgYmUgMC4gTXVzdCBiZSBhbiBpbnRlZ2VyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgeC1vZmZzZXQgb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJlYSB0aGF0XG4gICAgICogc2hvdWxkIGJlIHJlbmRlcmVkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgeC1vZmZzZXQgb2YgdGhlIGVuZCBvZiB0aGUgYXJlYSB0aGF0IHNob3VsZCBiZVxuICAgICAqIHJlbmRlcmVkXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkcmF3QmFyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3QmFycyhwZWFrcywgY2hhbm5lbEluZGV4LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMucHJlcGFyZURyYXcocGVha3MsIGNoYW5uZWxJbmRleCwgc3RhcnQsIGVuZCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGFic21heCA9IF9yZWYuYWJzbWF4LFxuICAgICAgICAgICAgaGFzTWluVmFscyA9IF9yZWYuaGFzTWluVmFscyxcbiAgICAgICAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgICAgICAgb2Zmc2V0WSA9IF9yZWYub2Zmc2V0WSxcbiAgICAgICAgICAgIGhhbGZIID0gX3JlZi5oYWxmSCxcbiAgICAgICAgICAgIHBlYWtzID0gX3JlZi5wZWFrcyxcbiAgICAgICAgICAgIGNoID0gX3JlZi5jaGFubmVsSW5kZXg7XG5cbiAgICAgICAgLy8gaWYgZHJhd0JhcnMgd2FzIGNhbGxlZCB3aXRoaW4gd3MuZW1wdHkgd2UgZG9uJ3QgcGFzcyBhIHN0YXJ0IGFuZFxuICAgICAgICAvLyBkb24ndCB3YW50IGFueXRoaW5nIHRvIGhhcHBlblxuICAgICAgICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTa2lwIGV2ZXJ5IG90aGVyIHZhbHVlIGlmIHRoZXJlIGFyZSBuZWdhdGl2ZXMuXG5cblxuICAgICAgICB2YXIgcGVha0luZGV4U2NhbGUgPSBoYXNNaW5WYWxzID8gMiA6IDE7XG4gICAgICAgIHZhciBsZW5ndGggPSBwZWFrcy5sZW5ndGggLyBwZWFrSW5kZXhTY2FsZTtcbiAgICAgICAgdmFyIGJhciA9IF90aGlzNC5wYXJhbXMuYmFyV2lkdGggKiBfdGhpczQucGFyYW1zLnBpeGVsUmF0aW87XG4gICAgICAgIHZhciBnYXAgPSBfdGhpczQucGFyYW1zLmJhckdhcCA9PT0gbnVsbCA/IE1hdGgubWF4KF90aGlzNC5wYXJhbXMucGl4ZWxSYXRpbywgfn4oYmFyIC8gMikpIDogTWF0aC5tYXgoX3RoaXM0LnBhcmFtcy5waXhlbFJhdGlvLCBfdGhpczQucGFyYW1zLmJhckdhcCAqIF90aGlzNC5wYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgICAgIHZhciBzdGVwID0gYmFyICsgZ2FwO1xuICAgICAgICB2YXIgc2NhbGUgPSBsZW5ndGggLyBfdGhpczQud2lkdGg7XG4gICAgICAgIHZhciBmaXJzdCA9IHN0YXJ0O1xuICAgICAgICB2YXIgbGFzdCA9IGVuZDtcbiAgICAgICAgdmFyIGkgPSBmaXJzdDtcblxuICAgICAgICBmb3IgKGk7IGkgPCBsYXN0OyBpICs9IHN0ZXApIHtcbiAgICAgICAgICB2YXIgcGVhayA9IHBlYWtzW01hdGguZmxvb3IoaSAqIHNjYWxlICogcGVha0luZGV4U2NhbGUpXSB8fCAwO1xuICAgICAgICAgIHZhciBoID0gTWF0aC5yb3VuZChwZWFrIC8gYWJzbWF4ICogaGFsZkgpO1xuICAgICAgICAgIC8qIGluIGNhc2Ugb2Ygc2lsZW5jZXMsIGFsbG93IHRoZSB1c2VyIHRvIHNwZWNpZnkgdGhhdCB3ZVxuICAgICAgICAgICAqIGFsd2F5cyBkcmF3ICpzb21ldGhpbmcqIChub3JtYWxseSBhIDFweCBoaWdoIGJhcikgKi9cblxuICAgICAgICAgIGlmIChoID09IDAgJiYgX3RoaXM0LnBhcmFtcy5iYXJNaW5IZWlnaHQpIGggPSBfdGhpczQucGFyYW1zLmJhck1pbkhlaWdodDtcblxuICAgICAgICAgIF90aGlzNC5maWxsUmVjdChpICsgX3RoaXM0LmhhbGZQaXhlbCwgaGFsZkggLSBoICsgb2Zmc2V0WSwgYmFyICsgX3RoaXM0LmhhbGZQaXhlbCwgaCAqIDIsIF90aGlzNC5iYXJSYWRpdXMsIGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERyYXcgYSB3YXZlZm9ybVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBDYW4gYWxzbyBiZSBhbiBhcnJheSBvZiBhcnJheXNcbiAgICAgKiBmb3Igc3BsaXQgY2hhbm5lbCByZW5kZXJpbmdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBjaGFubmVsLiBOb3JtYWxseVxuICAgICAqIHNob3VsZCBiZSAwXG4gICAgICogQHBhcmFtIHtudW1iZXI/fSBzdGFydCBUaGUgeC1vZmZzZXQgb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJlYSB0aGF0XG4gICAgICogc2hvdWxkIGJlIHJlbmRlcmVkIChJZiB0aGlzIGlzbid0IHNldCBvbmx5IGEgZmxhdCBsaW5lIGlzIHJlbmRlcmVkKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyP30gZW5kIFRoZSB4LW9mZnNldCBvZiB0aGUgZW5kIG9mIHRoZSBhcmVhIHRoYXQgc2hvdWxkIGJlXG4gICAgICogcmVuZGVyZWRcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdXYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdXYXZlKHBlYWtzLCBjaGFubmVsSW5kZXgsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5wcmVwYXJlRHJhdyhwZWFrcywgY2hhbm5lbEluZGV4LCBzdGFydCwgZW5kLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIGFic21heCA9IF9yZWYyLmFic21heCxcbiAgICAgICAgICAgIGhhc01pblZhbHMgPSBfcmVmMi5oYXNNaW5WYWxzLFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0LFxuICAgICAgICAgICAgb2Zmc2V0WSA9IF9yZWYyLm9mZnNldFksXG4gICAgICAgICAgICBoYWxmSCA9IF9yZWYyLmhhbGZILFxuICAgICAgICAgICAgcGVha3MgPSBfcmVmMi5wZWFrcyxcbiAgICAgICAgICAgIGNoYW5uZWxJbmRleCA9IF9yZWYyLmNoYW5uZWxJbmRleDtcblxuICAgICAgICBpZiAoIWhhc01pblZhbHMpIHtcbiAgICAgICAgICB2YXIgcmVmbGVjdGVkUGVha3MgPSBbXTtcbiAgICAgICAgICB2YXIgbGVuID0gcGVha3MubGVuZ3RoO1xuICAgICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICAgIGZvciAoaTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICByZWZsZWN0ZWRQZWFrc1syICogaV0gPSBwZWFrc1tpXTtcbiAgICAgICAgICAgIHJlZmxlY3RlZFBlYWtzWzIgKiBpICsgMV0gPSAtcGVha3NbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGVha3MgPSByZWZsZWN0ZWRQZWFrcztcbiAgICAgICAgfSAvLyBpZiBkcmF3V2F2ZSB3YXMgY2FsbGVkIHdpdGhpbiB3cy5lbXB0eSB3ZSBkb24ndCBwYXNzIGEgc3RhcnQgYW5kXG4gICAgICAgIC8vIGVuZCBhbmQgc2ltcGx5IHdhbnQgYSBmbGF0IGxpbmVcblxuXG4gICAgICAgIGlmIChzdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgX3RoaXM1LmRyYXdMaW5lKHBlYWtzLCBhYnNtYXgsIGhhbGZILCBvZmZzZXRZLCBzdGFydCwgZW5kLCBjaGFubmVsSW5kZXgpO1xuICAgICAgICB9IC8vIGFsd2F5cyBkcmF3IGEgbWVkaWFuIGxpbmVcblxuXG4gICAgICAgIF90aGlzNS5maWxsUmVjdCgwLCBoYWxmSCArIG9mZnNldFkgLSBfdGhpczUuaGFsZlBpeGVsLCBfdGhpczUud2lkdGgsIF90aGlzNS5oYWxmUGl4ZWwsIF90aGlzNS5iYXJSYWRpdXMsIGNoYW5uZWxJbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVsbCB0aGUgY2FudmFzIGVudHJpZXMgdG8gcmVuZGVyIHRoZWlyIHBvcnRpb24gb2YgdGhlIHdhdmVmb3JtXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBwZWFrcyBQZWFrcyBkYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFic21heCBNYXhpbXVtIHBlYWsgdmFsdWUgKGFic29sdXRlKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmSCBIYWxmIHRoZSBoZWlnaHQgb2YgdGhlIHdhdmVmb3JtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFkgT2Zmc2V0IHRvIHRoZSB0b3BcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBlbmQgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7Y2hhbm5lbEluZGV4fSBjaGFubmVsSW5kZXggVGhlIGNoYW5uZWwgaW5kZXggb2YgdGhlIGxpbmUgZHJhd25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdMaW5lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdMaW5lKHBlYWtzLCBhYnNtYXgsIGhhbGZILCBvZmZzZXRZLCBzdGFydCwgZW5kLCBjaGFubmVsSW5kZXgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnBhcmFtcy5zcGxpdENoYW5uZWxzT3B0aW9ucy5jaGFubmVsQ29sb3JzW2NoYW5uZWxJbmRleF0gfHwge30sXG4gICAgICAgICAgd2F2ZUNvbG9yID0gX3JlZjMud2F2ZUNvbG9yLFxuICAgICAgICAgIHByb2dyZXNzQ29sb3IgPSBfcmVmMy5wcm9ncmVzc0NvbG9yO1xuXG4gICAgICB0aGlzLmNhbnZhc2VzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gICAgICAgIF90aGlzNi5zZXRGaWxsU3R5bGVzKGVudHJ5LCB3YXZlQ29sb3IsIHByb2dyZXNzQ29sb3IpO1xuXG4gICAgICAgIGVudHJ5LmRyYXdMaW5lcyhwZWFrcywgYWJzbWF4LCBoYWxmSCwgb2Zmc2V0WSwgc3RhcnQsIGVuZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHJhdyBhIHJlY3RhbmdsZSBvbiB0aGUgbXVsdGktY2FudmFzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBYLXBvc2l0aW9uIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSBZLXBvc2l0aW9uIG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgdGhlIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIHRoZSByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIFJhZGl1cyBvZiB0aGUgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtjaGFubmVsSW5kZXh9IGNoYW5uZWxJbmRleCBUaGUgY2hhbm5lbCBpbmRleCBvZiB0aGUgYmFyIGRyYXduXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJmaWxsUmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMsIGNoYW5uZWxJbmRleCkge1xuICAgICAgdmFyIHN0YXJ0Q2FudmFzID0gTWF0aC5mbG9vcih4IC8gdGhpcy5tYXhDYW52YXNXaWR0aCk7XG4gICAgICB2YXIgZW5kQ2FudmFzID0gTWF0aC5taW4oTWF0aC5jZWlsKCh4ICsgd2lkdGgpIC8gdGhpcy5tYXhDYW52YXNXaWR0aCkgKyAxLCB0aGlzLmNhbnZhc2VzLmxlbmd0aCk7XG4gICAgICB2YXIgaSA9IHN0YXJ0Q2FudmFzO1xuXG4gICAgICBmb3IgKGk7IGkgPCBlbmRDYW52YXM7IGkrKykge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmNhbnZhc2VzW2ldO1xuICAgICAgICB2YXIgbGVmdE9mZnNldCA9IGkgKiB0aGlzLm1heENhbnZhc1dpZHRoO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0ge1xuICAgICAgICAgIHgxOiBNYXRoLm1heCh4LCBpICogdGhpcy5tYXhDYW52YXNXaWR0aCksXG4gICAgICAgICAgeTE6IHksXG4gICAgICAgICAgeDI6IE1hdGgubWluKHggKyB3aWR0aCwgaSAqIHRoaXMubWF4Q2FudmFzV2lkdGggKyBlbnRyeS53YXZlLndpZHRoKSxcbiAgICAgICAgICB5MjogeSArIGhlaWdodFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpbnRlcnNlY3Rpb24ueDEgPCBpbnRlcnNlY3Rpb24ueDIpIHtcbiAgICAgICAgICB2YXIgX3JlZjQgPSB0aGlzLnBhcmFtcy5zcGxpdENoYW5uZWxzT3B0aW9ucy5jaGFubmVsQ29sb3JzW2NoYW5uZWxJbmRleF0gfHwge30sXG4gICAgICAgICAgICAgIHdhdmVDb2xvciA9IF9yZWY0LndhdmVDb2xvcixcbiAgICAgICAgICAgICAgcHJvZ3Jlc3NDb2xvciA9IF9yZWY0LnByb2dyZXNzQ29sb3I7XG5cbiAgICAgICAgICB0aGlzLnNldEZpbGxTdHlsZXMoZW50cnksIHdhdmVDb2xvciwgcHJvZ3Jlc3NDb2xvcik7XG4gICAgICAgICAgZW50cnkuZmlsbFJlY3RzKGludGVyc2VjdGlvbi54MSAtIGxlZnRPZmZzZXQsIGludGVyc2VjdGlvbi55MSwgaW50ZXJzZWN0aW9uLngyIC0gaW50ZXJzZWN0aW9uLngxLCBpbnRlcnNlY3Rpb24ueTIgLSBpbnRlcnNlY3Rpb24ueTEsIHJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRvIGhpZGUgdGhlIGNoYW5uZWwgZnJvbSBiZWluZyBkcmF3biBiYXNlZCBvbiBwYXJhbXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbEluZGV4IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBjaGFubmVsLlxuICAgICAqIEByZXR1cm5zIHtib29sfSBUcnVlIHRvIGhpZGUgdGhlIGNoYW5uZWwsIGZhbHNlIHRvIGRyYXcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoaWRlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlQ2hhbm5lbChjaGFubmVsSW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5zcGxpdENoYW5uZWxzICYmIHRoaXMucGFyYW1zLnNwbGl0Q2hhbm5lbHNPcHRpb25zLmZpbHRlckNoYW5uZWxzLmluY2x1ZGVzKGNoYW5uZWxJbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHByZXBhcmF0aW9uIHRhc2tzIGFuZCBjYWxjdWxhdGlvbnMgd2hpY2ggYXJlIHNoYXJlZCBieSBgZHJhd0JhcnNgXG4gICAgICogYW5kIGBkcmF3V2F2ZWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW118TnVtYmVyLjxBcnJheVtdPn0gcGVha3MgQ2FuIGFsc28gYmUgYW4gYXJyYXkgb2YgYXJyYXlzIGZvclxuICAgICAqIHNwbGl0IGNoYW5uZWwgcmVuZGVyaW5nXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNoYW5uZWxJbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgY2hhbm5lbC4gTm9ybWFsbHlcbiAgICAgKiBzaG91bGQgYmUgMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyP30gc3RhcnQgVGhlIHgtb2Zmc2V0IG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFyZWEgdGhhdFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZC4gSWYgdGhpcyBpc24ndCBzZXQgb25seSBhIGZsYXQgbGluZSBpcyByZW5kZXJlZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyP30gZW5kIFRoZSB4LW9mZnNldCBvZiB0aGUgZW5kIG9mIHRoZSBhcmVhIHRoYXQgc2hvdWxkIGJlXG4gICAgICogcmVuZGVyZWRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgcmVuZGVyIGZ1bmN0aW9uIHRvIGNhbGwsIGUuZy4gYGRyYXdXYXZlYFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkcmF3SW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGNoYW5uZWwgYWZ0ZXIgZmlsdGVyaW5nLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyP30gbm9ybWFsaXplZE1heCBNYXhpbXVtIG1vZHVsYXRpb24gdmFsdWUgYWNyb3NzIGNoYW5uZWxzIGZvciB1c2Ugd2l0aCByZWxhdGl2ZU5vcm1hbGl6YXRpb24uIElnbm9yZWQgd2hlbiB1bmRlZmluZWRcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByZXBhcmVEcmF3XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVEcmF3KHBlYWtzLCBjaGFubmVsSW5kZXgsIHN0YXJ0LCBlbmQsIGZuLCBkcmF3SW5kZXgsIG5vcm1hbGl6ZWRNYXgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdXRpbC5mcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNwbGl0IGNoYW5uZWxzIGFuZCBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCB0aGUgY2hhbm5lbEluZGV4IHNldFxuICAgICAgICBpZiAocGVha3NbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHZhciBjaGFubmVscyA9IHBlYWtzO1xuXG4gICAgICAgICAgaWYgKF90aGlzNy5wYXJhbXMuc3BsaXRDaGFubmVscykge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkQ2hhbm5lbHMgPSBjaGFubmVscy5maWx0ZXIoZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICFfdGhpczcuaGlkZUNoYW5uZWwoaSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFfdGhpczcucGFyYW1zLnNwbGl0Q2hhbm5lbHNPcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgX3RoaXM3LnNldEhlaWdodChNYXRoLm1heChmaWx0ZXJlZENoYW5uZWxzLmxlbmd0aCwgMSkgKiBfdGhpczcucGFyYW1zLmhlaWdodCAqIF90aGlzNy5wYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvdmVyYWxsQWJzTWF4O1xuXG4gICAgICAgICAgICBpZiAoX3RoaXM3LnBhcmFtcy5zcGxpdENoYW5uZWxzT3B0aW9ucyAmJiBfdGhpczcucGFyYW1zLnNwbGl0Q2hhbm5lbHNPcHRpb25zLnJlbGF0aXZlTm9ybWFsaXphdGlvbikge1xuICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbWF4aW11bSBwZWFrIGFjcm9zcyBjaGFubmVscyB0byB1c2UgZm9yIG5vcm1hbGl6YXRpb25cbiAgICAgICAgICAgICAgb3ZlcmFsbEFic01heCA9IHV0aWwubWF4KGNoYW5uZWxzLm1hcChmdW5jdGlvbiAoY2hhbm5lbFBlYWtzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuYWJzTWF4KGNoYW5uZWxQZWFrcyk7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5uZWxQZWFrcywgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXM3LnByZXBhcmVEcmF3KGNoYW5uZWxQZWFrcywgaSwgc3RhcnQsIGVuZCwgZm4sIGZpbHRlcmVkQ2hhbm5lbHMuaW5kZXhPZihjaGFubmVsUGVha3MpLCBvdmVyYWxsQWJzTWF4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBlYWtzID0gY2hhbm5lbHNbMF07XG4gICAgICAgIH0gLy8gUmV0dXJuIGFuZCBkbyBub3QgZHJhdyBjaGFubmVsIHBlYWtzIGlmIGhpZGRlbi5cblxuXG4gICAgICAgIGlmIChfdGhpczcuaGlkZUNoYW5uZWwoY2hhbm5lbEluZGV4KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBjYWxjdWxhdGUgbWF4aW11bSBtb2R1bGF0aW9uIHZhbHVlLCBlaXRoZXIgZnJvbSB0aGUgYmFySGVpZ2h0XG4gICAgICAgIC8vIHBhcmFtZXRlciBvciBpZiBub3JtYWxpemU9dHJ1ZSBmcm9tIHRoZSBsYXJnZXN0IHZhbHVlIGluIHRoZSBwZWFrXG4gICAgICAgIC8vIHNldFxuXG5cbiAgICAgICAgdmFyIGFic21heCA9IDEgLyBfdGhpczcucGFyYW1zLmJhckhlaWdodDtcblxuICAgICAgICBpZiAoX3RoaXM3LnBhcmFtcy5ub3JtYWxpemUpIHtcbiAgICAgICAgICBhYnNtYXggPSBub3JtYWxpemVkTWF4ID09PSB1bmRlZmluZWQgPyB1dGlsLmFic01heChwZWFrcykgOiBub3JtYWxpemVkTWF4O1xuICAgICAgICB9IC8vIEJhciB3YXZlIGRyYXdzIHRoZSBib3R0b20gb25seSBhcyBhIHJlZmxlY3Rpb24gb2YgdGhlIHRvcCxcbiAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCBuZWdhdGl2ZSB2YWx1ZXNcblxuXG4gICAgICAgIHZhciBoYXNNaW5WYWxzID0gW10uc29tZS5jYWxsKHBlYWtzLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbCA8IDA7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gX3RoaXM3LnBhcmFtcy5oZWlnaHQgKiBfdGhpczcucGFyYW1zLnBpeGVsUmF0aW87XG4gICAgICAgIHZhciBoYWxmSCA9IGhlaWdodCAvIDI7XG4gICAgICAgIHZhciBvZmZzZXRZID0gaGVpZ2h0ICogZHJhd0luZGV4IHx8IDA7IC8vIE92ZXJyaWRlIG9mZnNldFkgaWYgb3ZlcmxheSBpcyB0cnVlXG5cbiAgICAgICAgaWYgKF90aGlzNy5wYXJhbXMuc3BsaXRDaGFubmVsc09wdGlvbnMgJiYgX3RoaXM3LnBhcmFtcy5zcGxpdENoYW5uZWxzT3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgICAgb2Zmc2V0WSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm4oe1xuICAgICAgICAgIGFic21heDogYWJzbWF4LFxuICAgICAgICAgIGhhc01pblZhbHM6IGhhc01pblZhbHMsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSxcbiAgICAgICAgICBoYWxmSDogaGFsZkgsXG4gICAgICAgICAgcGVha3M6IHBlYWtzLFxuICAgICAgICAgIGNoYW5uZWxJbmRleDogY2hhbm5lbEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmaWxsIHN0eWxlcyBmb3IgYSBjZXJ0YWluIGVudHJ5ICh3YXZlIGFuZCBwcm9ncmVzcylcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q2FudmFzRW50cnl9IGVudHJ5IFRhcmdldCBlbnRyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB3YXZlQ29sb3IgV2F2ZSBjb2xvciB0byBkcmF3IHRoaXMgZW50cnlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZ3Jlc3NDb2xvciBQcm9ncmVzcyBjb2xvciB0byBkcmF3IHRoaXMgZW50cnlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEZpbGxTdHlsZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbFN0eWxlcyhlbnRyeSkge1xuICAgICAgdmFyIHdhdmVDb2xvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5wYXJhbXMud2F2ZUNvbG9yO1xuICAgICAgdmFyIHByb2dyZXNzQ29sb3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRoaXMucGFyYW1zLnByb2dyZXNzQ29sb3I7XG4gICAgICBlbnRyeS5zZXRGaWxsU3R5bGVzKHdhdmVDb2xvciwgcHJvZ3Jlc3NDb2xvcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBpbWFnZSBkYXRhIG9mIHRoZSBtdWx0aS1jYW52YXNcbiAgICAgKlxuICAgICAqIFdoZW4gdXNpbmcgYSBgdHlwZWAgb2YgYCdibG9iJ2AsIHRoaXMgd2lsbCByZXR1cm4gYSBgUHJvbWlzZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0PSdpbWFnZS9wbmcnIEFuIG9wdGlvbmFsIHZhbHVlIG9mIGEgZm9ybWF0IHR5cGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHk9MC45MiBBbiBvcHRpb25hbCB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGU9J2RhdGFVUkwnIEVpdGhlciAnZGF0YVVSTCcgb3IgJ2Jsb2InLlxuICAgICAqIEByZXR1cm4ge3N0cmluZ3xzdHJpbmdbXXxQcm9taXNlfSBXaGVuIHVzaW5nIHRoZSBkZWZhdWx0IGAnZGF0YVVSTCdgXG4gICAgICogYHR5cGVgIHRoaXMgcmV0dXJucyBhIHNpbmdsZSBkYXRhIFVSTCBvciBhbiBhcnJheSBvZiBkYXRhIFVSTHMsXG4gICAgICogb25lIGZvciBlYWNoIGNhbnZhcy4gV2hlbiB1c2luZyB0aGUgYCdibG9iJ2AgYHR5cGVgIHRoaXMgcmV0dXJucyBhXG4gICAgICogYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBgQmxvYmAgaW5zdGFuY2VzLCBvbmUgZm9yIGVhY2hcbiAgICAgKiBjYW52YXMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRJbWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbWFnZShmb3JtYXQsIHF1YWxpdHksIHR5cGUpIHtcbiAgICAgIGlmICh0eXBlID09PSAnYmxvYicpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuY2FudmFzZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgIHJldHVybiBlbnRyeS5nZXRJbWFnZShmb3JtYXQsIHF1YWxpdHksIHR5cGUpO1xuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkYXRhVVJMJykge1xuICAgICAgICB2YXIgaW1hZ2VzID0gdGhpcy5jYW52YXNlcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJ5LmdldEltYWdlKGZvcm1hdCwgcXVhbGl0eSwgdHlwZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW1hZ2VzLmxlbmd0aCA+IDEgPyBpbWFnZXMgOiBpbWFnZXNbMF07XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbmRlciB0aGUgbmV3IHByb2dyZXNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gWC1vZmZzZXQgb2YgcHJvZ3Jlc3MgcG9zaXRpb24gaW4gcGl4ZWxzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVQcm9ncmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyhwb3NpdGlvbikge1xuICAgICAgdGhpcy5zdHlsZSh0aGlzLnByb2dyZXNzV2F2ZSwge1xuICAgICAgICB3aWR0aDogcG9zaXRpb24gKyAncHgnXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTXVsdGlDYW52YXM7XG59KF9kcmF3ZXIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE11bHRpQ2FudmFzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL21lZGlhZWxlbWVudC13ZWJhdWRpby5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvbWVkaWFlbGVtZW50LXdlYmF1ZGlvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX21lZGlhZWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tZWRpYWVsZW1lbnQgKi8gXCIuL3NyYy9tZWRpYWVsZW1lbnQuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfVxuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG4vKipcbiAqIE1lZGlhRWxlbWVudFdlYkF1ZGlvIGJhY2tlbmQ6IGxvYWQgYXVkaW8gdmlhIGFuIEhUTUw1IGF1ZGlvIHRhZywgYnV0IHBsYXliYWNrIHdpdGggdGhlIFdlYkF1ZGlvIEFQSS5cbiAqIFRoZSBhZHZhbnRhZ2UgaGVyZSBpcyB0aGF0IHRoZSBodG1sNSA8YXVkaW8+IHRhZyBjYW4gcGVyZm9ybSByYW5nZSByZXF1ZXN0cyBvbiB0aGUgc2VydmVyIGFuZCBub3RcbiAqIGJ1ZmZlciB0aGUgZW50aXJlIGZpbGUgaW4gb25lIHJlcXVlc3QsIGFuZCB5b3Ugc3RpbGwgZ2V0IHRoZSBmaWx0ZXJpbmcgYW5kIHNjcmlwdGluZyBmdW5jdGlvbmFsaXR5XG4gKiBvZiB0aGUgd2ViYXVkaW8gQVBJLlxuICogTm90ZSB0aGF0IGluIG9yZGVyIHRvIHVzZSByYW5nZSByZXF1ZXN0cyBhbmQgcHJldmVudCBidWZmZXJpbmcsIHlvdSBtdXN0IHByb3ZpZGUgcGVhayBkYXRhLlxuICpcbiAqIEBzaW5jZSAzLjIuMFxuICovXG52YXIgTWVkaWFFbGVtZW50V2ViQXVkaW8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9NZWRpYUVsZW1lbnQpIHtcbiAgX2luaGVyaXRzKE1lZGlhRWxlbWVudFdlYkF1ZGlvLCBfTWVkaWFFbGVtZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1lZGlhRWxlbWVudFdlYkF1ZGlvKTtcblxuICAvKipcbiAgICogQ29uc3RydWN0IHRoZSBiYWNrZW5kXG4gICAqXG4gICAqIEBwYXJhbSB7V2F2ZXN1cmZlclBhcmFtc30gcGFyYW1zIFdhdmVzdXJmZXIgcGFyYW1ldGVyc1xuICAgKi9cbiAgZnVuY3Rpb24gTWVkaWFFbGVtZW50V2ViQXVkaW8ocGFyYW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhRWxlbWVudFdlYkF1ZGlvKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcGFyYW1zKTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnNvdXJjZU1lZGlhRWxlbWVudCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHRoZSBiYWNrZW5kLCBjYWxsZWQgaW4gYHdhdmVzdXJmZXIuY3JlYXRlQmFja2VuZCgpYFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhNZWRpYUVsZW1lbnRXZWJBdWRpbywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5zZXRQbGF5YmFja1JhdGUodGhpcy5wYXJhbXMuYXVkaW9SYXRlKTtcbiAgICAgIHRoaXMuY3JlYXRlVGltZXIoKTtcbiAgICAgIHRoaXMuY3JlYXRlVm9sdW1lTm9kZSgpO1xuICAgICAgdGhpcy5jcmVhdGVTY3JpcHROb2RlKCk7XG4gICAgICB0aGlzLmNyZWF0ZUFuYWx5c2VyTm9kZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCBjYWxsZWQgYnkgYm90aCBgbG9hZGAgKGZyb20gdXJsKVxuICAgICAqIGFuZCBgbG9hZEVsdGAgKGV4aXN0aW5nIG1lZGlhIGVsZW1lbnQpIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxNZWRpYUVsZW1lbnR9IG1lZGlhIEhUTUw1IEF1ZGlvIG9yIFZpZGVvIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfE51bWJlci48QXJyYXlbXT59IHBlYWtzIEFycmF5IG9mIHBlYWsgZGF0YVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVsb2FkIEhUTUwgNSBwcmVsb2FkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZChtZWRpYSwgcGVha3MsIHByZWxvYWQpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1lZGlhRWxlbWVudFdlYkF1ZGlvLnByb3RvdHlwZSksIFwiX2xvYWRcIiwgdGhpcykuY2FsbCh0aGlzLCBtZWRpYSwgcGVha3MsIHByZWxvYWQpO1xuXG4gICAgICB0aGlzLmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZShtZWRpYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBNZWRpYUVsZW1lbnRTb3VyY2Ugbm9kZVxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQHBhcmFtIHtIVE1MTWVkaWFFbGVtZW50fSBtZWRpYUVsZW1lbnQgSFRNTDUgQXVkaW8gdG8gbG9hZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZShtZWRpYUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuc291cmNlTWVkaWFFbGVtZW50ID0gdGhpcy5hYy5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UobWVkaWFFbGVtZW50KTtcbiAgICAgIHRoaXMuc291cmNlTWVkaWFFbGVtZW50LmNvbm5lY3QodGhpcy5hbmFseXNlcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShzdGFydCwgZW5kKSB7XG4gICAgICB0aGlzLnJlc3VtZUF1ZGlvQ29udGV4dCgpO1xuICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1lZGlhRWxlbWVudFdlYkF1ZGlvLnByb3RvdHlwZSksIFwicGxheVwiLCB0aGlzKS5jYWxsKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdhdmVzdXJmZXIgaXMgZGVzdHJveWVkXG4gICAgICpcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1lZGlhRWxlbWVudFdlYkF1ZGlvLnByb3RvdHlwZSksIFwiZGVzdHJveVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgICB0aGlzLmRlc3Ryb3lXZWJBdWRpbygpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNZWRpYUVsZW1lbnRXZWJBdWRpbztcbn0oX21lZGlhZWxlbWVudC5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTWVkaWFFbGVtZW50V2ViQXVkaW87XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvbWVkaWFlbGVtZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9tZWRpYWVsZW1lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfd2ViYXVkaW8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vd2ViYXVkaW8gKi8gXCIuL3NyYy93ZWJhdWRpby5qc1wiKSk7XG5cbnZhciB1dGlsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsICovIFwiLi9zcmMvdXRpbC9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpOyB9XG5cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbi8qKlxuICogTWVkaWFFbGVtZW50IGJhY2tlbmRcbiAqL1xudmFyIE1lZGlhRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dlYkF1ZGlvKSB7XG4gIF9pbmhlcml0cyhNZWRpYUVsZW1lbnQsIF9XZWJBdWRpbyk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihNZWRpYUVsZW1lbnQpO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgdGhlIGJhY2tlbmRcbiAgICpcbiAgICogQHBhcmFtIHtXYXZlc3VyZmVyUGFyYW1zfSBwYXJhbXMgV2F2ZXN1cmZlciBwYXJhbWV0ZXJzXG4gICAqL1xuICBmdW5jdGlvbiBNZWRpYUVsZW1lbnQocGFyYW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhRWxlbWVudCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHBhcmFtcyk7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGx5IGEgZHVtbXkgbWVkaWEgZWxlbWVudCB0byBjYXRjaCBlcnJvcnMuIE9uY2UgYF9sb2FkYCBpc1xuICAgICAqIGNhbGxlZCwgdGhpcyB3aWxsIGNvbnRhaW4gdGhlIGFjdHVhbCBgSFRNTE1lZGlhRWxlbWVudGAuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICAgIF90aGlzLm1lZGlhID0ge1xuICAgICAgY3VycmVudFRpbWU6IDAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgIHBsYXliYWNrUmF0ZTogMSxcbiAgICAgIHBsYXk6IGZ1bmN0aW9uIHBsYXkoKSB7fSxcbiAgICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHt9LFxuICAgICAgdm9sdW1lOiAwXG4gICAgfTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLm1lZGlhVHlwZSA9IHBhcmFtcy5tZWRpYVR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmVsZW1lbnRQb3NpdGlvbiA9IHBhcmFtcy5lbGVtZW50UG9zaXRpb247XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5wZWFrcyA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5wbGF5YmFja1JhdGUgPSAxO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMudm9sdW1lID0gMTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmlzTXV0ZWQgPSBmYWxzZTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5vblBsYXlFbmQgPSBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMubWVkaWFMaXN0ZW5lcnMgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpc2UgdGhlIGJhY2tlbmQsIGNhbGxlZCBpbiBgd2F2ZXN1cmZlci5jcmVhdGVCYWNrZW5kKClgXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKE1lZGlhRWxlbWVudCwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5zZXRQbGF5YmFja1JhdGUodGhpcy5wYXJhbXMuYXVkaW9SYXRlKTtcbiAgICAgIHRoaXMuY3JlYXRlVGltZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byBtZWRpYSBlbGVtZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldHVwTWVkaWFMaXN0ZW5lcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwTWVkaWFMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5tZWRpYUxpc3RlbmVycy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmZpcmVFdmVudCgnZXJyb3InLCAnRXJyb3IgbG9hZGluZyBtZWRpYSBlbGVtZW50Jyk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLm1lZGlhTGlzdGVuZXJzLmNhbnBsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ2NhbnBsYXknKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMubWVkaWFMaXN0ZW5lcnMuZW5kZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ2ZpbmlzaCcpO1xuICAgICAgfTsgLy8gbGlzdGVuIHRvIGFuZCByZWxheSBwbGF5LCBwYXVzZSBhbmQgc2Vla2VkIGV2ZW50cyB0byBlbmFibGVcbiAgICAgIC8vIHBsYXliYWNrIGNvbnRyb2wgZnJvbSB0aGUgZXh0ZXJuYWwgbWVkaWEgZWxlbWVudFxuXG5cbiAgICAgIHRoaXMubWVkaWFMaXN0ZW5lcnMucGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmZpcmVFdmVudCgncGxheScpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5tZWRpYUxpc3RlbmVycy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLmZpcmVFdmVudCgncGF1c2UnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMubWVkaWFMaXN0ZW5lcnMuc2Vla2VkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ3NlZWsnKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMubWVkaWFMaXN0ZW5lcnMudm9sdW1lY2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIF90aGlzMi5pc011dGVkID0gX3RoaXMyLm1lZGlhLm11dGVkO1xuXG4gICAgICAgIGlmIChfdGhpczIuaXNNdXRlZCkge1xuICAgICAgICAgIF90aGlzMi52b2x1bWUgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi52b2x1bWUgPSBfdGhpczIubWVkaWEudm9sdW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmZpcmVFdmVudCgndm9sdW1lJyk7XG4gICAgICB9OyAvLyByZXNldCBldmVudCBsaXN0ZW5lcnNcblxuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLm1lZGlhTGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBfdGhpczIubWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcihpZCwgX3RoaXMyLm1lZGlhTGlzdGVuZXJzW2lkXSk7XG5cbiAgICAgICAgX3RoaXMyLm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoaWQsIF90aGlzMi5tZWRpYUxpc3RlbmVyc1tpZF0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRpbWVyIHRvIHByb3ZpZGUgYSBtb3JlIHByZWNpc2UgYGF1ZGlvcHJvY2Vzc2AgZXZlbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVUaW1lclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUaW1lcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb25BdWRpb1Byb2Nlc3MgPSBmdW5jdGlvbiBvbkF1ZGlvUHJvY2VzcygpIHtcbiAgICAgICAgaWYgKF90aGlzMy5pc1BhdXNlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLmZpcmVFdmVudCgnYXVkaW9wcm9jZXNzJywgX3RoaXMzLmdldEN1cnJlbnRUaW1lKCkpOyAvLyBDYWxsIGFnYWluIGluIHRoZSBuZXh0IGZyYW1lXG5cblxuICAgICAgICB1dGlsLmZyYW1lKG9uQXVkaW9Qcm9jZXNzKSgpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vbigncGxheScsIG9uQXVkaW9Qcm9jZXNzKTsgLy8gVXBkYXRlIHRoZSBwcm9ncmVzcyBvbmUgbW9yZSB0aW1lIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBzdHVjayBpblxuICAgICAgLy8gY2FzZSBvZiBsb3dlciBmcmFtZXJhdGVzXG5cbiAgICAgIHRoaXMub24oJ3BhdXNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuZmlyZUV2ZW50KCdhdWRpb3Byb2Nlc3MnLCBfdGhpczMuZ2V0Q3VycmVudFRpbWUoKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIG1lZGlhIGVsZW1lbnQgd2l0aCB1cmwgYXMgaXRzIHNvdXJjZSxcbiAgICAgKiBhbmQgYXBwZW5kIHRvIGNvbnRhaW5lciBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBQYXRoIHRvIG1lZGlhIGZpbGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgSFRNTCBlbGVtZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBBcnJheSBvZiBwZWFrIGRhdGFcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlbG9hZCBIVE1MIDUgcHJlbG9hZCBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGB1cmxgIGFyZ3VtZW50IGlzIG5vdCBhIHZhbGlkIG1lZGlhXG4gICAgICogZWxlbWVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGNvbnRhaW5lciwgcGVha3MsIHByZWxvYWQpIHtcbiAgICAgIHZhciBtZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5tZWRpYVR5cGUpO1xuICAgICAgbWVkaWEuY29udHJvbHMgPSB0aGlzLnBhcmFtcy5tZWRpYUNvbnRyb2xzO1xuICAgICAgbWVkaWEuYXV0b3BsYXkgPSB0aGlzLnBhcmFtcy5hdXRvcGxheSB8fCBmYWxzZTtcbiAgICAgIG1lZGlhLnByZWxvYWQgPSBwcmVsb2FkID09IG51bGwgPyAnYXV0bycgOiBwcmVsb2FkO1xuICAgICAgbWVkaWEuc3JjID0gdXJsO1xuICAgICAgbWVkaWEuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICB2YXIgcHJldk1lZGlhID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IodGhpcy5tZWRpYVR5cGUpO1xuXG4gICAgICBpZiAocHJldk1lZGlhKSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChwcmV2TWVkaWEpO1xuICAgICAgfVxuXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobWVkaWEpO1xuXG4gICAgICB0aGlzLl9sb2FkKG1lZGlhLCBwZWFrcywgcHJlbG9hZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvYWQgZXhpc3RpbmcgbWVkaWEgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTE1lZGlhRWxlbWVudH0gZWx0IEhUTUw1IEF1ZGlvIG9yIFZpZGVvIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfE51bWJlci48QXJyYXlbXT59IHBlYWtzIEFycmF5IG9mIHBlYWsgZGF0YVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZEVsdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkRWx0KGVsdCwgcGVha3MpIHtcbiAgICAgIGVsdC5jb250cm9scyA9IHRoaXMucGFyYW1zLm1lZGlhQ29udHJvbHM7XG4gICAgICBlbHQuYXV0b3BsYXkgPSB0aGlzLnBhcmFtcy5hdXRvcGxheSB8fCBmYWxzZTtcblxuICAgICAgdGhpcy5fbG9hZChlbHQsIHBlYWtzLCBlbHQucHJlbG9hZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCBjYWxsZWQgYnkgYm90aCBgbG9hZGAgKGZyb20gdXJsKVxuICAgICAqIGFuZCBgbG9hZEVsdGAgKGV4aXN0aW5nIG1lZGlhIGVsZW1lbnQpIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxNZWRpYUVsZW1lbnR9IG1lZGlhIEhUTUw1IEF1ZGlvIG9yIFZpZGVvIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfE51bWJlci48QXJyYXlbXT59IHBlYWtzIEFycmF5IG9mIHBlYWsgZGF0YVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVsb2FkIEhUTUwgNSBwcmVsb2FkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgYG1lZGlhYCBhcmd1bWVudCBpcyBub3QgYSB2YWxpZCBtZWRpYVxuICAgICAqIGVsZW1lbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9sb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkKG1lZGlhLCBwZWFrcywgcHJlbG9hZCkge1xuICAgICAgLy8gdmVyaWZ5IG1lZGlhIGVsZW1lbnQgaXMgdmFsaWRcbiAgICAgIGlmICghKG1lZGlhIGluc3RhbmNlb2YgSFRNTE1lZGlhRWxlbWVudCkgfHwgdHlwZW9mIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWVkaWEgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbGlkIG1lZGlhIGVsZW1lbnQnKTtcbiAgICAgIH0gLy8gbG9hZCBtdXN0IGJlIGNhbGxlZCBtYW51YWxseSBvbiBpT1MsIG90aGVyd2lzZSBwZWFrcyB3b24ndCBkcmF3XG4gICAgICAvLyB1bnRpbCBhIHVzZXIgaW50ZXJhY3Rpb24gdHJpZ2dlcnMgbG9hZCAtLT4gJ3JlYWR5JyBldmVudFxuICAgICAgLy9cbiAgICAgIC8vIG5vdGUgdGhhdCB3ZSBhdm9pZCBjYWxsaW5nIG1lZGlhLmxvYWQgaGVyZSB3aGVuIGdpdmVuIHBlYWtzIGFuZCBwcmVsb2FkID09ICdub25lJ1xuICAgICAgLy8gYXMgdGhpcyBhbG1vc3QgYWx3YXlzIHRyaWdnZXJzIHNvbWUgYnJvd3NlciBmZXRjaCBvZiB0aGUgbWVkaWEuXG5cblxuICAgICAgaWYgKHR5cGVvZiBtZWRpYS5sb2FkID09ICdmdW5jdGlvbicgJiYgIShwZWFrcyAmJiBwcmVsb2FkID09ICdub25lJykpIHtcbiAgICAgICAgLy8gUmVzZXRzIHRoZSBtZWRpYSBlbGVtZW50IGFuZCByZXN0YXJ0cyB0aGUgbWVkaWEgcmVzb3VyY2UuIEFueVxuICAgICAgICAvLyBwZW5kaW5nIGV2ZW50cyBhcmUgZGlzY2FyZGVkLiBIb3cgbXVjaCBtZWRpYSBkYXRhIGlzIGZldGNoZWQgaXNcbiAgICAgICAgLy8gc3RpbGwgYWZmZWN0ZWQgYnkgdGhlIHByZWxvYWQgYXR0cmlidXRlLlxuICAgICAgICBtZWRpYS5sb2FkKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWVkaWEgPSBtZWRpYTtcblxuICAgICAgdGhpcy5fc2V0dXBNZWRpYUxpc3RlbmVycygpO1xuXG4gICAgICB0aGlzLnBlYWtzID0gcGVha3M7XG4gICAgICB0aGlzLm9uUGxheUVuZCA9IG51bGw7XG4gICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICB0aGlzLmlzTXV0ZWQgPSBtZWRpYS5tdXRlZDtcbiAgICAgIHRoaXMuc2V0UGxheWJhY2tSYXRlKHRoaXMucGxheWJhY2tSYXRlKTtcbiAgICAgIHRoaXMuc2V0Vm9sdW1lKHRoaXMudm9sdW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgd2F2ZXN1cmZlci5pc1BsYXlpbmcoKWAgYW5kIGB3YXZlc3VyZmVyLnBsYXlQYXVzZSgpYFxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gTWVkaWEgcGF1c2VkIG9yIG5vdFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNQYXVzZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQYXVzZWQoKSB7XG4gICAgICByZXR1cm4gIXRoaXMubWVkaWEgfHwgdGhpcy5tZWRpYS5wYXVzZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYHdhdmVzdXJmZXIuZ2V0RHVyYXRpb24oKWBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gRHVyYXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZXhwbGljaXREdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBsaWNpdER1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHVyYXRpb24gPSAodGhpcy5idWZmZXIgfHwgdGhpcy5tZWRpYSkuZHVyYXRpb247XG5cbiAgICAgIGlmIChkdXJhdGlvbiA+PSBJbmZpbml0eSkge1xuICAgICAgICAvLyBzdHJlYW1pbmcgYXVkaW9cbiAgICAgICAgZHVyYXRpb24gPSB0aGlzLm1lZGlhLnNlZWthYmxlLmVuZCgwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHRpbWUgaW4gc2Vjb25kcyByZWxhdGl2ZSB0byB0aGUgYXVkaW8tY2xpcCdzXG4gICAgICogZHVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEN1cnJlbnQgdGltZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZWRpYSAmJiB0aGlzLm1lZGlhLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHBvc2l0aW9uIGZyb20gMCB0byAxXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEN1cnJlbnQgcG9zaXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBsYXllZFBlcmNlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsYXllZFBlcmNlbnRzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRpbWUoKSAvIHRoaXMuZ2V0RHVyYXRpb24oKSB8fCAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGF1ZGlvIHNvdXJjZSBwbGF5YmFjayByYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBQbGF5YmFjayByYXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGxheWJhY2tSYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWJhY2tSYXRlIHx8IHRoaXMubWVkaWEucGxheWJhY2tSYXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGF1ZGlvIHNvdXJjZSBwbGF5YmFjayByYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFBsYXliYWNrIHJhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUodmFsdWUpIHtcbiAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWUgfHwgMTtcbiAgICAgIHRoaXMubWVkaWEucGxheWJhY2tSYXRlID0gdGhpcy5wbGF5YmFja1JhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYHdhdmVzdXJmZXIuc2Vla1RvKClgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgUG9zaXRpb24gdG8gc3RhcnQgYXQgaW4gc2Vjb25kc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzdGFydCkge1xuICAgICAgaWYgKHN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5tZWRpYS5jdXJyZW50VGltZSA9IHN0YXJ0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsZWFyUGxheUVuZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQbGF5cyB0aGUgbG9hZGVkIGF1ZGlvIHJlZ2lvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTdGFydCBvZmZzZXQgaW4gc2Vjb25kcywgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZ1xuICAgICAqIG9mIGEgY2xpcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFdoZW4gdG8gc3RvcCwgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiBhIGNsaXAuXG4gICAgICogQGVtaXRzIE1lZGlhRWxlbWVudCNwbGF5XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzdWx0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoc3RhcnQsIGVuZCkge1xuICAgICAgdGhpcy5zZWVrVG8oc3RhcnQpO1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLm1lZGlhLnBsYXkoKTtcbiAgICAgIGVuZCAmJiB0aGlzLnNldFBsYXlFbmQoZW5kKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXVzZXMgdGhlIGxvYWRlZCBhdWRpby5cbiAgICAgKlxuICAgICAqIEBlbWl0cyBNZWRpYUVsZW1lbnQjcGF1c2VcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXN1bHRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdmFyIHByb21pc2U7XG5cbiAgICAgIGlmICh0aGlzLm1lZGlhKSB7XG4gICAgICAgIHByb21pc2UgPSB0aGlzLm1lZGlhLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xlYXJQbGF5RW5kKCk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBwbGF5IGVuZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBXaGVyZSB0byBlbmRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFBsYXlFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheUVuZChlbmQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNsZWFyUGxheUVuZCgpO1xuXG4gICAgICB0aGlzLl9vblBsYXlFbmQgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICBpZiAodGltZSA+PSBlbmQpIHtcbiAgICAgICAgICBfdGhpczQucGF1c2UoKTtcblxuICAgICAgICAgIF90aGlzNC5zZWVrVG8oZW5kKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vbignYXVkaW9wcm9jZXNzJywgdGhpcy5fb25QbGF5RW5kKTtcbiAgICB9XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclBsYXlFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJQbGF5RW5kKCkge1xuICAgICAgaWYgKHRoaXMuX29uUGxheUVuZCkge1xuICAgICAgICB0aGlzLnVuKCdhdWRpb3Byb2Nlc3MnLCB0aGlzLl9vblBsYXlFbmQpO1xuICAgICAgICB0aGlzLl9vblBsYXlFbmQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBtYXggYW5kIG1pbiB2YWx1ZSBvZiB0aGUgd2F2ZWZvcm0gd2hlbiBicm9rZW4gaW50b1xuICAgICAqIDxsZW5ndGg+IHN1YnJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggSG93IG1hbnkgc3VicmFuZ2VzIHRvIGJyZWFrIHRoZSB3YXZlZm9ybSBpbnRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdCBGaXJzdCBzYW1wbGUgaW4gdGhlIHJlcXVpcmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0IExhc3Qgc2FtcGxlIGluIHRoZSByZXF1aXJlZCByYW5nZS5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBBcnJheSBvZiAyKjxsZW5ndGg+IHBlYWtzIG9yIGFycmF5IG9mXG4gICAgICogYXJyYXlzIG9mIHBlYWtzIGNvbnNpc3Rpbmcgb2YgKG1heCwgbWluKSB2YWx1ZXMgZm9yIGVhY2ggc3VicmFuZ2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQZWFrc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQZWFrcyhsZW5ndGgsIGZpcnN0LCBsYXN0KSB7XG4gICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1lZGlhRWxlbWVudC5wcm90b3R5cGUpLCBcImdldFBlYWtzXCIsIHRoaXMpLmNhbGwodGhpcywgbGVuZ3RoLCBmaXJzdCwgbGFzdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBlYWtzIHx8IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNpbmsgaWQgZm9yIHRoZSBtZWRpYSBwbGF5ZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCBTdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIGF1ZGlvIGRldmljZSBpZC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYHVuZGVmaW5lZGAgd2hlbiB0aGVyZVxuICAgICAqIGFyZSBubyBlcnJvcnMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRTaW5rSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2lua0lkKGRldmljZUlkKSB7XG4gICAgICBpZiAoZGV2aWNlSWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1lZGlhLnNldFNpbmtJZCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3NldFNpbmtJZCBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhLnNldFNpbmtJZChkZXZpY2VJZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgZGV2aWNlSWQ6ICcgKyBkZXZpY2VJZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgdm9sdW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHZhbHVlIEEgZmxvYXRpbmcgcG9pbnQgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZvbHVtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZvbHVtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhdWRpbyB2b2x1bWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBBIGZsb2F0aW5nIHBvaW50IHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodmFsdWUpIHtcbiAgICAgIHRoaXMudm9sdW1lID0gdmFsdWU7IC8vIG5vIG5lZWQgdG8gY2hhbmdlIHdoZW4gaXQncyBhbHJlYWR5IGF0IHRoYXQgdm9sdW1lXG5cbiAgICAgIGlmICh0aGlzLm1lZGlhLnZvbHVtZSAhPT0gdGhpcy52b2x1bWUpIHtcbiAgICAgICAgdGhpcy5tZWRpYS52b2x1bWUgPSB0aGlzLnZvbHVtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5hYmxlIG9yIGRpc2FibGUgbXV0ZWQgYXVkaW9cbiAgICAgKlxuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbXV0ZWQgU3BlY2lmeSBgdHJ1ZWAgdG8gbXV0ZSBhdWRpby5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldE11dGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TXV0ZShtdXRlZCkge1xuICAgICAgLy8gVGhpcyBjYXVzZXMgYSB2b2x1bWUgY2hhbmdlIHRvIGJlIGVtaXR0ZWQgdG9vIHRocm91Z2ggdGhlXG4gICAgICAvLyB2b2x1bWVjaGFuZ2UgZXZlbnQgbGlzdGVuZXIuXG4gICAgICB0aGlzLmlzTXV0ZWQgPSB0aGlzLm1lZGlhLm11dGVkID0gbXV0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gd2F2ZXN1cmZlciBpcyBkZXN0cm95ZWRcbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIHRoaXMudW5BbGwoKTtcbiAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTsgLy8gY2xlYW51cCBtZWRpYSBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgT2JqZWN0LmtleXModGhpcy5tZWRpYUxpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKF90aGlzNS5tZWRpYSkge1xuICAgICAgICAgIF90aGlzNS5tZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKGlkLCBfdGhpczUubWVkaWFMaXN0ZW5lcnNbaWRdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnBhcmFtcy5yZW1vdmVNZWRpYUVsZW1lbnRPbkRlc3Ryb3kgJiYgdGhpcy5tZWRpYSAmJiB0aGlzLm1lZGlhLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdGhpcy5tZWRpYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubWVkaWEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1lZGlhID0gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVkaWFFbGVtZW50O1xufShfd2ViYXVkaW8uZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1lZGlhRWxlbWVudDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wZWFrY2FjaGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BlYWtjYWNoZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyoqXG4gKiBDYWNoZXMgdGhlIGRlY29kZWQgcGVha3MgZGF0YSB0byBpbXByb3ZlIHJlbmRlcmluZyBzcGVlZCBmb3IgbGFyZ2UgYXVkaW9cbiAqXG4gKiBJcyB1c2VkIGlmIHRoZSBvcHRpb24gcGFyYW1ldGVyIGBwYXJ0aWFsUmVuZGVyYCBpcyBzZXQgdG8gYHRydWVgXG4gKi9cbnZhciBQZWFrQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogSW5zdGFudGlhdGUgY2FjaGVcbiAgICovXG4gIGZ1bmN0aW9uIFBlYWtDYWNoZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGVha0NhY2hlKTtcblxuICAgIHRoaXMuY2xlYXJQZWFrQ2FjaGUoKTtcbiAgfVxuICAvKipcbiAgICogRW1wdHkgdGhlIGNhY2hlXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFBlYWtDYWNoZSwgW3tcbiAgICBrZXk6IFwiY2xlYXJQZWFrQ2FjaGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJQZWFrQ2FjaGUoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZsYXQgYXJyYXkgd2l0aCBlbnRyaWVzIHRoYXQgYXJlIGFsd2F5cyBpbiBwYWlycyB0byBtYXJrIHRoZVxuICAgICAgICogYmVnaW5uaW5nIGFuZCBlbmQgb2YgZWFjaCBzdWJyYW5nZS4gIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBzbyB3ZSBjYW5cbiAgICAgICAqIGl0ZXJhdGUgb3ZlciB0aGUgcGFpcnMgZm9yIGVhc3kgc2V0IGRpZmZlcmVuY2Ugb3BlcmF0aW9ucy5cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMucGVha0NhY2hlUmFuZ2VzID0gW107XG4gICAgICAvKipcbiAgICAgICAqIExlbmd0aCBvZiB0aGUgZW50aXJlIGNhY2hhYmxlIHJlZ2lvbiwgdXNlZCBmb3IgcmVzZXR0aW5nIHRoZSBjYWNoZVxuICAgICAgICogd2hlbiB0aGlzIGNoYW5nZXMgKHpvb20gZXZlbnRzLCBmb3IgaW5zdGFuY2UpLlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuXG4gICAgICB0aGlzLnBlYWtDYWNoZUxlbmd0aCA9IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSByYW5nZSBvZiBwZWFrcyB0byB0aGUgY2FjaGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgcmFuZ2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHggb2Zmc2V0IG9mIHRoZSBzdGFydCBvZiB0aGUgcmFuZ2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSB4IG9mZnNldCBvZiB0aGUgZW5kIG9mIHRoZSByYW5nZVxuICAgICAqIEByZXR1cm4ge051bWJlci48QXJyYXlbXT59IEFycmF5IHdpdGggYXJyYXlzIG9mIG51bWJlcnNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFkZFJhbmdlVG9QZWFrQ2FjaGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmFuZ2VUb1BlYWtDYWNoZShsZW5ndGgsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmIChsZW5ndGggIT0gdGhpcy5wZWFrQ2FjaGVMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jbGVhclBlYWtDYWNoZSgpO1xuICAgICAgICB0aGlzLnBlYWtDYWNoZUxlbmd0aCA9IGxlbmd0aDtcbiAgICAgIH0gLy8gUmV0dXJuIHJhbmdlcyB0aGF0IHdlcmVuJ3QgaW4gdGhlIGNhY2hlIGJlZm9yZSB0aGUgY2FsbC5cblxuXG4gICAgICB2YXIgdW5jYWNoZWRSYW5nZXMgPSBbXTtcbiAgICAgIHZhciBpID0gMDsgLy8gU2tpcCByYW5nZXMgYmVmb3JlIHRoZSBjdXJyZW50IHN0YXJ0LlxuXG4gICAgICB3aGlsZSAoaSA8IHRoaXMucGVha0NhY2hlUmFuZ2VzLmxlbmd0aCAmJiB0aGlzLnBlYWtDYWNoZVJhbmdlc1tpXSA8IHN0YXJ0KSB7XG4gICAgICAgIGkrKztcbiAgICAgIH0gLy8gSWYgfGl8IGlzIGV2ZW4sIHxzdGFydHwgZmFsbHMgYWZ0ZXIgYW4gZXhpc3RpbmcgcmFuZ2UuICBPdGhlcndpc2UsXG4gICAgICAvLyB8c3RhcnR8IGZhbGxzIGJldHdlZW4gYW4gZXhpc3RpbmcgcmFuZ2UsIGFuZCB0aGUgdW5jYWNoZWQgcmVnaW9uXG4gICAgICAvLyBzdGFydHMgd2hlbiB3ZSBlbmNvdW50ZXIgdGhlIG5leHQgbm9kZSBpbiB8cGVha0NhY2hlUmFuZ2VzfCBvclxuICAgICAgLy8gfGVuZHwsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cblxuXG4gICAgICBpZiAoaSAlIDIgPT0gMCkge1xuICAgICAgICB1bmNhY2hlZFJhbmdlcy5wdXNoKHN0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGkgPCB0aGlzLnBlYWtDYWNoZVJhbmdlcy5sZW5ndGggJiYgdGhpcy5wZWFrQ2FjaGVSYW5nZXNbaV0gPD0gZW5kKSB7XG4gICAgICAgIHVuY2FjaGVkUmFuZ2VzLnB1c2godGhpcy5wZWFrQ2FjaGVSYW5nZXNbaV0pO1xuICAgICAgICBpKys7XG4gICAgICB9IC8vIElmIHxpfCBpcyBldmVuLCB8ZW5kfCBpcyBhZnRlciBhbGwgZXhpc3RpbmcgcmFuZ2VzLlxuXG5cbiAgICAgIGlmIChpICUgMiA9PSAwKSB7XG4gICAgICAgIHVuY2FjaGVkUmFuZ2VzLnB1c2goZW5kKTtcbiAgICAgIH0gLy8gRmlsdGVyIG91dCB0aGUgMC1sZW5ndGggcmFuZ2VzLlxuXG5cbiAgICAgIHVuY2FjaGVkUmFuZ2VzID0gdW5jYWNoZWRSYW5nZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBwb3MsIGFycikge1xuICAgICAgICBpZiAocG9zID09IDApIHtcbiAgICAgICAgICByZXR1cm4gaXRlbSAhPSBhcnJbcG9zICsgMV07XG4gICAgICAgIH0gZWxzZSBpZiAocG9zID09IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0gIT0gYXJyW3BvcyAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGl0ZW0gIT0gYXJyW3BvcyAtIDFdICYmIGl0ZW0gIT0gYXJyW3BvcyArIDFdO1xuICAgICAgfSk7IC8vIE1lcmdlIHRoZSB0d28gcmFuZ2VzIHRvZ2V0aGVyLCB1bmNhY2hlZFJhbmdlcyB3aWxsIGVpdGhlciBjb250YWluXG4gICAgICAvLyB3aG9sbHkgbmV3IHBvaW50cywgb3IgZHVwbGljYXRlcyBvZiBwb2ludHMgaW4gcGVha0NhY2hlUmFuZ2VzLiAgSWZcbiAgICAgIC8vIGR1cGxpY2F0ZXMgYXJlIGRldGVjdGVkLCByZW1vdmUgYm90aCBhbmQgZXh0ZW5kIHRoZSByYW5nZS5cblxuICAgICAgdGhpcy5wZWFrQ2FjaGVSYW5nZXMgPSB0aGlzLnBlYWtDYWNoZVJhbmdlcy5jb25jYXQodW5jYWNoZWRSYW5nZXMpO1xuICAgICAgdGhpcy5wZWFrQ2FjaGVSYW5nZXMgPSB0aGlzLnBlYWtDYWNoZVJhbmdlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgcG9zLCBhcnIpIHtcbiAgICAgICAgaWYgKHBvcyA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0gIT0gYXJyW3BvcyArIDFdO1xuICAgICAgICB9IGVsc2UgaWYgKHBvcyA9PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJldHVybiBpdGVtICE9IGFycltwb3MgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpdGVtICE9IGFycltwb3MgLSAxXSAmJiBpdGVtICE9IGFycltwb3MgKyAxXTtcbiAgICAgIH0pOyAvLyBQdXNoIHRoZSB1bmNhY2hlZCByYW5nZXMgaW50byBhbiBhcnJheSBvZiBhcnJheXMgZm9yIGVhc2Ugb2ZcbiAgICAgIC8vIGl0ZXJhdGlvbiBpbiB0aGUgZnVuY3Rpb25zIHRoYXQgY2FsbCB0aGlzLlxuXG4gICAgICB2YXIgdW5jYWNoZWRSYW5nZVBhaXJzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB1bmNhY2hlZFJhbmdlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB1bmNhY2hlZFJhbmdlUGFpcnMucHVzaChbdW5jYWNoZWRSYW5nZXNbaV0sIHVuY2FjaGVkUmFuZ2VzW2kgKyAxXV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5jYWNoZWRSYW5nZVBhaXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZ1xuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyLjxBcnJheVtdPn0gQXJyYXkgd2l0aCBhcnJheXMgb2YgbnVtYmVyc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2FjaGVSYW5nZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FjaGVSYW5nZXMoKSB7XG4gICAgICB2YXIgcGVha0NhY2hlUmFuZ2VQYWlycyA9IFtdO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnBlYWtDYWNoZVJhbmdlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBwZWFrQ2FjaGVSYW5nZVBhaXJzLnB1c2goW3RoaXMucGVha0NhY2hlUmFuZ2VzW2ldLCB0aGlzLnBlYWtDYWNoZVJhbmdlc1tpICsgMV1dKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBlYWtDYWNoZVJhbmdlUGFpcnM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBlYWtDYWNoZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGVha0NhY2hlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3V0aWwvYWJzTWF4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvYWJzTWF4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWJzTWF4O1xuXG52YXIgX21heCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tYXggKi8gXCIuL3NyYy91dGlsL21heC5qc1wiKSk7XG5cbnZhciBfbWluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21pbiAqLyBcIi4vc3JjL3V0aWwvbWluLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXHJcbiAqIEdldCB0aGUgbGFyZ2VzdCBhYnNvbHV0ZSB2YWx1ZSBpbiBhbiBhcnJheVxyXG4gKlxyXG4gKiBAcGFyYW0gICB7QXJyYXl9IHZhbHVlcyBBcnJheSBvZiBudW1iZXJzXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IExhcmdlc3QgbnVtYmVyIGZvdW5kXHJcbiAqIEBleGFtcGxlIGNvbnNvbGUubG9nKG1heChbLTMsIDIsIDFdKSwgbWF4KFstMywgMiwgNF0pKTsgLy8gbG9ncyAzIDRcclxuICogQHNpbmNlIDQuMy4wXHJcbiAqL1xuZnVuY3Rpb24gYWJzTWF4KHZhbHVlcykge1xuICB2YXIgbWF4ID0gKDAsIF9tYXguZGVmYXVsdCkodmFsdWVzKTtcbiAgdmFyIG1pbiA9ICgwLCBfbWluLmRlZmF1bHQpKHZhbHVlcyk7XG4gIHJldHVybiAtbWluID4gbWF4ID8gLW1pbiA6IG1heDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3V0aWwvY2xhbXAuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy91dGlsL2NsYW1wLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbGFtcDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVGhlIG51bWJlciB0byBiZSBsaW1pdGVkIHRvIGEgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBsaW1pdCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIGxpbWl0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbCksIG1heCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL2ZldGNoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbC9mZXRjaC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmV0Y2hGaWxlO1xuXG52YXIgX29ic2VydmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL29ic2VydmVyICovIFwiLi9zcmMvdXRpbC9vYnNlcnZlci5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIFByb2dyZXNzSGFuZGxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSBQcm9ncmVzc0hhbmRsZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYnNlcnZlcn0gaW5zdGFuY2UgVGhlIGBmZXRjaEZpbGVgIG9ic2VydmVyIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29udGVudExlbmd0aCBDb250ZW50IGxlbmd0aC5cbiAgICogQHBhcmFtIHtSZXNwb25zZX0gcmVzcG9uc2UgUmVzcG9uc2Ugb2JqZWN0LlxuICAgKi9cbiAgZnVuY3Rpb24gUHJvZ3Jlc3NIYW5kbGVyKGluc3RhbmNlLCBjb250ZW50TGVuZ3RoLCByZXNwb25zZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9ncmVzc0hhbmRsZXIpO1xuXG4gICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIHRoaXMuaW5zdGFuY2UuX3JlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgdGhpcy50b3RhbCA9IHBhcnNlSW50KGNvbnRlbnRMZW5ndGgsIDEwKTtcbiAgICB0aGlzLmxvYWRlZCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIG9uY2UsIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBgUmVhZGFibGVTdHJlYW1gYFxuICAgKiBpcyBjb25zdHJ1Y3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyfSBjb250cm9sbGVyIENvbnRyb2xsZXIgaW5zdGFuY2VcbiAgICogICAgIHVzZWQgdG8gY29udHJvbCB0aGUgc3RyZWFtLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhQcm9ncmVzc0hhbmRsZXIsIFt7XG4gICAga2V5OiBcInN0YXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciByZWFkID0gZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgICAgLy8gaW5zdGFuY2UuX3JlYWRlci5yZWFkKCkgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlc1xuICAgICAgICAvLyB3aGVuIGEgdmFsdWUgaGFzIGJlZW4gcmVjZWl2ZWRcbiAgICAgICAgX3RoaXMuaW5zdGFuY2UuX3JlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBkb25lID0gX3JlZi5kb25lLFxuICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYudmFsdWU7XG5cbiAgICAgICAgICAvLyByZXN1bHQgb2JqZWN0cyBjb250YWluIHR3byBwcm9wZXJ0aWVzOlxuICAgICAgICAgIC8vIGRvbmUgIC0gdHJ1ZSBpZiB0aGUgc3RyZWFtIGhhcyBhbHJlYWR5IGdpdmVuIHlvdSBhbGwgaXRzIGRhdGEuXG4gICAgICAgICAgLy8gdmFsdWUgLSBzb21lIGRhdGEuIEFsd2F5cyB1bmRlZmluZWQgd2hlbiBkb25lIGlzIHRydWUuXG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIC8vIGVuc3VyZSBvblByb2dyZXNzIGNhbGxlZCB3aGVuIGNvbnRlbnQtbGVuZ3RoPTBcbiAgICAgICAgICAgIGlmIChfdGhpcy50b3RhbCA9PT0gMCkge1xuICAgICAgICAgICAgICBfdGhpcy5pbnN0YW5jZS5vblByb2dyZXNzLmNhbGwoX3RoaXMuaW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICBsb2FkZWQ6IF90aGlzLmxvYWRlZCxcbiAgICAgICAgICAgICAgICB0b3RhbDogX3RoaXMudG90YWwsXG4gICAgICAgICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIG5vIG1vcmUgZGF0YSBuZWVkcyB0byBiZSBjb25zdW1lZCwgY2xvc2UgdGhlIHN0cmVhbVxuXG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5sb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcblxuICAgICAgICAgIF90aGlzLmluc3RhbmNlLm9uUHJvZ3Jlc3MuY2FsbChfdGhpcy5pbnN0YW5jZSwge1xuICAgICAgICAgICAgbG9hZGVkOiBfdGhpcy5sb2FkZWQsXG4gICAgICAgICAgICB0b3RhbDogX3RoaXMudG90YWwsXG4gICAgICAgICAgICBsZW5ndGhDb21wdXRhYmxlOiAhKF90aGlzLnRvdGFsID09PSAwKVxuICAgICAgICAgIH0pOyAvLyBlbnF1ZXVlIHRoZSBuZXh0IGRhdGEgY2h1bmsgaW50byBvdXIgdGFyZ2V0IHN0cmVhbVxuXG5cbiAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUodmFsdWUpO1xuICAgICAgICAgIHJlYWQoKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgY29udHJvbGxlci5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmVhZCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcm9ncmVzc0hhbmRsZXI7XG59KCk7XG4vKipcbiAqIExvYWQgYSBmaWxlIHVzaW5nIGBmZXRjaGAuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgUmVxdWVzdCBvcHRpb25zIHRvIHVzZS4gU2VlIGV4YW1wbGUgYmVsb3cuXG4gKiBAcmV0dXJucyB7T2JzZXJ2ZXJ9IE9ic2VydmVyIGluc3RhbmNlXG4gKiBAZXhhbXBsZVxuICogLy8gZGVmYXVsdCBvcHRpb25zXG4gKiBsZXQgb3B0aW9ucyA9IHtcbiAqICAgICB1cmw6IHVuZGVmaW5lZCxcbiAqICAgICBtZXRob2Q6ICdHRVQnLFxuICogICAgIG1vZGU6ICdjb3JzJyxcbiAqICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAqICAgICBjYWNoZTogJ2RlZmF1bHQnLFxuICogICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICogICAgIHJlcXVlc3RIZWFkZXJzOiBbXSxcbiAqICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXG4gKiAgICAgcmVmZXJyZXI6ICdjbGllbnQnXG4gKiB9O1xuICpcbiAqIC8vIG92ZXJyaWRlIHNvbWUgb3B0aW9uc1xuICogb3B0aW9ucy51cmwgPSAnLi4vbWVkaWEvZGVtby53YXYnO1xuXG4gKiAvLyBhdmFpbGFibGUgdHlwZXM6ICdhcnJheWJ1ZmZlcicsICdibG9iJywgJ2pzb24nIG9yICd0ZXh0J1xuICogb3B0aW9ucy5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICpcbiAqIC8vIG1ha2UgZmV0Y2ggY2FsbFxuICogbGV0IHJlcXVlc3QgPSB1dGlsLmZldGNoRmlsZShvcHRpb25zKTtcbiAqXG4gKiAvLyBsaXN0ZW4gZm9yIGV2ZW50c1xuICogcmVxdWVzdC5vbigncHJvZ3Jlc3MnLCBlID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygncHJvZ3Jlc3MnLCBlKTtcbiAqIH0pO1xuICpcbiAqIHJlcXVlc3Qub24oJ3N1Y2Nlc3MnLCBkYXRhID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnc3VjY2VzcyEnLCBkYXRhKTtcbiAqIH0pO1xuICpcbiAqIHJlcXVlc3Qub24oJ2Vycm9yJywgZSA9PiB7XG4gKiAgICAgY29uc29sZS53YXJuKCdmZXRjaEZpbGUgZXJyb3I6ICcsIGUpO1xuICogfSk7XG4gKi9cblxuXG5mdW5jdGlvbiBmZXRjaEZpbGUob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZldGNoIG9wdGlvbnMgbWlzc2luZycpO1xuICB9IGVsc2UgaWYgKCFvcHRpb25zLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZmV0Y2ggdXJsIG1pc3NpbmcnKTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZSA9IG5ldyBfb2JzZXJ2ZXIuZGVmYXVsdCgpO1xuICB2YXIgZmV0Y2hIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgdmFyIGZldGNoUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KG9wdGlvbnMudXJsKTsgLy8gYWRkIGFiaWxpdHkgdG8gYWJvcnRcblxuICBpbnN0YW5jZS5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpOyAvLyBjaGVjayBpZiBoZWFkZXJzIGhhdmUgdG8gYmUgYWRkZWRcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlcXVlc3RIZWFkZXJzKSB7XG4gICAgLy8gYWRkIGN1c3RvbSByZXF1ZXN0IGhlYWRlcnNcbiAgICBvcHRpb25zLnJlcXVlc3RIZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikge1xuICAgICAgZmV0Y2hIZWFkZXJzLmFwcGVuZChoZWFkZXIua2V5LCBoZWFkZXIudmFsdWUpO1xuICAgIH0pO1xuICB9IC8vIHBhcnNlIGZldGNoIG9wdGlvbnNcblxuXG4gIHZhciByZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZSB8fCAnanNvbic7XG4gIHZhciBmZXRjaE9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJyxcbiAgICBoZWFkZXJzOiBmZXRjaEhlYWRlcnMsXG4gICAgbW9kZTogb3B0aW9ucy5tb2RlIHx8ICdjb3JzJyxcbiAgICBjcmVkZW50aWFsczogb3B0aW9ucy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nLFxuICAgIGNhY2hlOiBvcHRpb25zLmNhY2hlIHx8ICdkZWZhdWx0JyxcbiAgICByZWRpcmVjdDogb3B0aW9ucy5yZWRpcmVjdCB8fCAnZm9sbG93JyxcbiAgICByZWZlcnJlcjogb3B0aW9ucy5yZWZlcnJlciB8fCAnY2xpZW50JyxcbiAgICBzaWduYWw6IGluc3RhbmNlLmNvbnRyb2xsZXIuc2lnbmFsXG4gIH07XG4gIGZldGNoKGZldGNoUmVxdWVzdCwgZmV0Y2hPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIC8vIHN0b3JlIHJlc3BvbnNlIHJlZmVyZW5jZVxuICAgIGluc3RhbmNlLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdmFyIHByb2dyZXNzQXZhaWxhYmxlID0gdHJ1ZTtcblxuICAgIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgICAgLy8gUmVhZGFibGVTdHJlYW0gaXMgbm90IHlldCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXG4gICAgICAvLyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1JlYWRhYmxlU3RyZWFtXG4gICAgICBwcm9ncmVzc0F2YWlsYWJsZSA9IGZhbHNlO1xuICAgIH0gLy8gU2VydmVyIG11c3Qgc2VuZCBDT1JTIGhlYWRlciBcIkFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzOiBjb250ZW50LWxlbmd0aFwiXG5cblxuICAgIHZhciBjb250ZW50TGVuZ3RoID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJyk7XG5cbiAgICBpZiAoY29udGVudExlbmd0aCA9PT0gbnVsbCkge1xuICAgICAgLy8gQ29udGVudC1MZW5ndGggc2VydmVyIHJlc3BvbnNlIGhlYWRlciBtaXNzaW5nLlxuICAgICAgLy8gRG9uJ3QgZXZhbHVhdGUgZG93bmxvYWQgcHJvZ3Jlc3MgaWYgd2UgY2FuJ3QgY29tcGFyZSBhZ2FpbnN0IGEgdG90YWwgc2l6ZVxuICAgICAgLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQ09SUyNBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVyc1xuICAgICAgcHJvZ3Jlc3NBdmFpbGFibGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXByb2dyZXNzQXZhaWxhYmxlKSB7XG4gICAgICAvLyBub3QgYWJsZSB0byBjaGVjayBkb3dubG9hZCBwcm9ncmVzcyBzbyBza2lwIGl0XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSAvLyBmaXJlIHByb2dyZXNzIGV2ZW50IHdoZW4gZHVyaW5nIGxvYWRcblxuXG4gICAgaW5zdGFuY2Uub25Qcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpbnN0YW5jZS5maXJlRXZlbnQoJ3Byb2dyZXNzJywgZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobmV3IFJlYWRhYmxlU3RyZWFtKG5ldyBQcm9ncmVzc0hhbmRsZXIoaW5zdGFuY2UsIGNvbnRlbnRMZW5ndGgsIHJlc3BvbnNlKSksIGZldGNoT3B0aW9ucyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgdmFyIGVyck1zZztcblxuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgY2FzZSAnYXJyYXlidWZmZXInOlxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuXG4gICAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgY2FzZSAnYmxvYic6XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcblxuICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZXJyTXNnID0gJ1Vua25vd24gcmVzcG9uc2VUeXBlOiAnICsgcmVzcG9uc2VUeXBlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZXJyTXNnKSB7XG4gICAgICBlcnJNc2cgPSAnSFRUUCBlcnJvciBzdGF0dXM6ICcgKyByZXNwb25zZS5zdGF0dXM7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaW5zdGFuY2UuZmlyZUV2ZW50KCdzdWNjZXNzJywgcmVzcG9uc2UpO1xuICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBpbnN0YW5jZS5maXJlRXZlbnQoJ2Vycm9yJywgZXJyb3IpO1xuICB9KTsgLy8gcmV0dXJuIHRoZSBmZXRjaCByZXF1ZXN0XG5cbiAgaW5zdGFuY2UuZmV0Y2hSZXF1ZXN0ID0gZmV0Y2hSZXF1ZXN0O1xuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL2ZyYW1lLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbC9mcmFtZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gZnJhbWU7XG5cbnZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlcXVlc3QtYW5pbWF0aW9uLWZyYW1lICovIFwiLi9zcmMvdXRpbC9yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZS5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgYXQgdGhlIG5leHQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gKiBjeWNsZVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcbiAqXG4gKiBAcmV0dXJuIHtmdW5jfSBUaGUgZnVuY3Rpb24gd3JhcHBlZCB3aXRoaW4gYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAqL1xuZnVuY3Rpb24gZnJhbWUoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3V0aWwvZ2V0LWlkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvZ2V0LWlkLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0SWQ7XG5cbi8qKlxuICogR2V0IGEgcmFuZG9tIHByZWZpeGVkIElEXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBQcmVmaXggdG8gdXNlLiBEZWZhdWx0IGlzIGAnd2F2ZXN1cmZlcl8nYC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFJhbmRvbSBwcmVmaXhlZCBJRFxuICogQGV4YW1wbGVcbiAqIGNvbnNvbGUubG9nKGdldElkKCkpOyAvLyBsb2dzICd3YXZlc3VyZmVyX2I1cG9yczRydTZnJ1xuICpcbiAqIGxldCBwcmVmaXggPSAnZm9vLSc7XG4gKiBjb25zb2xlLmxvZyhnZXRJZChwcmVmaXgpKTsgLy8gbG9ncyAnZm9vLWI1cG9yczRydTZnJ1xuICovXG5mdW5jdGlvbiBnZXRJZChwcmVmaXgpIHtcbiAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcHJlZml4ID0gJ3dhdmVzdXJmZXJfJztcbiAgfVxuXG4gIHJldHVybiBwcmVmaXggKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDMyKS5zdWJzdHJpbmcoMik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbC9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRJZFwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dldElkLmRlZmF1bHQ7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1heFwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX21heC5kZWZhdWx0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtaW5cIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9taW4uZGVmYXVsdDtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWJzTWF4XCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYWJzTWF4LmRlZmF1bHQ7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9ic2VydmVyXCIsICh7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfb2JzZXJ2ZXIuZGVmYXVsdDtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3R5bGVcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9zdHlsZS5kZWZhdWx0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuZGVmYXVsdDtcbiAgfVxufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJhbWVcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9mcmFtZS5kZWZhdWx0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWJvdW5jZVwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlYm91bmNlLmRlZmF1bHQ7XG4gIH1cbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInByZXZlbnRDbGlja1wiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3ByZXZlbnRDbGljay5kZWZhdWx0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmZXRjaEZpbGVcIiwgKHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9mZXRjaC5kZWZhdWx0O1xuICB9XG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFtcFwiLCAoe1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NsYW1wLmRlZmF1bHQ7XG4gIH1cbn0pKTtcblxudmFyIF9nZXRJZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9nZXQtaWQgKi8gXCIuL3NyYy91dGlsL2dldC1pZC5qc1wiKSk7XG5cbnZhciBfbWF4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21heCAqLyBcIi4vc3JjL3V0aWwvbWF4LmpzXCIpKTtcblxudmFyIF9taW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWluICovIFwiLi9zcmMvdXRpbC9taW4uanNcIikpO1xuXG52YXIgX2Fic01heCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hYnNNYXggKi8gXCIuL3NyYy91dGlsL2Fic01heC5qc1wiKSk7XG5cbnZhciBfb2JzZXJ2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vb2JzZXJ2ZXIgKi8gXCIuL3NyYy91dGlsL29ic2VydmVyLmpzXCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zdHlsZSAqLyBcIi4vc3JjL3V0aWwvc3R5bGUuanNcIikpO1xuXG52YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZSAqLyBcIi4vc3JjL3V0aWwvcmVxdWVzdC1hbmltYXRpb24tZnJhbWUuanNcIikpO1xuXG52YXIgX2ZyYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ZyYW1lICovIFwiLi9zcmMvdXRpbC9mcmFtZS5qc1wiKSk7XG5cbnZhciBfZGVib3VuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIGRlYm91bmNlICovIFwiLi9ub2RlX21vZHVsZXMvZGVib3VuY2UvaW5kZXguanNcIikpO1xuXG52YXIgX3ByZXZlbnRDbGljayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wcmV2ZW50LWNsaWNrICovIFwiLi9zcmMvdXRpbC9wcmV2ZW50LWNsaWNrLmpzXCIpKTtcblxudmFyIF9mZXRjaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9mZXRjaCAqLyBcIi4vc3JjL3V0aWwvZmV0Y2guanNcIikpO1xuXG52YXIgX2NsYW1wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NsYW1wICovIFwiLi9zcmMvdXRpbC9jbGFtcC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3V0aWwvbWF4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvbWF4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWF4O1xuXG4vKipcbiAqIEdldCB0aGUgbGFyZ2VzdCB2YWx1ZVxuICpcbiAqIEBwYXJhbSAgIHtBcnJheX0gdmFsdWVzIEFycmF5IG9mIG51bWJlcnNcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IExhcmdlc3QgbnVtYmVyIGZvdW5kXG4gKiBAZXhhbXBsZSBjb25zb2xlLmxvZyhtYXgoWzEsIDIsIDNdKSk7IC8vIGxvZ3MgM1xuICovXG5mdW5jdGlvbiBtYXgodmFsdWVzKSB7XG4gIHZhciBsYXJnZXN0ID0gLUluZmluaXR5O1xuICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICBpZiAodmFsdWVzW2ldID4gbGFyZ2VzdCkge1xuICAgICAgbGFyZ2VzdCA9IHZhbHVlc1tpXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGFyZ2VzdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3V0aWwvbWluLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvbWluLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWluO1xuXG4vKipcbiAqIEdldCB0aGUgc21hbGxlc3QgdmFsdWVcbiAqXG4gKiBAcGFyYW0gICB7QXJyYXl9IHZhbHVlcyBBcnJheSBvZiBudW1iZXJzXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBTbWFsbGVzdCBudW1iZXIgZm91bmRcbiAqIEBleGFtcGxlIGNvbnNvbGUubG9nKG1pbihbMSwgMiwgM10pKTsgLy8gbG9ncyAxXG4gKi9cbmZ1bmN0aW9uIG1pbih2YWx1ZXMpIHtcbiAgdmFyIHNtYWxsZXN0ID0gTnVtYmVyKEluZmluaXR5KTtcbiAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgaWYgKHZhbHVlc1tpXSA8IHNtYWxsZXN0KSB7XG4gICAgICBzbWFsbGVzdCA9IHZhbHVlc1tpXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc21hbGxlc3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL29ic2VydmVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbC9vYnNlcnZlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTGlzdGVuZXJEZXNjcmlwdG9yXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFja1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdW4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lclxuICovXG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3NcbiAqL1xudmFyIE9ic2VydmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlIE9ic2VydmVyXG4gICAqL1xuICBmdW5jdGlvbiBPYnNlcnZlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2JzZXJ2ZXIpO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdG9kbyBJbml0aWFsaXNlIHRoZSBoYW5kbGVycyBoZXJlIGFscmVhZHkgYW5kIHJlbW92ZSB0aGUgY29uZGl0aW9uYWxcbiAgICAgKiBhc3NpZ25tZW50IGluIGBvbigpYFxuICAgICAqL1xuICAgIHRoaXMuX2Rpc2FibGVkRXZlbnRFbWlzc2lvbnMgPSBbXTtcbiAgICB0aGlzLmhhbmRsZXJzID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIGEgaGFuZGxlciBmdW5jdGlvbiBmb3IgYW4gZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIHRyaWdnZXIgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAgICogQHJldHVybiB7TGlzdGVuZXJEZXNjcmlwdG9yfSBUaGUgZXZlbnQgZGVzY3JpcHRvclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuaGFuZGxlcnMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW2V2ZW50XTtcblxuICAgICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgICBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdID0gW107XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXJzLnB1c2goZm4pOyAvLyBSZXR1cm4gYW4gZXZlbnQgZGVzY3JpcHRvclxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBldmVudCxcbiAgICAgICAgY2FsbGJhY2s6IGZuLFxuICAgICAgICB1bjogZnVuY3Rpb24gdW4oZSwgZm4pIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudW4oZSwgZm4pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudCB0aGUgbGlzdGVuZXIgdGhhdCBzaG91bGQgYmVcbiAgICAgKiByZW1vdmVkIGxpc3RlbnMgdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW4oZXZlbnQsIGZuKSB7XG4gICAgICBpZiAoIXRoaXMuaGFuZGxlcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW2V2ZW50XTtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgZm9yIChpID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyc1tpXSA9PSBmbikge1xuICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBldmVudCBoYW5kbGVycy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuQWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuQWxsKCkge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIGhhbmRsZXIgdG8gYW4gZXZlbnQuIFRoZSBoYW5kbGVyIGlzIGV4ZWN1dGVkIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBjYWxsYmFjayB0aGF0IGlzIG9ubHkgdG8gYmUgY2FsbGVkIG9uY2VcbiAgICAgKiBAcmV0dXJuIHtMaXN0ZW5lckRlc2NyaXB0b3J9IFRoZSBldmVudCBkZXNjcmlwdG9yXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qICBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cbiAgICAgICAgaGFuZGxlci5hcHBseShfdGhpczIsIGFyZ3MpO1xuICAgICAgICAvKiAgZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIudW4oZXZlbnQsIGZuKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy5vbihldmVudCwgZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGZpcmluZyBhIGxpc3Qgb2YgZXZlbnRzIGJ5IG5hbWUuIFdoZW4gc3BlY2lmaWVkLCBldmVudCBoYW5kbGVycyBmb3IgYW55IGV2ZW50IHR5cGVcbiAgICAgKiBwYXNzZWQgaW4gaGVyZSB3aWxsIG5vdCBiZSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBldmVudE5hbWVzIGFuIGFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGRpc2FibGUgZW1pc3Npb25zIGZvclxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZGlzYWJsZSBzZWVrIGFuZCBpbnRlcmFjdGlvbiBldmVudHNcbiAgICAgKiB3YXZlc3VyZmVyLnNldERpc2FibGVkRXZlbnRFbWlzc2lvbnMoWydzZWVrJywgJ2ludGVyYWN0aW9uJ10pO1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGlzYWJsZWRFdmVudEVtaXNzaW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREaXNhYmxlZEV2ZW50RW1pc3Npb25zKGV2ZW50TmFtZXMpIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVkRXZlbnRFbWlzc2lvbnMgPSBldmVudE5hbWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBwbHVnaW5zIGJvcnJvdyBwYXJ0IG9mIHRoaXMgY2xhc3Mgd2l0aG91dCBjYWxsaW5nIHRoZSBjb25zdHJ1Y3RvcixcbiAgICAgKiBzbyB3ZSBoYXZlIHRvIGJlIGNhcmVmdWwgYWJvdXQgX2Rpc2FibGVkRXZlbnRFbWlzc2lvbnNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9pc0Rpc2FibGVkRXZlbnRFbWlzc2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNEaXNhYmxlZEV2ZW50RW1pc3Npb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZEV2ZW50RW1pc3Npb25zICYmIHRoaXMuX2Rpc2FibGVkRXZlbnRFbWlzc2lvbnMuaW5jbHVkZXMoZXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBmaXJlIGFuIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHRvIGZpcmUgbWFudWFsbHlcbiAgICAgKiBAcGFyYW0gey4uLmFueX0gYXJncyBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggdG8gY2FsbCB0aGUgbGlzdGVuZXJzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJmaXJlRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlyZUV2ZW50KGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGFuZGxlcnMgfHwgdGhpcy5faXNEaXNhYmxlZEV2ZW50RW1pc3Npb24oZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF07XG4gICAgICBoYW5kbGVycyAmJiBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9ic2VydmVyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBPYnNlcnZlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL3ByZXZlbnQtY2xpY2suanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvcHJldmVudC1jbGljay5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmV2ZW50Q2xpY2s7XG5cbi8qKlxuICogU3RvcHMgcHJvcGFnYXRpb24gb2YgY2xpY2sgZXZlbnQgYW5kIHJlbW92ZXMgZXZlbnQgbGlzdGVuZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBjbGljayBldmVudFxuICovXG5mdW5jdGlvbiBwcmV2ZW50Q2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcHJldmVudENsaWNrSGFuZGxlciwgdHJ1ZSk7XG59XG4vKipcbiAqIFN0YXJ0cyBsaXN0ZW5pbmcgZm9yIGNsaWNrIGV2ZW50IGFuZCBwcmV2ZW50IHByb3BhZ2F0aW9uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBWYWx1ZXNcbiAqL1xuXG5cbmZ1bmN0aW9uIHByZXZlbnRDbGljayh2YWx1ZXMpIHtcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHByZXZlbnRDbGlja0hhbmRsZXIsIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvdXRpbC9yZXF1ZXN0LWFuaW1hdGlvbi1mcmFtZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3V0aWwvcmVxdWVzdC1hbmltYXRpb24tZnJhbWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgdmFsdWU6IHRydWVcbn0pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBmdW5jdGlvbiBmb3IgdGhlIGJyb3dzZXIsIG9yIGEgc2hpbSB3aXRoXG4gKiBgc2V0VGltZW91dGAgaWYgdGhlIGZ1bmN0aW9uIGlzIG5vdCBmb3VuZFxuICpcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBBdmFpbGFibGUgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgZnVuY3Rpb24gZm9yIHRoZSBicm93c2VyXG4gKi9cbnZhciBfZGVmYXVsdCA9ICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24gKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xufSkuYmluZCh3aW5kb3cpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy91dGlsL3N0eWxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvdXRpbC9zdHlsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICB2YWx1ZTogdHJ1ZVxufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbi8qKlxuICogQXBwbHkgYSBtYXAgb2Ygc3R5bGVzIHRvIGFuIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBUaGUgZWxlbWVudCB0aGF0IHRoZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVzIFRoZSBtYXAgb2YgcHJvcE5hbWU6IGF0dHJpYnV0ZSwgYm90aCBhcmUgdXNlZCBhcy1pc1xuICpcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBlbFxuICovXG5mdW5jdGlvbiBzdHlsZShlbCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChlbC5zdHlsZVtwcm9wXSAhPT0gc3R5bGVzW3Byb3BdKSB7XG4gICAgICBlbC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy93YXZlc3VyZmVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvd2F2ZXN1cmZlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciB1dGlsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsICovIFwiLi9zcmMvdXRpbC9pbmRleC5qc1wiKSk7XG5cbnZhciBfZHJhd2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2RyYXdlci5tdWx0aWNhbnZhcyAqLyBcIi4vc3JjL2RyYXdlci5tdWx0aWNhbnZhcy5qc1wiKSk7XG5cbnZhciBfd2ViYXVkaW8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vd2ViYXVkaW8gKi8gXCIuL3NyYy93ZWJhdWRpby5qc1wiKSk7XG5cbnZhciBfbWVkaWFlbGVtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21lZGlhZWxlbWVudCAqLyBcIi4vc3JjL21lZGlhZWxlbWVudC5qc1wiKSk7XG5cbnZhciBfcGVha2NhY2hlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BlYWtjYWNoZSAqLyBcIi4vc3JjL3BlYWtjYWNoZS5qc1wiKSk7XG5cbnZhciBfbWVkaWFlbGVtZW50V2ViYXVkaW8gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWVkaWFlbGVtZW50LXdlYmF1ZGlvICovIFwiLi9zcmMvbWVkaWFlbGVtZW50LXdlYmF1ZGlvLmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLypcbiAqIFRoaXMgd29yayBpcyBsaWNlbnNlZCB1bmRlciBhIEJTRC0zLUNsYXVzZSBMaWNlbnNlLlxuICovXG5cbi8qKiBAZXh0ZXJuYWwge0hUTUxFbGVtZW50fSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9BUEkvSFRNTEVsZW1lbnQgKi9cblxuLyoqIEBleHRlcm5hbCB7T2ZmbGluZUF1ZGlvQ29udGV4dH0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL09mZmxpbmVBdWRpb0NvbnRleHQgKi9cblxuLyoqIEBleHRlcm5hbCB7RmlsZX0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGUgKi9cblxuLyoqIEBleHRlcm5hbCB7QmxvYn0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2IgKi9cblxuLyoqIEBleHRlcm5hbCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICovXG5cbi8qKiBAZXh0ZXJuYWwge01lZGlhU3RyZWFtQ29uc3RyYWludHN9IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYVN0cmVhbUNvbnN0cmFpbnRzICovXG5cbi8qKiBAZXh0ZXJuYWwge0F1ZGlvTm9kZX0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL0F1ZGlvTm9kZSAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFdhdmVzdXJmZXJQYXJhbXNcbiAqIEBwcm9wZXJ0eSB7QXVkaW9Db250ZXh0fSBhdWRpb0NvbnRleHQ9bnVsbCBVc2UgeW91ciBvd24gcHJldmlvdXNseVxuICogaW5pdGlhbGl6ZWQgQXVkaW9Db250ZXh0IG9yIGxlYXZlIGJsYW5rLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGF1ZGlvUmF0ZT0xIFNwZWVkIGF0IHdoaWNoIHRvIHBsYXkgYXVkaW8uIExvd2VyIG51bWJlciBpc1xuICogc2xvd2VyLlxuICogQHByb3BlcnR5IHtTY3JpcHRQcm9jZXNzb3JOb2RlfSBhdWRpb1NjcmlwdFByb2Nlc3Nvcj1udWxsIFVzZSB5b3VyIG93biBwcmV2aW91c2x5XG4gKiBpbml0aWFsaXplZCBTY3JpcHRQcm9jZXNzb3JOb2RlIG9yIGxlYXZlIGJsYW5rLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhdXRvQ2VudGVyPXRydWUgSWYgYSBzY3JvbGxiYXIgaXMgcHJlc2VudCwgY2VudGVyIHRoZVxuICogd2F2ZWZvcm0gb24gY3VycmVudCBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGF1dG9DZW50ZXJSYXRlPTUgSWYgYXV0b0NlbnRlciBpcyBhY3RpdmUsIHJhdGUgYXQgd2hpY2ggdGhlXG4gKiB3YXZlZm9ybSBpcyBjZW50ZXJlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBhdXRvQ2VudGVySW1tZWRpYXRlbHk9ZmFsc2UgSWYgYXV0b0NlbnRlciBpcyBhY3RpdmUsIGltbWVkaWF0ZWx5XG4gKiBjZW50ZXIgd2F2ZWZvcm0gb24gY3VycmVudCBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGJhY2tlbmQ9J1dlYkF1ZGlvJyBgJ1dlYkF1ZGlvJ3wnTWVkaWFFbGVtZW50J3wnTWVkaWFFbGVtZW50V2ViQXVkaW8nYCBJbiBtb3N0IGNhc2VzXG4gKiB5b3UgZG9uJ3QgaGF2ZSB0byBzZXQgdGhpcyBtYW51YWxseS4gTWVkaWFFbGVtZW50IGlzIGEgZmFsbGJhY2sgZm9yIHVuc3VwcG9ydGVkIGJyb3dzZXJzLlxuICogTWVkaWFFbGVtZW50V2ViQXVkaW8gYWxsb3dzIHRvIHVzZSBXZWJBdWRpbyBBUEkgYWxzbyB3aXRoIGJpZyBhdWRpbyBmaWxlcywgbG9hZGluZyBhdWRpbyBsaWtlIHdpdGhcbiAqIE1lZGlhRWxlbWVudCBiYWNrZW5kIChIVE1MNSBhdWRpbyB0YWcpLiBZb3UgaGF2ZSB0byB1c2UgdGhlIHNhbWUgbWV0aG9kcyBvZiBNZWRpYUVsZW1lbnQgYmFja2VuZCBmb3IgbG9hZGluZyBhbmRcbiAqIHBsYXliYWNrLCBnaXZpbmcgYWxzbyBwZWFrcywgc28gdGhlIGF1ZGlvIGRhdGEgYXJlIG5vdCBkZWNvZGVkLiBJbiB0aGlzIHdheSB5b3UgY2FuIHVzZSBXZWJBdWRpbyBmZWF0dXJlcywgbGlrZSBmaWx0ZXJzLFxuICogYWxzbyB3aXRoIGF1ZGlvIHdpdGggYmlnIGR1cmF0aW9uLiBGb3IgZXhhbXBsZTpcbiAqIGAgd2F2ZXN1cmZlci5sb2FkKHVybCB8IEhUTUxNZWRpYUVsZW1lbnQsIHBlYWtzLCBwcmVsb2FkLCBkdXJhdGlvbik7XG4gKiAgIHdhdmVzdXJmZXIucGxheSgpO1xuICogICB3YXZlc3VyZmVyLnNldEZpbHRlcihjdXN0b21GaWx0ZXIpO1xuICogYFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJhY2tncm91bmRDb2xvcj1udWxsIENoYW5nZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZVxuICogd2F2ZWZvcm0gY29udGFpbmVyLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJhckhlaWdodD0xIFRoZSBoZWlnaHQgb2YgdGhlIHdhdmUgYmFycy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiYXJSYWRpdXM9MCBUaGUgcmFkaXVzIG9mIHRoZSB3YXZlIGJhcnMuIE1ha2VzIGJhcnMgcm91bmRlZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJhckdhcD1udWxsIFRoZSBvcHRpb25hbCBzcGFjaW5nIGJldHdlZW4gYmFycyBvZiB0aGUgd2F2ZSxcbiAqIGlmIG5vdCBwcm92aWRlZCB3aWxsIGJlIGNhbGN1bGF0ZWQgaW4gbGVnYWN5IGZvcm1hdC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiYXJXaWR0aD1udWxsIERyYXcgdGhlIHdhdmVmb3JtIHVzaW5nIGJhcnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gYmFyTWluSGVpZ2h0PW51bGwgSWYgc3BlY2lmaWVkLCBkcmF3IGF0IGxlYXN0IGEgYmFyIG9mIHRoaXMgaGVpZ2h0LFxuICogZWxpbWluYXRpbmcgd2F2ZWZvcm0gZ2Fwc1xuICogQHByb3BlcnR5IHtib29sZWFufSBjbG9zZUF1ZGlvQ29udGV4dD1mYWxzZSBDbG9zZSBhbmQgbnVsbGlmeSBhbGwgYXVkaW9cbiAqIGNvbnRleHRzIHdoZW4gdGhlIGRlc3Ryb3kgbWV0aG9kIGlzIGNhbGxlZC5cbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ3xIVE1MRWxlbWVudH0gY29udGFpbmVyIENTUyBzZWxlY3RvciBvciBIVE1MIGVsZW1lbnQgd2hlcmVcbiAqIHRoZSB3YXZlZm9ybSBzaG91bGQgYmUgZHJhd24uIFRoaXMgaXMgdGhlIG9ubHkgcmVxdWlyZWQgcGFyYW1ldGVyLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnNvckNvbG9yPScjMzMzJyBUaGUgZmlsbCBjb2xvciBvZiB0aGUgY3Vyc29yIGluZGljYXRpbmdcbiAqIHRoZSBwbGF5aGVhZCBwb3NpdGlvbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjdXJzb3JXaWR0aD0xIE1lYXN1cmVkIGluIHBpeGVscy5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkcmF3aW5nQ29udGV4dEF0dHJpYnV0ZXM9e2Rlc3luY2hyb25pemVkOiBmYWxzZX0gRHJhd2luZyBjb250ZXh0XG4gKiBhdHRyaWJ1dGVzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGR1cmF0aW9uPW51bGwgT3B0aW9uYWwgYXVkaW8gbGVuZ3RoIHNvIHByZS1yZW5kZXJlZCBwZWFrc1xuICogY2FuIGJlIGRpc3BsYXkgaW1tZWRpYXRlbHkgZm9yIGV4YW1wbGUuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGZpbGxQYXJlbnQ9dHJ1ZSBXaGV0aGVyIHRvIGZpbGwgdGhlIGVudGlyZSBjb250YWluZXIgb3JcbiAqIGRyYXcgb25seSBhY2NvcmRpbmcgdG8gYG1pblB4UGVyU2VjYC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZm9yY2VEZWNvZGU9ZmFsc2UgRm9yY2UgZGVjb2Rpbmcgb2YgYXVkaW8gdXNpbmcgd2ViIGF1ZGlvXG4gKiB3aGVuIHpvb21pbmcgdG8gZ2V0IGEgbW9yZSBkZXRhaWxlZCB3YXZlZm9ybS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoZWlnaHQ9MTI4IFRoZSBoZWlnaHQgb2YgdGhlIHdhdmVmb3JtLiBNZWFzdXJlZCBpblxuICogcGl4ZWxzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBoaWRlU2Nyb2xsYmFyPWZhbHNlIFdoZXRoZXIgdG8gaGlkZSB0aGUgaG9yaXpvbnRhbFxuICogc2Nyb2xsYmFyIHdoZW4gb25lIHdvdWxkIG5vcm1hbGx5IGJlIHNob3duLlxuICogQHByb3BlcnR5IHtib29sZWFufSBpbnRlcmFjdD10cnVlIFdoZXRoZXIgdGhlIG1vdXNlIGludGVyYWN0aW9uIHdpbGwgYmVcbiAqIGVuYWJsZWQgYXQgaW5pdGlhbGl6YXRpb24uIFlvdSBjYW4gc3dpdGNoIHRoaXMgcGFyYW1ldGVyIGF0IGFueSB0aW1lIGxhdGVyXG4gKiBvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbG9vcFNlbGVjdGlvbj10cnVlIChVc2Ugd2l0aCByZWdpb25zIHBsdWdpbikgRW5hYmxlXG4gKiBsb29waW5nIG9mIHNlbGVjdGVkIHJlZ2lvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhDYW52YXNXaWR0aD00MDAwIE1heGltdW0gd2lkdGggb2YgYSBzaW5nbGUgY2FudmFzIGluXG4gKiBwaXhlbHMsIGV4Y2x1ZGluZyBhIHNtYWxsIG92ZXJsYXAgKDIgKiBgcGl4ZWxSYXRpb2AsIHJvdW5kZWQgdXAgdG8gdGhlIG5leHRcbiAqIGV2ZW4gaW50ZWdlcikuIElmIHRoZSB3YXZlZm9ybSBpcyBsb25nZXIgdGhhbiB0aGlzIHZhbHVlLCBhZGRpdGlvbmFsIGNhbnZhc2VzXG4gKiB3aWxsIGJlIHVzZWQgdG8gcmVuZGVyIHRoZSB3YXZlZm9ybSwgd2hpY2ggaXMgdXNlZnVsIGZvciB2ZXJ5IGxhcmdlIHdhdmVmb3Jtc1xuICogdGhhdCBtYXkgYmUgdG9vIHdpZGUgZm9yIGJyb3dzZXJzIHRvIGRyYXcgb24gYSBzaW5nbGUgY2FudmFzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBtZWRpYUNvbnRyb2xzPWZhbHNlIChVc2Ugd2l0aCBiYWNrZW5kIGBNZWRpYUVsZW1lbnRgIG9yIGBNZWRpYUVsZW1lbnRXZWJBdWRpb2ApXG4gKiB0aGlzIGVuYWJsZXMgdGhlIG5hdGl2ZSBjb250cm9scyBmb3IgdGhlIG1lZGlhIGVsZW1lbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZWRpYVR5cGU9J2F1ZGlvJyAoVXNlIHdpdGggYmFja2VuZCBgTWVkaWFFbGVtZW50YCBvciBgTWVkaWFFbGVtZW50V2ViQXVkaW9gKVxuICogYCdhdWRpbyd8J3ZpZGVvJ2AgKCd2aWRlbycgb25seSBmb3IgYE1lZGlhRWxlbWVudGApXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWluUHhQZXJTZWM9MjAgTWluaW11bSBudW1iZXIgb2YgcGl4ZWxzIHBlciBzZWNvbmQgb2ZcbiAqIGF1ZGlvLlxuICogQHByb3BlcnR5IHtib29sZWFufSBub3JtYWxpemU9ZmFsc2UgSWYgdHJ1ZSwgbm9ybWFsaXplIGJ5IHRoZSBtYXhpbXVtIHBlYWtcbiAqIGluc3RlYWQgb2YgMS4wLlxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXJ0aWFsUmVuZGVyPWZhbHNlIFVzZSB0aGUgUGVha0NhY2hlIHRvIGltcHJvdmVcbiAqIHJlbmRlcmluZyBzcGVlZCBvZiBsYXJnZSB3YXZlZm9ybXNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwaXhlbFJhdGlvPXdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIFRoZSBwaXhlbCByYXRpbyB1c2VkIHRvXG4gKiBjYWxjdWxhdGUgZGlzcGxheVxuICogQHByb3BlcnR5IHtQbHVnaW5EZWZpbml0aW9uW119IHBsdWdpbnM9W10gQW4gYXJyYXkgb2YgcGx1Z2luIGRlZmluaXRpb25zIHRvXG4gKiByZWdpc3RlciBkdXJpbmcgaW5zdGFudGlhdGlvbiwgdGhleSB3aWxsIGJlIGRpcmVjdGx5IGluaXRpYWxpc2VkIHVubGVzcyB0aGV5XG4gKiBhcmUgYWRkZWQgd2l0aCB0aGUgYGRlZmVySW5pdGAgcHJvcGVydHkgc2V0IHRvIHRydWUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJvZ3Jlc3NDb2xvcj0nIzU1NScgVGhlIGZpbGwgY29sb3Igb2YgdGhlIHBhcnQgb2YgdGhlXG4gKiB3YXZlZm9ybSBiZWhpbmQgdGhlIGN1cnNvci4gV2hlbiBgcHJvZ3Jlc3NDb2xvcmAgYW5kIGB3YXZlQ29sb3JgIGFyZSB0aGUgc2FtZVxuICogdGhlIHByb2dyZXNzIHdhdmUgaXMgbm90IHJlbmRlcmVkIGF0IGFsbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVtb3ZlTWVkaWFFbGVtZW50T25EZXN0cm95PXRydWUgU2V0IHRvIGZhbHNlIHRvIGtlZXAgdGhlXG4gKiBtZWRpYSBlbGVtZW50IGluIHRoZSBET00gd2hlbiB0aGUgcGxheWVyIGlzIGRlc3Ryb3llZC4gVGhpcyBpcyB1c2VmdWwgd2hlblxuICogcmV1c2luZyBhbiBleGlzdGluZyBtZWRpYSBlbGVtZW50IHZpYSB0aGUgYGxvYWRNZWRpYUVsZW1lbnRgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSByZW5kZXJlcj1NdWx0aUNhbnZhcyBDYW4gYmUgdXNlZCB0byBpbmplY3QgYSBjdXN0b21cbiAqIHJlbmRlcmVyLlxuICogQHByb3BlcnR5IHtib29sZWFufG51bWJlcn0gcmVzcG9uc2l2ZT1mYWxzZSBJZiBzZXQgdG8gYHRydWVgIHJlc2l6ZSB0aGVcbiAqIHdhdmVmb3JtLCB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZC4gVGhpcyBpcyBkZWJvdW5jZWQgd2l0aCBhIGAxMDBtc2BcbiAqIHRpbWVvdXQgYnkgZGVmYXVsdC4gSWYgdGhpcyBwYXJhbWV0ZXIgaXMgYSBudW1iZXIgaXQgcmVwcmVzZW50cyB0aGF0IHRpbWVvdXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHJ0bD1mYWxzZSBJZiBzZXQgdG8gYHRydWVgLCByZW5kZXJzIHdhdmVmb3JtIGZyb21cbiAqIHJpZ2h0LXRvLWxlZnQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNjcm9sbFBhcmVudD1mYWxzZSBXaGV0aGVyIHRvIHNjcm9sbCB0aGUgY29udGFpbmVyIHdpdGggYVxuICogbGVuZ3RoeSB3YXZlZm9ybS4gT3RoZXJ3aXNlIHRoZSB3YXZlZm9ybSBpcyBzaHJ1bmsgdG8gdGhlIGNvbnRhaW5lciB3aWR0aFxuICogKHNlZSBmaWxsUGFyZW50KS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBza2lwTGVuZ3RoPTIgTnVtYmVyIG9mIHNlY29uZHMgdG8gc2tpcCB3aXRoIHRoZVxuICogc2tpcEZvcndhcmQoKSBhbmQgc2tpcEJhY2t3YXJkKCkgbWV0aG9kcy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc3BsaXRDaGFubmVscz1mYWxzZSBSZW5kZXIgd2l0aCBzZXBhcmF0ZSB3YXZlZm9ybXMgZm9yXG4gKiB0aGUgY2hhbm5lbHMgb2YgdGhlIGF1ZGlvXG4gKiBAcHJvcGVydHkge1NwbGl0Q2hhbm5lbE9wdGlvbnN9IHNwbGl0Q2hhbm5lbHNPcHRpb25zPXt9IE9wdGlvbnMgZm9yIHNwbGl0Q2hhbm5lbCByZW5kZXJpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB3YXZlQ29sb3I9JyM5OTknIFRoZSBmaWxsIGNvbG9yIG9mIHRoZSB3YXZlZm9ybSBhZnRlciB0aGVcbiAqIGN1cnNvci5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSB4aHI9e30gWEhSIG9wdGlvbnMuIEZvciBleGFtcGxlOlxuICogYGxldCB4aHIgPSB7XG4gKiAgICAgY2FjaGU6ICdkZWZhdWx0JyxcbiAqICAgICBtb2RlOiAnY29ycycsXG4gKiAgICAgbWV0aG9kOiAnR0VUJyxcbiAqICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAqICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXG4gKiAgICAgcmVmZXJyZXI6ICdjbGllbnQnLFxuICogICAgIHJlcXVlc3RIZWFkZXJzOiBbXG4gKiAgICAgICAgIHtcbiAqICAgICAgICAgICAgIGtleTogJ0F1dGhvcml6YXRpb24nLFxuICogICAgICAgICAgICAgdmFsdWU6ICdteS10b2tlbidcbiAqICAgICAgICAgfVxuICogICAgIF1cbiAqIH07YFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGx1Z2luRGVmaW5pdGlvblxuICogQGRlc2MgVGhlIE9iamVjdCB1c2VkIHRvIGRlc2NyaWJlIGEgcGx1Z2luXG4gKiBAZXhhbXBsZSB3YXZlc3VyZmVyLmFkZFBsdWdpbihwbHVnaW5EZWZpbml0aW9uKTtcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4sIHRoZSBwbHVnaW4gaW5zdGFuY2Ugd2lsbCBiZVxuICogYWRkZWQgYXMgYSBwcm9wZXJ0eSB0byB0aGUgd2F2ZXN1cmZlciBpbnN0YW5jZSB1bmRlciB0aGlzIG5hbWVcbiAqIEBwcm9wZXJ0eSB7P09iamVjdH0gc3RhdGljUHJvcHMgVGhlIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlXG4gKiB3YXZlc3VyZmVyIGluc3RhbmNlIGFzIHN0YXRpYyBwcm9wZXJ0aWVzXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBkZWZlckluaXQgRG9uJ3QgaW5pdGlhbGlzZSBwbHVnaW5cbiAqIGF1dG9tYXRpY2FsbHlcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBwYXJhbXM9e30gVGhlIHBsdWdpbiBwYXJhbWV0ZXJzLCB0aGV5IGFyZSB0aGUgZmlyc3QgcGFyYW1ldGVyXG4gKiBwYXNzZWQgdG8gdGhlIHBsdWdpbiBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvblxuICogQHByb3BlcnR5IHtQbHVnaW5DbGFzc30gaW5zdGFuY2UgVGhlIHBsdWdpbiBpbnN0YW5jZSBmYWN0b3J5LCBpcyBjYWxsZWQgd2l0aFxuICogdGhlIGRlcGVuZGVuY3kgc3BlY2lmaWVkIGluIGV4dGVuZHMuIFJldHVybnMgdGhlIHBsdWdpbiBjbGFzcy5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwbGl0Q2hhbm5lbE9wdGlvbnNcbiAqIEBkZXNjIHBhcmFtZXRlcnMgYXBwbGllZCB3aGVuIHNwbGl0Q2hhbm5lbHMgb3B0aW9uIGlzIHRydWVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb3ZlcmxheT1mYWxzZSBkZXRlcm1pbmVzIHdoZXRoZXIgY2hhbm5lbHMgYXJlIHJlbmRlcmVkIG9uIHRvcCBvZiBlYWNoIG90aGVyIG9yIG9uIHNlcGFyYXRlIHRyYWNrc1xuICogQHByb3BlcnR5IHtvYmplY3R9IGNoYW5uZWxDb2xvcnM9e30gb2JqZWN0IGRlc2NyaWJpbmcgY29sb3IgZm9yIGVhY2ggY2hhbm5lbC4gRXhhbXBsZTpcbiAqIHtcbiAqICAgICAwOiB7XG4gKiAgICAgICAgIHByb2dyZXNzQ29sb3I6ICdncmVlbicsXG4gKiAgICAgICAgIHdhdmVDb2xvcjogJ3BpbmsnXG4gKiAgICAgfSxcbiAqICAgICAxOiB7XG4gKiAgICAgICAgIHByb2dyZXNzQ29sb3I6ICdvcmFuZ2UnLFxuICogICAgICAgICB3YXZlQ29sb3I6ICdwdXJwbGUnXG4gKiAgICAgfVxuICogfVxuICogQHByb3BlcnR5IHtudW1iZXJbXX0gZmlsdGVyQ2hhbm5lbHM9W10gaW5kZXhlcyBvZiBjaGFubmVscyB0byBiZSBoaWRkZW4gZnJvbSByZW5kZXJpbmdcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVsYXRpdmVOb3JtYWxpemF0aW9uPWZhbHNlIGRldGVybWluZXMgd2hldGhlclxuICogbm9ybWFsaXphdGlvbiBpcyBkb25lIHBlciBjaGFubmVsIG9yIG1haW50YWlucyBwcm9wb3J0aW9uYWxpdHkgYmV0d2VlblxuICogY2hhbm5lbHMuIE9ubHkgYXBwbGllZCB3aGVuIG5vcm1hbGl6ZSBhbmQgc3BsaXRDaGFubmVscyBhcmUgYm90aCB0cnVlLlxuICogQHNpbmNlIDQuMy4wXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJmYWNlIFBsdWdpbkNsYXNzXG4gKlxuICogQGRlc2MgVGhpcyBpcyB0aGUgaW50ZXJmYWNlIHdoaWNoIGlzIGltcGxlbWVudGVkIGJ5IGFsbCBwbHVnaW4gY2xhc3Nlcy4gTm90ZVxuICogdGhhdCB0aGlzIG9ubHkgdHVybnMgaW50byBhbiBvYnNlcnZlciBhZnRlciBiZWluZyBwYXNzZWQgdGhyb3VnaFxuICogYHdhdmVzdXJmZXIuYWRkUGx1Z2luYC5cbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2ZXJ9XG4gKi9cbnZhciBQbHVnaW5DbGFzcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIF9jcmVhdGVDbGFzcyhQbHVnaW5DbGFzcywgW3tcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG5cbiAgICAvKipcbiAgICAgKiBQbHVnaW4gZGVmaW5pdGlvbiBmYWN0b3J5XG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgdXNlZCB0byBjcmVhdGUgYSBwbHVnaW4gZGVmaW5pdGlvbiB3aGljaCBjYW4gYmVcbiAgICAgKiB1c2VkIGJ5IHdhdmVzdXJmZXIgdG8gY29ycmVjdGx5IGluc3RhbnRpYXRlIHRoZSBwbHVnaW4uXG4gICAgICpcbiAgICAgKiBJdCByZXR1cm5zIGEgYFBsdWdpbkRlZmluaXRpb25gIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHBsdWdpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXM9e30gVGhlIHBsdWdpbiBwYXJhbXMgKHNwZWNpZmljIHRvIHRoZSBwbHVnaW4pXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShwYXJhbXMpIHt9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IHRoZSBwbHVnaW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXM9e30gVGhlIHBsdWdpbiBwYXJhbXMgKHNwZWNpZmljIHRvIHRoZSBwbHVnaW4pXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdzIFRoZSB3YXZlc3VyZmVyIGluc3RhbmNlXG4gICAgICovXG5cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbkNsYXNzKHBhcmFtcywgd3MpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luQ2xhc3MpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHRoZSBwbHVnaW5cbiAgICpcbiAgICogU3RhcnQgZG9pbmcgc29tZXRoaW5nLiBUaGlzIGlzIGNhbGxlZCBieVxuICAgKiBgd2F2ZXN1cmZlci5pbml0UGx1Z2luKHBsdWdpbk5hbWUpYFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhQbHVnaW5DbGFzcywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge31cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBwbHVnaW4gaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIFN0b3AgZG9pbmcgc29tZXRoaW5nLiBUaGlzIGlzIGNhbGxlZCBieVxuICAgICAqIGB3YXZlc3VyZmVyLmRlc3Ryb3lQbHVnaW4ocGx1Z2luTmFtZSlgXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7fVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsdWdpbkNsYXNzO1xufSgpO1xuLyoqXG4gKiBXYXZlU3VyZmVyIGNvcmUgbGlicmFyeSBjbGFzc1xuICpcbiAqIEBleHRlbmRzIHtPYnNlcnZlcn1cbiAqIEBleGFtcGxlXG4gKiBjb25zdCBwYXJhbXMgPSB7XG4gKiAgIGNvbnRhaW5lcjogJyN3YXZlZm9ybScsXG4gKiAgIHdhdmVDb2xvcjogJ3Zpb2xldCcsXG4gKiAgIHByb2dyZXNzQ29sb3I6ICdwdXJwbGUnXG4gKiB9O1xuICpcbiAqIC8vIGluaXRpYWxpc2UgbGlrZSB0aGlzXG4gKiBjb25zdCB3YXZlc3VyZmVyID0gV2F2ZVN1cmZlci5jcmVhdGUocGFyYW1zKTtcbiAqXG4gKiAvLyBvciBsaWtlIHRoaXMgLi4uXG4gKiBjb25zdCB3YXZlc3VyZmVyID0gbmV3IFdhdmVTdXJmZXIocGFyYW1zKTtcbiAqIHdhdmVzdXJmZXIuaW5pdCgpO1xuICpcbiAqIC8vIGxvYWQgYXVkaW8gZmlsZVxuICogd2F2ZXN1cmZlci5sb2FkKCdleGFtcGxlL21lZGlhL2RlbW8ud2F2Jyk7XG4gKi9cblxuXG52YXIgV2F2ZVN1cmZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX3V0aWwkT2JzZXJ2ZXIpIHtcbiAgX2luaGVyaXRzKFdhdmVTdXJmZXIsIF91dGlsJE9ic2VydmVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdhdmVTdXJmZXIpO1xuXG4gIF9jcmVhdGVDbGFzcyhXYXZlU3VyZmVyLCBudWxsLCBbe1xuICAgIGtleTogXCJjcmVhdGVcIixcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGlzIGNsYXNzLCBjYWxsIGl0cyBgaW5pdGAgZnVuY3Rpb24gYW5kIHJldHVybnMgaXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2F2ZXN1cmZlclBhcmFtc30gcGFyYW1zIFRoZSB3YXZlc3VyZmVyIHBhcmFtZXRlcnNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFdhdmVTdXJmZXIgaW5zdGFuY2VcbiAgICAgKiBAZXhhbXBsZSBjb25zdCB3YXZlc3VyZmVyID0gV2F2ZVN1cmZlci5jcmVhdGUocGFyYW1zKTtcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKHBhcmFtcykge1xuICAgICAgdmFyIHdhdmVzdXJmZXIgPSBuZXcgV2F2ZVN1cmZlcihwYXJhbXMpO1xuICAgICAgcmV0dXJuIHdhdmVzdXJmZXIuaW5pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGlicmFyeSB2ZXJzaW9uIG51bWJlciBpcyBhdmFpbGFibGUgYXMgYSBzdGF0aWMgcHJvcGVydHkgb2YgdGhlXG4gICAgICogV2F2ZVN1cmZlciBjbGFzc1xuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnNvbGUubG9nKCdVc2luZyB3YXZlc3VyZmVyLmpzICcgKyBXYXZlU3VyZmVyLlZFUlNJT04pO1xuICAgICAqL1xuXG4gIH1dKTtcblxuICAvKipcbiAgICogSW5pdGlhbGlzZSB3YXZlc3VyZmVyIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7V2F2ZXN1cmZlclBhcmFtc30gcGFyYW1zIEluc3RhbnRpYXRpb24gb3B0aW9ucyBmb3Igd2F2ZXN1cmZlclxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCB3YXZlc3VyZmVyID0gbmV3IFdhdmVTdXJmZXIocGFyYW1zKTtcbiAgICogQHJldHVybnMge3RoaXN9IFdhdmVzdXJmZXIgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFdhdmVTdXJmZXIocGFyYW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdhdmVTdXJmZXIpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IHJlbGV2YW50IHBhcmFtZXRlcnMgKG9yIGRlZmF1bHRzKVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgICBfdGhpcy5kZWZhdWx0UGFyYW1zID0ge1xuICAgICAgYXVkaW9Db250ZXh0OiBudWxsLFxuICAgICAgYXVkaW9TY3JpcHRQcm9jZXNzb3I6IG51bGwsXG4gICAgICBhdWRpb1JhdGU6IDEsXG4gICAgICBhdXRvQ2VudGVyOiB0cnVlLFxuICAgICAgYXV0b0NlbnRlclJhdGU6IDUsXG4gICAgICBhdXRvQ2VudGVySW1tZWRpYXRlbHk6IGZhbHNlLFxuICAgICAgYmFja2VuZDogJ1dlYkF1ZGlvJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbnVsbCxcbiAgICAgIGJhckhlaWdodDogMSxcbiAgICAgIGJhclJhZGl1czogMCxcbiAgICAgIGJhckdhcDogbnVsbCxcbiAgICAgIGJhck1pbkhlaWdodDogbnVsbCxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIGN1cnNvckNvbG9yOiAnIzMzMycsXG4gICAgICBjdXJzb3JXaWR0aDogMSxcbiAgICAgIGRyYWdTZWxlY3Rpb246IHRydWUsXG4gICAgICBkcmF3aW5nQ29udGV4dEF0dHJpYnV0ZXM6IHtcbiAgICAgICAgLy8gQm9vbGVhbiB0aGF0IGhpbnRzIHRoZSB1c2VyIGFnZW50IHRvIHJlZHVjZSB0aGUgbGF0ZW5jeVxuICAgICAgICAvLyBieSBkZXN5bmNocm9uaXppbmcgdGhlIGNhbnZhcyBwYWludCBjeWNsZSBmcm9tIHRoZSBldmVudFxuICAgICAgICAvLyBsb29wXG4gICAgICAgIGRlc3luY2hyb25pemVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGR1cmF0aW9uOiBudWxsLFxuICAgICAgZmlsbFBhcmVudDogdHJ1ZSxcbiAgICAgIGZvcmNlRGVjb2RlOiBmYWxzZSxcbiAgICAgIGhlaWdodDogMTI4LFxuICAgICAgaGlkZVNjcm9sbGJhcjogZmFsc2UsXG4gICAgICBpbnRlcmFjdDogdHJ1ZSxcbiAgICAgIGxvb3BTZWxlY3Rpb246IHRydWUsXG4gICAgICBtYXhDYW52YXNXaWR0aDogNDAwMCxcbiAgICAgIG1lZGlhQ29udGFpbmVyOiBudWxsLFxuICAgICAgbWVkaWFDb250cm9sczogZmFsc2UsXG4gICAgICBtZWRpYVR5cGU6ICdhdWRpbycsXG4gICAgICBtaW5QeFBlclNlYzogMjAsXG4gICAgICBub3JtYWxpemU6IGZhbHNlLFxuICAgICAgcGFydGlhbFJlbmRlcjogZmFsc2UsXG4gICAgICBwaXhlbFJhdGlvOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCBzY3JlZW4uZGV2aWNlWERQSSAvIHNjcmVlbi5sb2dpY2FsWERQSSxcbiAgICAgIHBsdWdpbnM6IFtdLFxuICAgICAgcHJvZ3Jlc3NDb2xvcjogJyM1NTUnLFxuICAgICAgcmVtb3ZlTWVkaWFFbGVtZW50T25EZXN0cm95OiB0cnVlLFxuICAgICAgcmVuZGVyZXI6IF9kcmF3ZXIuZGVmYXVsdCxcbiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgcnRsOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudDogZmFsc2UsXG4gICAgICBza2lwTGVuZ3RoOiAyLFxuICAgICAgc3BsaXRDaGFubmVsczogZmFsc2UsXG4gICAgICBzcGxpdENoYW5uZWxzT3B0aW9uczoge1xuICAgICAgICBvdmVybGF5OiBmYWxzZSxcbiAgICAgICAgY2hhbm5lbENvbG9yczoge30sXG4gICAgICAgIGZpbHRlckNoYW5uZWxzOiBbXSxcbiAgICAgICAgcmVsYXRpdmVOb3JtYWxpemF0aW9uOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHdhdmVDb2xvcjogJyM5OTknLFxuICAgICAgeGhyOiB7fVxuICAgIH07XG4gICAgX3RoaXMuYmFja2VuZHMgPSB7XG4gICAgICBNZWRpYUVsZW1lbnQ6IF9tZWRpYWVsZW1lbnQuZGVmYXVsdCxcbiAgICAgIFdlYkF1ZGlvOiBfd2ViYXVkaW8uZGVmYXVsdCxcbiAgICAgIE1lZGlhRWxlbWVudFdlYkF1ZGlvOiBfbWVkaWFlbGVtZW50V2ViYXVkaW8uZGVmYXVsdFxuICAgIH07XG4gICAgX3RoaXMudXRpbCA9IHV0aWw7XG4gICAgX3RoaXMucGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgX3RoaXMuZGVmYXVsdFBhcmFtcywgcGFyYW1zKTtcbiAgICBfdGhpcy5wYXJhbXMuc3BsaXRDaGFubmVsc09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBfdGhpcy5kZWZhdWx0UGFyYW1zLnNwbGl0Q2hhbm5lbHNPcHRpb25zLCBwYXJhbXMuc3BsaXRDaGFubmVsc09wdGlvbnMpO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMuY29udGFpbmVyID0gJ3N0cmluZycgPT0gdHlwZW9mIHBhcmFtcy5jb250YWluZXIgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF90aGlzLnBhcmFtcy5jb250YWluZXIpIDogX3RoaXMucGFyYW1zLmNvbnRhaW5lcjtcblxuICAgIGlmICghX3RoaXMuY29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRhaW5lciBlbGVtZW50IG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIGlmIChfdGhpcy5wYXJhbXMubWVkaWFDb250YWluZXIgPT0gbnVsbCkge1xuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICBfdGhpcy5tZWRpYUNvbnRhaW5lciA9IF90aGlzLmNvbnRhaW5lcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhpcy5wYXJhbXMubWVkaWFDb250YWluZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgX3RoaXMubWVkaWFDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF90aGlzLnBhcmFtcy5tZWRpYUNvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgX3RoaXMubWVkaWFDb250YWluZXIgPSBfdGhpcy5wYXJhbXMubWVkaWFDb250YWluZXI7XG4gICAgfVxuXG4gICAgaWYgKCFfdGhpcy5tZWRpYUNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZWRpYSBDb250YWluZXIgZWxlbWVudCBub3QgZm91bmQnKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMucGFyYW1zLm1heENhbnZhc1dpZHRoIDw9IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWF4Q2FudmFzV2lkdGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgIH0gZWxzZSBpZiAoX3RoaXMucGFyYW1zLm1heENhbnZhc1dpZHRoICUgMiA9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21heENhbnZhc1dpZHRoIG11c3QgYmUgYW4gZXZlbiBudW1iZXInKTtcbiAgICB9XG5cbiAgICBpZiAoX3RoaXMucGFyYW1zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgdXRpbC5zdHlsZShfdGhpcy5jb250YWluZXIsIHtcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlWSgxODBkZWcpJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLnBhcmFtcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIF90aGlzLnNldEJhY2tncm91bmRDb2xvcihfdGhpcy5wYXJhbXMuYmFja2dyb3VuZENvbG9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgVXNlZCB0byBzYXZlIHRoZSBjdXJyZW50IHZvbHVtZSB3aGVuIG11dGluZyBzbyB3ZSBjYW5cbiAgICAgKiByZXN0b3JlIG9uY2UgdW5tdXRlZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cblxuICAgIF90aGlzLnNhdmVkVm9sdW1lID0gMDtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSBUaGUgY3VycmVudCBtdXRlZCBzdGF0ZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgX3RoaXMuaXNNdXRlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIFdpbGwgaG9sZCBhIGxpc3Qgb2YgZXZlbnQgZGVzY3JpcHRvcnMgdGhhdCBuZWVkIHRvIGJlXG4gICAgICogY2FuY2VsZWQgb24gc3Vic2VxdWVudCBsb2FkcyBvZiBhdWRpb1xuICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgKi9cblxuICAgIF90aGlzLnRtcEV2ZW50cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIEhvbGRzIGFueSBydW5uaW5nIGF1ZGlvIGRvd25sb2Fkc1xuICAgICAqIEB0eXBlIHtPYnNlcnZlcn1cbiAgICAgKi9cblxuICAgIF90aGlzLmN1cnJlbnRSZXF1ZXN0ID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmFycmF5YnVmZmVyID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmRyYXdlciA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5iYWNrZW5kID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnBlYWtDYWNoZSA9IG51bGw7IC8vIGNhY2hlIGNvbnN0cnVjdG9yIG9iamVjdHNcblxuICAgIGlmICh0eXBlb2YgX3RoaXMucGFyYW1zLnJlbmRlcmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbmRlcmVyIHBhcmFtZXRlciBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIFRoZSB1bmluaXRpYWxpc2VkIERyYXdlciBjbGFzc1xuICAgICAqL1xuXG5cbiAgICBfdGhpcy5EcmF3ZXIgPSBfdGhpcy5wYXJhbXMucmVuZGVyZXI7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgVGhlIHVuaW5pdGlhbGlzZWQgQmFja2VuZCBjbGFzc1xuICAgICAqL1xuICAgIC8vIEJhY2sgY29tcGF0XG5cbiAgICBpZiAoX3RoaXMucGFyYW1zLmJhY2tlbmQgPT0gJ0F1ZGlvRWxlbWVudCcpIHtcbiAgICAgIF90aGlzLnBhcmFtcy5iYWNrZW5kID0gJ01lZGlhRWxlbWVudCc7XG4gICAgfVxuXG4gICAgaWYgKChfdGhpcy5wYXJhbXMuYmFja2VuZCA9PSAnV2ViQXVkaW8nIHx8IF90aGlzLnBhcmFtcy5iYWNrZW5kID09PSAnTWVkaWFFbGVtZW50V2ViQXVkaW8nKSAmJiAhX3dlYmF1ZGlvLmRlZmF1bHQucHJvdG90eXBlLnN1cHBvcnRzV2ViQXVkaW8uY2FsbChudWxsKSkge1xuICAgICAgX3RoaXMucGFyYW1zLmJhY2tlbmQgPSAnTWVkaWFFbGVtZW50JztcbiAgICB9XG5cbiAgICBfdGhpcy5CYWNrZW5kID0gX3RoaXMuYmFja2VuZHNbX3RoaXMucGFyYW1zLmJhY2tlbmRdO1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIG1hcCBvZiBwbHVnaW4gbmFtZXMgdGhhdCBhcmUgY3VycmVudGx5IGluaXRpYWxpc2VkXG4gICAgICovXG5cbiAgICBfdGhpcy5pbml0aWFsaXNlZFBsdWdpbkxpc3QgPSB7fTtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLmlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHJlYWR5IHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIGNvbnN0IGlzUmVhZHkgPSB3YXZlc3VyZmVyLmlzUmVhZHk7XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICAgIF90aGlzLmlzUmVhZHkgPSBmYWxzZTsgLy8gcmVzcG9uc2l2ZSBkZWJvdW5jZWQgZXZlbnQgbGlzdGVuZXIuIElmIHRoaXMucGFyYW1zLnJlc3BvbnNpdmUgaXMgbm90XG4gICAgLy8gc2V0LCB0aGlzIGlzIG5ldmVyIGNhbGxlZC4gVXNlIDEwMG1zIG9yIHRoaXMucGFyYW1zLnJlc3BvbnNpdmUgYXNcbiAgICAvLyB0aW1lb3V0IGZvciB0aGUgZGVib3VuY2UgZnVuY3Rpb24uXG5cbiAgICB2YXIgcHJldldpZHRoID0gMDtcbiAgICBfdGhpcy5fb25SZXNpemUgPSB1dGlsLmRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcmV2V2lkdGggIT0gX3RoaXMuZHJhd2VyLndyYXBwZXIuY2xpZW50V2lkdGggJiYgIV90aGlzLnBhcmFtcy5zY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgcHJldldpZHRoID0gX3RoaXMuZHJhd2VyLndyYXBwZXIuY2xpZW50V2lkdGg7XG5cbiAgICAgICAgX3RoaXMuZHJhd2VyLmZpcmVFdmVudCgncmVkcmF3Jyk7XG4gICAgICB9XG4gICAgfSwgdHlwZW9mIF90aGlzLnBhcmFtcy5yZXNwb25zaXZlID09PSAnbnVtYmVyJyA/IF90aGlzLnBhcmFtcy5yZXNwb25zaXZlIDogMTAwKTtcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgfVxuICAvKipcbiAgICogSW5pdGlhbGlzZSB0aGUgd2F2ZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgd2F2ZXN1cmZlciA9IG5ldyBXYXZlU3VyZmVyKHBhcmFtcyk7XG4gICAqIHdhdmVzdXJmZXIuaW5pdCgpO1xuICAgKiBAcmV0dXJuIHt0aGlzfSBUaGUgd2F2ZXN1cmZlciBpbnN0YW5jZVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhXYXZlU3VyZmVyLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyUGx1Z2lucyh0aGlzLnBhcmFtcy5wbHVnaW5zKTtcbiAgICAgIHRoaXMuY3JlYXRlRHJhd2VyKCk7XG4gICAgICB0aGlzLmNyZWF0ZUJhY2tlbmQoKTtcbiAgICAgIHRoaXMuY3JlYXRlUGVha0NhY2hlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGFuZCBpbml0aWFsaXNlIGFycmF5IG9mIHBsdWdpbnMgKGlmIGBwbHVnaW4uZGVmZXJJbml0YCBpcyBmYWxzZXkpLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGluIHRoZSBpbml0IGZ1bmN0aW9uIG9mIHdhdmVzdXJmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UGx1Z2luRGVmaW5pdGlvbltdfSBwbHVnaW5zIEFuIGFycmF5IG9mIHBsdWdpbiBkZWZpbml0aW9uc1xuICAgICAqIEBlbWl0cyB7V2F2ZVN1cmZlciNwbHVnaW5zLXJlZ2lzdGVyZWR9IENhbGxlZCB3aXRoIHRoZSBhcnJheSBvZiBwbHVnaW4gZGVmaW5pdGlvbnNcbiAgICAgKiBAcmV0dXJuIHt0aGlzfSBUaGUgd2F2ZXN1cmZlciBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJQbHVnaW5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2lucyhwbHVnaW5zKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gZmlyc3QgaW5zdGFudGlhdGUgYWxsIHRoZSBwbHVnaW5zXG4gICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmFkZFBsdWdpbihwbHVnaW4pO1xuICAgICAgfSk7IC8vIG5vdyBydW4gdGhlIGluaXQgZnVuY3Rpb25zXG5cbiAgICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIC8vIGNhbGwgaW5pdCBmdW5jdGlvbiBvZiB0aGUgcGx1Z2luIGlmIGRlZmVySW5pdCBpcyBmYWxzZXlcbiAgICAgICAgLy8gaW4gdGhhdCBjYXNlIHlvdSB3b3VsZCBtYW51YWxseSB1c2UgaW5pdFBsdWdpbnMoKVxuICAgICAgICBpZiAoIXBsdWdpbi5kZWZlckluaXQpIHtcbiAgICAgICAgICBfdGhpczIuaW5pdFBsdWdpbihwbHVnaW4ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3BsdWdpbnMtcmVnaXN0ZXJlZCcsIHBsdWdpbnMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIG1hcCBvZiBwbHVnaW4gbmFtZXMgdGhhdCBhcmUgY3VycmVudGx5IGluaXRpYWxpc2VkXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSB3YXZlc3VyZmVyLmdldFBsdWdpbnMoKTtcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIHBsdWdpbiBuYW1lc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0QWN0aXZlUGx1Z2luc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVQbHVnaW5zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbGlzZWRQbHVnaW5MaXN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwbHVnaW4gb2JqZWN0IHRvIHdhdmVzdXJmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UGx1Z2luRGVmaW5pdGlvbn0gcGx1Z2luIEEgcGx1Z2luIGRlZmluaXRpb25cbiAgICAgKiBAZW1pdHMge1dhdmVTdXJmZXIjcGx1Z2luLWFkZGVkfSBDYWxsZWQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luIHRoYXQgd2FzIGFkZGVkXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5hZGRQbHVnaW4oV2F2ZVN1cmZlci5taW5pbWFwKCkpO1xuICAgICAqIEByZXR1cm4ge3RoaXN9IFRoZSB3YXZlc3VyZmVyIGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRQbHVnaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUGx1Z2luKHBsdWdpbikge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghcGx1Z2luLm5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbHVnaW4gZG9lcyBub3QgaGF2ZSBhIG5hbWUhJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGx1Z2luLmluc3RhbmNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsdWdpbiBcIi5jb25jYXQocGx1Z2luLm5hbWUsIFwiIGRvZXMgbm90IGhhdmUgYW4gaW5zdGFuY2UgcHJvcGVydHkhXCIpKTtcbiAgICAgIH0gLy8gc3RhdGljUHJvcHMgcHJvcGVydGllcyBhcmUgYXBwbGllZCB0byB3YXZlc3VyZmVyIGluc3RhbmNlXG5cblxuICAgICAgaWYgKHBsdWdpbi5zdGF0aWNQcm9wcykge1xuICAgICAgICBPYmplY3Qua2V5cyhwbHVnaW4uc3RhdGljUHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpblN0YXRpY1Byb3ApIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBQcm9wZXJ0aWVzIGRlZmluZWQgaW4gYSBwbHVnaW4gZGVmaW5pdGlvbidzIGBzdGF0aWNQcm9wc2AgcHJvcGVydHkgYXJlIGFkZGVkIGFzXG4gICAgICAgICAgICogc3RhdGljUHJvcHMgcHJvcGVydGllcyBvZiB0aGUgV2F2ZVN1cmZlciBpbnN0YW5jZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzM1twbHVnaW5TdGF0aWNQcm9wXSA9IHBsdWdpbi5zdGF0aWNQcm9wc1twbHVnaW5TdGF0aWNQcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBJbnN0YW5jZSA9IHBsdWdpbi5pbnN0YW5jZTsgLy8gdHVybiB0aGUgcGx1Z2luIGluc3RhbmNlIGludG8gYW4gb2JzZXJ2ZXJcblxuICAgICAgdmFyIG9ic2VydmVyUHJvdG90eXBlS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHV0aWwuT2JzZXJ2ZXIucHJvdG90eXBlKTtcbiAgICAgIG9ic2VydmVyUHJvdG90eXBlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgSW5zdGFuY2UucHJvdG90eXBlW2tleV0gPSB1dGlsLk9ic2VydmVyLnByb3RvdHlwZVtrZXldO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIEluc3RhbnRpYXRlZCBwbHVnaW4gY2xhc3NlcyBhcmUgYWRkZWQgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgd2F2ZXN1cmZlclxuICAgICAgICogaW5zdGFuY2VcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cblxuICAgICAgdGhpc1twbHVnaW4ubmFtZV0gPSBuZXcgSW5zdGFuY2UocGx1Z2luLnBhcmFtcyB8fCB7fSwgdGhpcyk7XG4gICAgICB0aGlzLmZpcmVFdmVudCgncGx1Z2luLWFkZGVkJywgcGx1Z2luLm5hbWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2UgYSBwbHVnaW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgcGx1Z2luIG5hbWVcbiAgICAgKiBAZW1pdHMgV2F2ZVN1cmZlciNwbHVnaW4taW5pdGlhbGlzZWRcbiAgICAgKiBAZXhhbXBsZSB3YXZlc3VyZmVyLmluaXRQbHVnaW4oJ21pbmltYXAnKTtcbiAgICAgKiBAcmV0dXJuIHt0aGlzfSBUaGUgd2F2ZXN1cmZlciBpbnN0YW5jZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdFBsdWdpblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0UGx1Z2luKG5hbWUpIHtcbiAgICAgIGlmICghdGhpc1tuYW1lXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbHVnaW4gXCIuY29uY2F0KG5hbWUsIFwiIGhhcyBub3QgYmVlbiBhZGRlZCB5ZXQhXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaW5pdGlhbGlzZWRQbHVnaW5MaXN0W25hbWVdKSB7XG4gICAgICAgIC8vIGRlc3Ryb3kgYW55IGFscmVhZHkgaW5pdGlhbGlzZWQgcGx1Z2luc1xuICAgICAgICB0aGlzLmRlc3Ryb3lQbHVnaW4obmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXNbbmFtZV0uaW5pdCgpO1xuICAgICAgdGhpcy5pbml0aWFsaXNlZFBsdWdpbkxpc3RbbmFtZV0gPSB0cnVlO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3BsdWdpbi1pbml0aWFsaXNlZCcsIG5hbWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYSBwbHVnaW5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgcGx1Z2luIG5hbWVcbiAgICAgKiBAZW1pdHMgV2F2ZVN1cmZlciNwbHVnaW4tZGVzdHJveWVkXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5kZXN0cm95UGx1Z2luKCdtaW5pbWFwJyk7XG4gICAgICogQHJldHVybnMge3RoaXN9IFRoZSB3YXZlc3VyZmVyIGluc3RhbmNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95UGx1Z2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lQbHVnaW4obmFtZSkge1xuICAgICAgaWYgKCF0aGlzW25hbWVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsdWdpbiBcIi5jb25jYXQobmFtZSwgXCIgaGFzIG5vdCBiZWVuIGFkZGVkIHlldCBhbmQgY2Fubm90IGJlIGRlc3Ryb3llZCFcIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaW5pdGlhbGlzZWRQbHVnaW5MaXN0W25hbWVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsdWdpbiBcIi5jb25jYXQobmFtZSwgXCIgaXMgbm90IGFjdGl2ZSBhbmQgY2Fubm90IGJlIGRlc3Ryb3llZCFcIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXNbbmFtZV0uZGVzdHJveSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbHVnaW4gXCIuY29uY2F0KG5hbWUsIFwiIGRvZXMgbm90IGhhdmUgYSBkZXN0cm95IGZ1bmN0aW9uIVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXNbbmFtZV0uZGVzdHJveSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaW5pdGlhbGlzZWRQbHVnaW5MaXN0W25hbWVdO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3BsdWdpbi1kZXN0cm95ZWQnLCBuYW1lKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGFsbCBpbml0aWFsaXNlZCBwbHVnaW5zLiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byB1c2Ugd2hlblxuICAgICAqIHdhdmVzdXJmZXIgaXMgcmVtb3ZlZFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lBbGxQbHVnaW5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lBbGxQbHVnaW5zKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuaW5pdGlhbGlzZWRQbHVnaW5MaXN0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuZGVzdHJveVBsdWdpbihuYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGRyYXdlciBhbmQgZHJhdyB0aGUgd2F2ZWZvcm1cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjZHJhd2VyLWNyZWF0ZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZURyYXdlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVEcmF3ZXIoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdGhpcy5kcmF3ZXIgPSBuZXcgdGhpcy5EcmF3ZXIodGhpcy5jb250YWluZXIsIHRoaXMucGFyYW1zKTtcbiAgICAgIHRoaXMuZHJhd2VyLmluaXQoKTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdkcmF3ZXItY3JlYXRlZCcsIHRoaXMuZHJhd2VyKTtcblxuICAgICAgaWYgKHRoaXMucGFyYW1zLnJlc3BvbnNpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9vblJlc2l6ZSwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMuX29uUmVzaXplLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kcmF3ZXIub24oJ3JlZHJhdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM1LmRyYXdCdWZmZXIoKTtcblxuICAgICAgICBfdGhpczUuZHJhd2VyLnByb2dyZXNzKF90aGlzNS5iYWNrZW5kLmdldFBsYXllZFBlcmNlbnRzKCkpO1xuICAgICAgfSk7IC8vIENsaWNrLXRvLXNlZWtcblxuICAgICAgdGhpcy5kcmF3ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUsIHByb2dyZXNzKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczUuc2Vla1RvKHByb2dyZXNzKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTsgLy8gUmVsYXkgdGhlIHNjcm9sbCBldmVudCBmcm9tIHRoZSBkcmF3ZXJcblxuICAgICAgdGhpcy5kcmF3ZXIub24oJ3Njcm9sbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfdGhpczUucGFyYW1zLnBhcnRpYWxSZW5kZXIpIHtcbiAgICAgICAgICBfdGhpczUuZHJhd0J1ZmZlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM1LmZpcmVFdmVudCgnc2Nyb2xsJywgZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBiYWNrZW5kXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBlbWl0cyBXYXZlU3VyZmVyI2JhY2tlbmQtY3JlYXRlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlQmFja2VuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVCYWNrZW5kKCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmJhY2tlbmQpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLmRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5iYWNrZW5kID0gbmV3IHRoaXMuQmFja2VuZCh0aGlzLnBhcmFtcyk7XG4gICAgICB0aGlzLmJhY2tlbmQuaW5pdCgpO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ2JhY2tlbmQtY3JlYXRlZCcsIHRoaXMuYmFja2VuZCk7XG4gICAgICB0aGlzLmJhY2tlbmQub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM2LmRyYXdlci5wcm9ncmVzcyhfdGhpczYuYmFja2VuZC5nZXRQbGF5ZWRQZXJjZW50cygpKTtcblxuICAgICAgICBfdGhpczYuZmlyZUV2ZW50KCdmaW5pc2gnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5iYWNrZW5kLm9uKCdwbGF5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM2LmZpcmVFdmVudCgncGxheScpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmJhY2tlbmQub24oJ3BhdXNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM2LmZpcmVFdmVudCgncGF1c2UnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5iYWNrZW5kLm9uKCdhdWRpb3Byb2Nlc3MnLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICBfdGhpczYuZHJhd2VyLnByb2dyZXNzKF90aGlzNi5iYWNrZW5kLmdldFBsYXllZFBlcmNlbnRzKCkpO1xuXG4gICAgICAgIF90aGlzNi5maXJlRXZlbnQoJ2F1ZGlvcHJvY2VzcycsIHRpbWUpO1xuICAgICAgfSk7IC8vIG9ubHkgbmVlZGVkIGZvciBNZWRpYUVsZW1lbnQgYW5kIE1lZGlhRWxlbWVudFdlYkF1ZGlvIGJhY2tlbmRcblxuICAgICAgaWYgKHRoaXMucGFyYW1zLmJhY2tlbmQgPT09ICdNZWRpYUVsZW1lbnQnIHx8IHRoaXMucGFyYW1zLmJhY2tlbmQgPT09ICdNZWRpYUVsZW1lbnRXZWJBdWRpbycpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLm9uKCdzZWVrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNi5kcmF3ZXIucHJvZ3Jlc3MoX3RoaXM2LmJhY2tlbmQuZ2V0UGxheWVkUGVyY2VudHMoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJhY2tlbmQub24oJ3ZvbHVtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbmV3Vm9sdW1lID0gX3RoaXM2LmdldFZvbHVtZSgpO1xuXG4gICAgICAgICAgX3RoaXM2LmZpcmVFdmVudCgndm9sdW1lJywgbmV3Vm9sdW1lKTtcblxuICAgICAgICAgIGlmIChfdGhpczYuYmFja2VuZC5pc011dGVkICE9PSBfdGhpczYuaXNNdXRlZCkge1xuICAgICAgICAgICAgX3RoaXM2LmlzTXV0ZWQgPSBfdGhpczYuYmFja2VuZC5pc011dGVkO1xuXG4gICAgICAgICAgICBfdGhpczYuZmlyZUV2ZW50KCdtdXRlJywgX3RoaXM2LmlzTXV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgcGVhayBjYWNoZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVBlYWtDYWNoZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVQZWFrQ2FjaGUoKSB7XG4gICAgICBpZiAodGhpcy5wYXJhbXMucGFydGlhbFJlbmRlcikge1xuICAgICAgICB0aGlzLnBlYWtDYWNoZSA9IG5ldyBfcGVha2NhY2hlLmRlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkdXJhdGlvbiBvZiB0aGUgYXVkaW8gY2xpcFxuICAgICAqXG4gICAgICogQGV4YW1wbGUgY29uc3QgZHVyYXRpb24gPSB3YXZlc3VyZmVyLmdldER1cmF0aW9uKCk7XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBEdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmJhY2tlbmQuZ2V0RHVyYXRpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBjb25zdCBjdXJyZW50VGltZSA9IHdhdmVzdXJmZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFBsYXliYWNrIHBvc2l0aW9uIGluIHNlY29uZHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZC5nZXRDdXJyZW50VGltZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgcGxheSB0aW1lIGluIHNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyBBIHBvc2l0aXZlIG51bWJlciBpbiBzZWNvbmRzLiBFLmcuIDEwIG1lYW5zIDEwXG4gICAgICogc2Vjb25kcywgNjAgbWVhbnMgMSBtaW51dGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKHNlY29uZHMpIHtcbiAgICAgIGlmIChzZWNvbmRzID49IHRoaXMuZ2V0RHVyYXRpb24oKSkge1xuICAgICAgICB0aGlzLnNlZWtUbygxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Vla1RvKHNlY29uZHMgLyB0aGlzLmdldER1cmF0aW9uKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcGxheWJhY2sgZnJvbSB0aGUgY3VycmVudCBwb3NpdGlvbi4gT3B0aW9uYWwgc3RhcnQgYW5kIGVuZFxuICAgICAqIG1lYXN1cmVkIGluIHNlY29uZHMgY2FuIGJlIHVzZWQgdG8gc2V0IHRoZSByYW5nZSBvZiBhdWRpbyB0byBwbGF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBzdGFydCBQb3NpdGlvbiB0byBzdGFydCBhdFxuICAgICAqIEBwYXJhbSB7P251bWJlcn0gZW5kIFBvc2l0aW9uIHRvIGVuZCBhdFxuICAgICAqIEBlbWl0cyBXYXZlU3VyZmVyI2ludGVyYWN0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmVzdWx0IG9mIHRoZSBiYWNrZW5kIHBsYXkgbWV0aG9kXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBwbGF5IGZyb20gc2Vjb25kIDEgdG8gNVxuICAgICAqIHdhdmVzdXJmZXIucGxheSgxLCA1KTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdGhpcy5maXJlRXZlbnQoJ2ludGVyYWN0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM3LnBsYXkoc3RhcnQsIGVuZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLmJhY2tlbmQucGxheShzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgcG9pbnQgaW4gc2Vjb25kcyBmb3IgcGxheWJhY2sgdG8gc3RvcCBhdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiBQb3NpdGlvbiAoaW4gc2Vjb25kcykgdG8gc3RvcCBhdFxuICAgICAqIEB2ZXJzaW9uIDMuMy4wXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5RW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBsYXlFbmQocG9zaXRpb24pIHtcbiAgICAgIHRoaXMuYmFja2VuZC5zZXRQbGF5RW5kKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgYW5kIHBhdXNlcyBwbGF5YmFja1xuICAgICAqXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5wYXVzZSgpO1xuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJlc3VsdCBvZiB0aGUgYmFja2VuZCBwYXVzZSBtZXRob2RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgaWYgKCF0aGlzLmJhY2tlbmQuaXNQYXVzZWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBwbGF5YmFja1xuICAgICAqXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5wbGF5UGF1c2UoKTtcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXN1bHQgb2YgdGhlIGJhY2tlbmQgcGxheSBvciBwYXVzZSBtZXRob2RcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBsYXlQYXVzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5UGF1c2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLmlzUGF1c2VkKCkgPyB0aGlzLnBsYXkoKSA6IHRoaXMucGF1c2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHBsYXliYWNrIHN0YXRlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBjb25zdCBpc1BsYXlpbmcgPSB3YXZlc3VyZmVyLmlzUGxheWluZygpO1xuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEZhbHNlIGlmIHBhdXNlZCwgdHJ1ZSBpZiBwbGF5aW5nXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc1BsYXlpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQbGF5aW5nKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmJhY2tlbmQuaXNQYXVzZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2tpcCBiYWNrd2FyZFxuICAgICAqXG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBzZWNvbmRzIEFtb3VudCB0byBza2lwIGJhY2ssIGlmIG5vdCBzcGVjaWZpZWQgYHNraXBMZW5ndGhgXG4gICAgICogaXMgdXNlZFxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIuc2tpcEJhY2t3YXJkKCk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJza2lwQmFja3dhcmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2tpcEJhY2t3YXJkKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuc2tpcCgtc2Vjb25kcyB8fCAtdGhpcy5wYXJhbXMuc2tpcExlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNraXAgZm9yd2FyZFxuICAgICAqXG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBzZWNvbmRzIEFtb3VudCB0byBza2lwIGJhY2ssIGlmIG5vdCBzcGVjaWZpZWQgYHNraXBMZW5ndGhgXG4gICAgICogaXMgdXNlZFxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIuc2tpcEZvcndhcmQoKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNraXBGb3J3YXJkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNraXBGb3J3YXJkKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuc2tpcChzZWNvbmRzIHx8IHRoaXMucGFyYW1zLnNraXBMZW5ndGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTa2lwIGEgbnVtYmVyIG9mIHNlY29uZHMgZnJvbSB0aGUgY3VycmVudCBwb3NpdGlvbiAodXNlIGEgbmVnYXRpdmUgdmFsdWVcbiAgICAgKiB0byBnbyBiYWNrd2FyZHMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBBbW91bnQgdG8gc2tpcCBiYWNrIG9yIGZvcndhcmRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnbyBiYWNrIDIgc2Vjb25kc1xuICAgICAqIHdhdmVzdXJmZXIuc2tpcCgtMik7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJza2lwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNraXAob2Zmc2V0KSB7XG4gICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmdldER1cmF0aW9uKCkgfHwgMTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0Q3VycmVudFRpbWUoKSB8fCAwO1xuICAgICAgcG9zaXRpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbihkdXJhdGlvbiwgcG9zaXRpb24gKyAob2Zmc2V0IHx8IDApKSk7XG4gICAgICB0aGlzLnNlZWtBbmRDZW50ZXIocG9zaXRpb24gLyBkdXJhdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZWtzIHRvIGEgcG9zaXRpb24gYW5kIGNlbnRlcnMgdGhlIHZpZXdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyBCZXR3ZWVuIDAgKD1iZWdpbm5pbmcpIGFuZCAxICg9ZW5kKVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gc2VlayBhbmQgZ28gdG8gdGhlIG1pZGRsZSBvZiB0aGUgYXVkaW9cbiAgICAgKiB3YXZlc3VyZmVyLnNlZWtUbygwLjUpO1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla0FuZENlbnRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrQW5kQ2VudGVyKHByb2dyZXNzKSB7XG4gICAgICB0aGlzLnNlZWtUbyhwcm9ncmVzcyk7XG4gICAgICB0aGlzLmRyYXdlci5yZWNlbnRlcihwcm9ncmVzcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZWtzIHRvIGEgcG9zaXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcm9ncmVzcyBCZXR3ZWVuIDAgKD1iZWdpbm5pbmcpIGFuZCAxICg9ZW5kKVxuICAgICAqIEBlbWl0cyBXYXZlU3VyZmVyI2ludGVyYWN0aW9uXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjc2Vla1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gc2VlayB0byB0aGUgbWlkZGxlIG9mIHRoZSBhdWRpb1xuICAgICAqIHdhdmVzdXJmZXIuc2Vla1RvKDAuNSk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHByb2dyZXNzKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgLy8gcmV0dXJuIGFuIGVycm9yIGlmIHByb2dyZXNzIGlzIG5vdCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgIGlmICh0eXBlb2YgcHJvZ3Jlc3MgIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZShwcm9ncmVzcykgfHwgcHJvZ3Jlc3MgPCAwIHx8IHByb2dyZXNzID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGNhbGxpbmcgd2F2ZXN1cmZlci5zZWVrVG8sIHBhcmFtZXRlciBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSEnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5maXJlRXZlbnQoJ2ludGVyYWN0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM4LnNlZWtUbyhwcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICAgIHZhciBpc1dlYkF1ZGlvQmFja2VuZCA9IHRoaXMucGFyYW1zLmJhY2tlbmQgPT09ICdXZWJBdWRpbyc7XG4gICAgICB2YXIgcGF1c2VkID0gdGhpcy5iYWNrZW5kLmlzUGF1c2VkKCk7XG5cbiAgICAgIGlmIChpc1dlYkF1ZGlvQmFja2VuZCAmJiAhcGF1c2VkKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZC5wYXVzZSgpO1xuICAgICAgfSAvLyBhdm9pZCBzbWFsbCBzY3JvbGxzIHdoaWxlIHBhdXNlZCBzZWVraW5nXG5cblxuICAgICAgdmFyIG9sZFNjcm9sbFBhcmVudCA9IHRoaXMucGFyYW1zLnNjcm9sbFBhcmVudDtcbiAgICAgIHRoaXMucGFyYW1zLnNjcm9sbFBhcmVudCA9IGZhbHNlO1xuICAgICAgdGhpcy5iYWNrZW5kLnNlZWtUbyhwcm9ncmVzcyAqIHRoaXMuZ2V0RHVyYXRpb24oKSk7XG4gICAgICB0aGlzLmRyYXdlci5wcm9ncmVzcyhwcm9ncmVzcyk7XG5cbiAgICAgIGlmIChpc1dlYkF1ZGlvQmFja2VuZCAmJiAhcGF1c2VkKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZC5wbGF5KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGFyYW1zLnNjcm9sbFBhcmVudCA9IG9sZFNjcm9sbFBhcmVudDtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdzZWVrJywgcHJvZ3Jlc3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyBhbmQgZ29lcyB0byB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5zdG9wKCk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLnNlZWtUbygwKTtcbiAgICAgIHRoaXMuZHJhd2VyLnByb2dyZXNzKDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBJRCBvZiB0aGUgYXVkaW8gZGV2aWNlIHRvIHVzZSBmb3Igb3V0cHV0IGFuZCByZXR1cm5zIGEgUHJvbWlzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJZCBTdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHVuZGVybHlpbmcgb3V0cHV0XG4gICAgICogZGV2aWNlXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHRvIGB1bmRlZmluZWRgIHdoZW4gdGhlcmUgYXJlXG4gICAgICogbm8gZXJyb3JzIGRldGVjdGVkLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2lua0lkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNpbmtJZChkZXZpY2VJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZC5zZXRTaW5rSWQoZGV2aWNlSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHBsYXliYWNrIHZvbHVtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdWb2x1bWUgQSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIDAgYmVpbmcgbm9cbiAgICAgKiB2b2x1bWUgYW5kIDEgYmVpbmcgZnVsbCB2b2x1bWUuXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjdm9sdW1lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKG5ld1ZvbHVtZSkge1xuICAgICAgdGhpcy5iYWNrZW5kLnNldFZvbHVtZShuZXdWb2x1bWUpO1xuICAgICAgdGhpcy5maXJlRXZlbnQoJ3ZvbHVtZScsIG5ld1ZvbHVtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGxheWJhY2sgdm9sdW1lLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgMCBiZWluZyBub1xuICAgICAqIHZvbHVtZSBhbmQgMSBiZWluZyBmdWxsIHZvbHVtZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWb2x1bWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLmdldFZvbHVtZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHBsYXliYWNrIHJhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0ZSBBIHBvc2l0aXZlIG51bWJlci4gRS5nLiAwLjUgbWVhbnMgaGFsZiB0aGUgbm9ybWFsXG4gICAgICogc3BlZWQsIDIgbWVhbnMgZG91YmxlIHNwZWVkIGFuZCBzbyBvbi5cbiAgICAgKiBAZXhhbXBsZSB3YXZlc3VyZmVyLnNldFBsYXliYWNrUmF0ZSgyKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgICAgdGhpcy5iYWNrZW5kLnNldFBsYXliYWNrUmF0ZShyYXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwbGF5YmFjayByYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBwbGF5YmFjayByYXRlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGxheWJhY2tSYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBsYXliYWNrUmF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJhY2tlbmQuZ2V0UGxheWJhY2tSYXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgdm9sdW1lIG9uIGFuZCBvZmYuIElmIG5vdCBjdXJyZW50bHkgbXV0ZWQgaXQgd2lsbCBzYXZlIHRoZVxuICAgICAqIGN1cnJlbnQgdm9sdW1lIHZhbHVlIGFuZCB0dXJuIHRoZSB2b2x1bWUgb2ZmLiBJZiBjdXJyZW50bHkgbXV0ZWQgdGhlbiBpdFxuICAgICAqIHdpbGwgcmVzdG9yZSB0aGUgdm9sdW1lIHRvIHRoZSBzYXZlZCB2YWx1ZSwgYW5kIHRoZW4gcmVzdCB0aGUgc2F2ZWRcbiAgICAgKiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIudG9nZ2xlTXV0ZSgpO1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9nZ2xlTXV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVNdXRlKCkge1xuICAgICAgdGhpcy5zZXRNdXRlKCF0aGlzLmlzTXV0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmFibGUgb3IgZGlzYWJsZSBtdXRlZCBhdWRpb1xuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBtdXRlIFNwZWNpZnkgYHRydWVgIHRvIG11dGUgYXVkaW8uXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjdm9sdW1lXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjbXV0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gdW5tdXRlXG4gICAgICogd2F2ZXN1cmZlci5zZXRNdXRlKGZhbHNlKTtcbiAgICAgKiBjb25zb2xlLmxvZyh3YXZlc3VyZmVyLmdldE11dGUoKSkgLy8gbG9ncyBmYWxzZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TXV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNdXRlKG11dGUpIHtcbiAgICAgIC8vIGlnbm9yZSBhbGwgbXV0aW5nIHJlcXVlc3RzIGlmIHRoZSBhdWRpbyBpcyBhbHJlYWR5IGluIHRoYXQgc3RhdGVcbiAgICAgIGlmIChtdXRlID09PSB0aGlzLmlzTXV0ZWQpIHtcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoJ211dGUnLCB0aGlzLmlzTXV0ZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmJhY2tlbmQuc2V0TXV0ZSkge1xuICAgICAgICAvLyBCYWNrZW5kcyBzdWNoIGFzIHRoZSBNZWRpYUVsZW1lbnQgYmFja2VuZCBoYXZlIHRoZWlyIG93biBoYW5kbGluZ1xuICAgICAgICAvLyBvZiBtdXRlLCBsZXQgdGhlbSBoYW5kbGUgaXQuXG4gICAgICAgIHRoaXMuYmFja2VuZC5zZXRNdXRlKG11dGUpO1xuICAgICAgICB0aGlzLmlzTXV0ZWQgPSBtdXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG11dGUpIHtcbiAgICAgICAgICAvLyBJZiBjdXJyZW50bHkgbm90IG11dGVkIHRoZW4gc2F2ZSBjdXJyZW50IHZvbHVtZSxcbiAgICAgICAgICAvLyB0dXJuIG9mZiB0aGUgdm9sdW1lIGFuZCB1cGRhdGUgdGhlIG11dGUgcHJvcGVydGllc1xuICAgICAgICAgIHRoaXMuc2F2ZWRWb2x1bWUgPSB0aGlzLmJhY2tlbmQuZ2V0Vm9sdW1lKCk7XG4gICAgICAgICAgdGhpcy5iYWNrZW5kLnNldFZvbHVtZSgwKTtcbiAgICAgICAgICB0aGlzLmlzTXV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCd2b2x1bWUnLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBjdXJyZW50bHkgbXV0ZWQgdGhlbiByZXN0b3JlIHRvIHRoZSBzYXZlZCB2b2x1bWVcbiAgICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBtdXRlIHByb3BlcnRpZXNcbiAgICAgICAgICB0aGlzLmJhY2tlbmQuc2V0Vm9sdW1lKHRoaXMuc2F2ZWRWb2x1bWUpO1xuICAgICAgICAgIHRoaXMuaXNNdXRlZCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCd2b2x1bWUnLCB0aGlzLnNhdmVkVm9sdW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmZpcmVFdmVudCgnbXV0ZScsIHRoaXMuaXNNdXRlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBtdXRlIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIGNvbnN0IGlzTXV0ZWQgPSB3YXZlc3VyZmVyLmdldE11dGUoKTtcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBDdXJyZW50IG11dGUgc3RhdHVzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRNdXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE11dGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc011dGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgY3VycmVudCBzZXQgZmlsdGVycyBhcyBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEZpbHRlcnMgbXVzdCBiZSBzZXQgd2l0aCBzZXRGaWx0ZXJzIG1ldGhvZCBmaXJzdFxuICAgICAqXG4gICAgICogQHJldHVybiB7YXJyYXl9IExpc3Qgb2YgZW5hYmxlZCBmaWx0ZXJzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRGaWx0ZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlcnMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLmZpbHRlcnMgfHwgW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYHNjcm9sbFBhcmVudGAgYW5kIHJlZHJhd3NcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIudG9nZ2xlU2Nyb2xsKCk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ0b2dnbGVTY3JvbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlU2Nyb2xsKCkge1xuICAgICAgdGhpcy5wYXJhbXMuc2Nyb2xsUGFyZW50ID0gIXRoaXMucGFyYW1zLnNjcm9sbFBhcmVudDtcbiAgICAgIHRoaXMuZHJhd0J1ZmZlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgbW91c2UgaW50ZXJhY3Rpb25cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIudG9nZ2xlSW50ZXJhY3Rpb24oKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRvZ2dsZUludGVyYWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZUludGVyYWN0aW9uKCkge1xuICAgICAgdGhpcy5wYXJhbXMuaW50ZXJhY3QgPSAhdGhpcy5wYXJhbXMuaW50ZXJhY3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmlsbCBjb2xvciBvZiB0aGUgd2F2ZWZvcm0gYWZ0ZXIgdGhlIGN1cnNvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0V2F2ZUNvbG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFdhdmVDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmFtcy53YXZlQ29sb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZmlsbCBjb2xvciBvZiB0aGUgd2F2ZWZvcm0gYWZ0ZXIgdGhlIGN1cnNvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBBIENTUyBjb2xvciBzdHJpbmcuXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5zZXRXYXZlQ29sb3IoJyNkZGQnKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFdhdmVDb2xvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXYXZlQ29sb3IoY29sb3IpIHtcbiAgICAgIHRoaXMucGFyYW1zLndhdmVDb2xvciA9IGNvbG9yO1xuICAgICAgdGhpcy5kcmF3QnVmZmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmlsbCBjb2xvciBvZiB0aGUgd2F2ZWZvcm0gYmVoaW5kIHRoZSBjdXJzb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFByb2dyZXNzQ29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NDb2xvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5wcm9ncmVzc0NvbG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZpbGwgY29sb3Igb2YgdGhlIHdhdmVmb3JtIGJlaGluZCB0aGUgY3Vyc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIEEgQ1NTIGNvbG9yIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZSB3YXZlc3VyZmVyLnNldFByb2dyZXNzQ29sb3IoJyM0MDAnKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFByb2dyZXNzQ29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJvZ3Jlc3NDb2xvcihjb2xvcikge1xuICAgICAgdGhpcy5wYXJhbXMucHJvZ3Jlc3NDb2xvciA9IGNvbG9yO1xuICAgICAgdGhpcy5kcmF3QnVmZmVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgd2F2ZWZvcm0gY29udGFpbmVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRCYWNrZ3JvdW5kQ29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmFja2dyb3VuZENvbG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSB3YXZlZm9ybSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgQSBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIuc2V0QmFja2dyb3VuZENvbG9yKCcjRkYwMEZGJyk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRCYWNrZ3JvdW5kQ29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yKSB7XG4gICAgICB0aGlzLnBhcmFtcy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICAgIHV0aWwuc3R5bGUodGhpcy5jb250YWluZXIsIHtcbiAgICAgICAgYmFja2dyb3VuZDogdGhpcy5wYXJhbXMuYmFja2dyb3VuZENvbG9yXG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmaWxsIGNvbG9yIG9mIHRoZSBjdXJzb3IgaW5kaWNhdGluZyB0aGUgcGxheWhlYWRcbiAgICAgKiBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3Vyc29yQ29sb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3Vyc29yQ29sb3IoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJhbXMuY3Vyc29yQ29sb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZmlsbCBjb2xvciBvZiB0aGUgY3Vyc29yIGluZGljYXRpbmcgdGhlIHBsYXloZWFkXG4gICAgICogcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgQSBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqIEBleGFtcGxlIHdhdmVzdXJmZXIuc2V0Q3Vyc29yQ29sb3IoJyMyMjInKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEN1cnNvckNvbG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnNvckNvbG9yKGNvbG9yKSB7XG4gICAgICB0aGlzLnBhcmFtcy5jdXJzb3JDb2xvciA9IGNvbG9yO1xuICAgICAgdGhpcy5kcmF3ZXIudXBkYXRlQ3Vyc29yKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaGVpZ2h0IG9mIHRoZSB3YXZlZm9ybS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gSGVpZ2h0IG1lYXN1cmVkIGluIHBpeGVscy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEhlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJhbXMuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGhlaWdodCBvZiB0aGUgd2F2ZWZvcm0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBtZWFzdXJlZCBpbiBwaXhlbHMuXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci5zZXRIZWlnaHQoMjAwKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEhlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICB0aGlzLnBhcmFtcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB0aGlzLmRyYXdlci5zZXRIZWlnaHQoaGVpZ2h0ICogdGhpcy5wYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgICB0aGlzLmRyYXdCdWZmZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZSBjaGFubmVscyBmcm9tIGJlaW5nIGRyYXduIG9uIHRoZSB3YXZlZm9ybSBpZiBzcGxpdHRpbmcgY2hhbm5lbHMuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgaWYgd2Ugd2FudCB0byBkcmF3IG9ubHkgdGhlIHBlYWtzIGZvciB0aGUgcmlnaHQgc3RlcmVvIGNoYW5uZWw6XG4gICAgICpcbiAgICAgKiBjb25zdCB3YXZlc3VyZmVyID0gbmV3IFdhdmVTdXJmZXIuY3JlYXRlKHsuLi5zcGxpdENoYW5uZWxzOiB0cnVlfSk7XG4gICAgICogd2F2ZXN1cmZlci5sb2FkKCdzdGVyZW9fYXVkaW8ubXAzJyk7XG4gICAgICpcbiAgICAgKiB3YXZlc3VyZmVyLnNldEZpbHRlcmVkQ2hhbm5lbChbMF0pOyA8LS0gaGlkZSBsZWZ0IGNoYW5uZWwgcGVha3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBjaGFubmVsSW5kaWNlcyBDaGFubmVscyB0byBiZSBmaWx0ZXJlZCBvdXQgZnJvbSBkcmF3aW5nLlxuICAgICAqIEB2ZXJzaW9uIDQuMC4wXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRGaWx0ZXJlZENoYW5uZWxzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbHRlcmVkQ2hhbm5lbHMoY2hhbm5lbEluZGljZXMpIHtcbiAgICAgIHRoaXMucGFyYW1zLnNwbGl0Q2hhbm5lbHNPcHRpb25zLmZpbHRlckNoYW5uZWxzID0gY2hhbm5lbEluZGljZXM7XG4gICAgICB0aGlzLmRyYXdCdWZmZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb3JyZWN0IHBlYWtzIGZvciBjdXJyZW50IHdhdmUgdmlldy1wb3J0IGFuZCByZW5kZXIgd2F2ZVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZW1pdHMgV2F2ZVN1cmZlciNyZWRyYXdcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRyYXdCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0J1ZmZlcigpIHtcbiAgICAgIHZhciBub21pbmFsV2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuZ2V0RHVyYXRpb24oKSAqIHRoaXMucGFyYW1zLm1pblB4UGVyU2VjICogdGhpcy5wYXJhbXMucGl4ZWxSYXRpbyk7XG4gICAgICB2YXIgcGFyZW50V2lkdGggPSB0aGlzLmRyYXdlci5nZXRXaWR0aCgpO1xuICAgICAgdmFyIHdpZHRoID0gbm9taW5hbFdpZHRoOyAvLyBhbHdheXMgc3RhcnQgYXQgMCBhZnRlciB6b29taW5nIGZvciBzY3JvbGxpbmcgOiBpc3N1ZSByZWRyYXcgbGVmdCBwYXJ0XG5cbiAgICAgIHZhciBzdGFydCA9IDA7XG4gICAgICB2YXIgZW5kID0gTWF0aC5tYXgoc3RhcnQgKyBwYXJlbnRXaWR0aCwgd2lkdGgpOyAvLyBGaWxsIGNvbnRhaW5lclxuXG4gICAgICBpZiAodGhpcy5wYXJhbXMuZmlsbFBhcmVudCAmJiAoIXRoaXMucGFyYW1zLnNjcm9sbFBhcmVudCB8fCBub21pbmFsV2lkdGggPCBwYXJlbnRXaWR0aCkpIHtcbiAgICAgICAgd2lkdGggPSBwYXJlbnRXaWR0aDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSB3aWR0aDtcbiAgICAgIH1cblxuICAgICAgdmFyIHBlYWtzO1xuXG4gICAgICBpZiAodGhpcy5wYXJhbXMucGFydGlhbFJlbmRlcikge1xuICAgICAgICB2YXIgbmV3UmFuZ2VzID0gdGhpcy5wZWFrQ2FjaGUuYWRkUmFuZ2VUb1BlYWtDYWNoZSh3aWR0aCwgc3RhcnQsIGVuZCk7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXdSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwZWFrcyA9IHRoaXMuYmFja2VuZC5nZXRQZWFrcyh3aWR0aCwgbmV3UmFuZ2VzW2ldWzBdLCBuZXdSYW5nZXNbaV1bMV0pO1xuICAgICAgICAgIHRoaXMuZHJhd2VyLmRyYXdQZWFrcyhwZWFrcywgd2lkdGgsIG5ld1Jhbmdlc1tpXVswXSwgbmV3UmFuZ2VzW2ldWzFdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVha3MgPSB0aGlzLmJhY2tlbmQuZ2V0UGVha3Mod2lkdGgsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB0aGlzLmRyYXdlci5kcmF3UGVha3MocGVha3MsIHdpZHRoLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5maXJlRXZlbnQoJ3JlZHJhdycsIHBlYWtzLCB3aWR0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhvcml6b250YWxseSB6b29tcyB0aGUgd2F2ZWZvcm0gaW4gYW5kIG91dC4gSXQgYWxzbyBjaGFuZ2VzIHRoZSBwYXJhbWV0ZXJcbiAgICAgKiBgbWluUHhQZXJTZWNgIGFuZCBlbmFibGVzIHRoZSBgc2Nyb2xsUGFyZW50YCBvcHRpb24uIENhbGxpbmcgdGhlIGZ1bmN0aW9uXG4gICAgICogd2l0aCBhIGZhbHNleSBwYXJhbWV0ZXIgd2lsbCByZXNldCB0aGUgem9vbSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P251bWJlcn0gcHhQZXJTZWMgTnVtYmVyIG9mIGhvcml6b250YWwgcGl4ZWxzIHBlciBzZWNvbmQgb2ZcbiAgICAgKiBhdWRpbywgaWYgbm9uZSBpcyBzZXQgdGhlIHdhdmVmb3JtIHJldHVybnMgdG8gdW56b29tZWQgc3RhdGVcbiAgICAgKiBAZW1pdHMgV2F2ZVN1cmZlciN6b29tXG4gICAgICogQGV4YW1wbGUgd2F2ZXN1cmZlci56b29tKDIwKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInpvb21cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gem9vbShweFBlclNlYykge1xuICAgICAgaWYgKCFweFBlclNlYykge1xuICAgICAgICB0aGlzLnBhcmFtcy5taW5QeFBlclNlYyA9IHRoaXMuZGVmYXVsdFBhcmFtcy5taW5QeFBlclNlYztcbiAgICAgICAgdGhpcy5wYXJhbXMuc2Nyb2xsUGFyZW50ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcmFtcy5taW5QeFBlclNlYyA9IHB4UGVyU2VjO1xuICAgICAgICB0aGlzLnBhcmFtcy5zY3JvbGxQYXJlbnQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYXdCdWZmZXIoKTtcbiAgICAgIHRoaXMuZHJhd2VyLnByb2dyZXNzKHRoaXMuYmFja2VuZC5nZXRQbGF5ZWRQZXJjZW50cygpKTtcbiAgICAgIHRoaXMuZHJhd2VyLnJlY2VudGVyKHRoaXMuZ2V0Q3VycmVudFRpbWUoKSAvIHRoaXMuZ2V0RHVyYXRpb24oKSk7XG4gICAgICB0aGlzLmZpcmVFdmVudCgnem9vbScsIHB4UGVyU2VjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGJ1ZmZlciBhbmQgbG9hZFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheWJ1ZmZlciBCdWZmZXIgdG8gcHJvY2Vzc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZEFycmF5QnVmZmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRBcnJheUJ1ZmZlcihhcnJheWJ1ZmZlcikge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZGVjb2RlQXJyYXlCdWZmZXIoYXJyYXlidWZmZXIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghX3RoaXM5LmlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgX3RoaXM5LmxvYWREZWNvZGVkQnVmZmVyKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlyZWN0bHkgbG9hZCBhbiBleHRlcm5hbGx5IGRlY29kZWQgQXVkaW9CdWZmZXJcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBdWRpb0J1ZmZlcn0gYnVmZmVyIEJ1ZmZlciB0byBwcm9jZXNzXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjcmVhZHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvYWREZWNvZGVkQnVmZmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWREZWNvZGVkQnVmZmVyKGJ1ZmZlcikge1xuICAgICAgdGhpcy5iYWNrZW5kLmxvYWQoYnVmZmVyKTtcbiAgICAgIHRoaXMuZHJhd0J1ZmZlcigpO1xuICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdyZWFkeScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyBhdWRpbyBkYXRhIGZyb20gYSBCbG9iIG9yIEZpbGUgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jsb2J8RmlsZX0gYmxvYiBBdWRpbyBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvYWRCbG9iXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRCbG9iKGJsb2IpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgLy8gQ3JlYXRlIGZpbGUgcmVhZGVyXG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczEwLm9uUHJvZ3Jlc3MoZSk7XG4gICAgICB9KTtcbiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTAubG9hZEFycmF5QnVmZmVyKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTAuZmlyZUV2ZW50KCdlcnJvcicsICdFcnJvciByZWFkaW5nIGZpbGUnKTtcbiAgICAgIH0pO1xuICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICAgICAgdGhpcy5lbXB0eSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyBhdWRpbyBhbmQgcmUtcmVuZGVycyB0aGUgd2F2ZWZvcm0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xIVE1MTWVkaWFFbGVtZW50fSB1cmwgVGhlIHVybCBvZiB0aGUgYXVkaW8gZmlsZSBvciB0aGVcbiAgICAgKiBhdWRpbyBlbGVtZW50IHdpdGggdGhlIGF1ZGlvXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBXYXZlc3VyZmVyIGRvZXMgbm90IGhhdmUgdG8gZGVjb2RlXG4gICAgICogdGhlIGF1ZGlvIHRvIHJlbmRlciB0aGUgd2F2ZWZvcm0gaWYgdGhpcyBpcyBzcGVjaWZpZWRcbiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHByZWxvYWQgKFVzZSB3aXRoIGJhY2tlbmQgYE1lZGlhRWxlbWVudGAgYW5kIGBNZWRpYUVsZW1lbnRXZWJBdWRpb2ApXG4gICAgICogYCdub25lJ3wnbWV0YWRhdGEnfCdhdXRvJ2AgUHJlbG9hZCBhdHRyaWJ1dGUgZm9yIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIGF1ZGlvLiBUaGlzIGlzIHVzZWQgdG9cbiAgICAgKiByZW5kZXIgdGhlIHBlYWtzIGRhdGEgaW4gdGhlIGNvcnJlY3Qgc2l6ZSBmb3IgdGhlIGF1ZGlvIGR1cmF0aW9uIChhc1xuICAgICAqIGJlZml0cyB0aGUgY3VycmVudCBgbWluUHhQZXJTZWNgIGFuZCB6b29tIHZhbHVlKSB3aXRob3V0IGhhdmluZyB0byBkZWNvZGVcbiAgICAgKiB0aGUgYXVkaW8uXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIHRoZSBgdXJsYCBhcmd1bWVudCBpcyBlbXB0eS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHVzZXMgZmV0Y2ggb3IgbWVkaWEgZWxlbWVudCB0byBsb2FkIGZpbGUgKGRlcGVuZGluZyBvbiBiYWNrZW5kKVxuICAgICAqIHdhdmVzdXJmZXIubG9hZCgnaHR0cDovL2V4YW1wbGUuY29tL2RlbW8ud2F2Jyk7XG4gICAgICpcbiAgICAgKiAvLyBzZXR0aW5nIHByZWxvYWQgYXR0cmlidXRlIHdpdGggbWVkaWEgZWxlbWVudCBiYWNrZW5kIGFuZCBzdXBwbHlpbmdcbiAgICAgKiAvLyBwZWFrc1xuICAgICAqIHdhdmVzdXJmZXIubG9hZChcbiAgICAgKiAgICdodHRwOi8vZXhhbXBsZS5jb20vZGVtby53YXYnLFxuICAgICAqICAgWzAuMDIxOCwgMC4wMTgzLCAwLjAxNjUsIDAuMDE5OCwgMC4yMTM3LCAwLjI4ODhdLFxuICAgICAqICAgdHJ1ZVxuICAgICAqICk7XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsLCBwZWFrcywgcHJlbG9hZCwgZHVyYXRpb24pIHtcbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndXJsIHBhcmFtZXRlciBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbXB0eSgpO1xuXG4gICAgICBpZiAocHJlbG9hZCkge1xuICAgICAgICAvLyBjaGVjayB3aGV0aGVyIHRoZSBwcmVsb2FkIGF0dHJpYnV0ZSB3aWxsIGJlIHVzYWJsZSBhbmQgaWYgbm90IGxvZ1xuICAgICAgICAvLyBhIHdhcm5pbmcgbGlzdGluZyB0aGUgcmVhc29ucyB3aHkgbm90IGFuZCBudWxsaWZ5IHRoZSB2YXJpYWJsZVxuICAgICAgICB2YXIgcHJlbG9hZElnbm9yZVJlYXNvbnMgPSB7XG4gICAgICAgICAgXCJQcmVsb2FkIGlzIG5vdCAnYXV0bycsICdub25lJyBvciAnbWV0YWRhdGEnXCI6IFsnYXV0bycsICdtZXRhZGF0YScsICdub25lJ10uaW5kZXhPZihwcmVsb2FkKSA9PT0gLTEsXG4gICAgICAgICAgJ1BlYWtzIGFyZSBub3QgcHJvdmlkZWQnOiAhcGVha3MsXG4gICAgICAgICAgXCJCYWNrZW5kIGlzIG5vdCBvZiB0eXBlICdNZWRpYUVsZW1lbnQnIG9yICdNZWRpYUVsZW1lbnRXZWJBdWRpbydcIjogWydNZWRpYUVsZW1lbnQnLCAnTWVkaWFFbGVtZW50V2ViQXVkaW8nXS5pbmRleE9mKHRoaXMucGFyYW1zLmJhY2tlbmQpID09PSAtMSxcbiAgICAgICAgICAnVXJsIGlzIG5vdCBvZiB0eXBlIHN0cmluZyc6IHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnXG4gICAgICAgIH07XG4gICAgICAgIHZhciBhY3RpdmVSZWFzb25zID0gT2JqZWN0LmtleXMocHJlbG9hZElnbm9yZVJlYXNvbnMpLmZpbHRlcihmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgcmV0dXJuIHByZWxvYWRJZ25vcmVSZWFzb25zW3JlYXNvbl07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhY3RpdmVSZWFzb25zLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdQcmVsb2FkIHBhcmFtZXRlciBvZiB3YXZlc3VyZmVyLmxvYWQgd2lsbCBiZSBpZ25vcmVkIGJlY2F1c2U6XFxuXFx0LSAnICsgYWN0aXZlUmVhc29ucy5qb2luKCdcXG5cXHQtICcpKTsgLy8gc3RvcCBpbnZhbGlkIHZhbHVlcyBmcm9tIGJlaW5nIHVzZWRcblxuICAgICAgICAgIHByZWxvYWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIGxvYWRCdWZmZXIodXJsLCBwZWFrcywgZHVyYXRpb24pIHJlcXVpcmVzIHRoYXQgdXJsIGlzIGEgc3RyaW5nXG4gICAgICAvLyBidXQgdXNlcnMgY2FuIHBhc3MgaW4gYSBIVE1MTWVkaWFFbGVtZW50IHRvIFdhdmVTdXJmZXJcblxuXG4gICAgICBpZiAodGhpcy5wYXJhbXMuYmFja2VuZCA9PT0gJ1dlYkF1ZGlvJyAmJiB1cmwgaW5zdGFuY2VvZiBIVE1MTWVkaWFFbGVtZW50KSB7XG4gICAgICAgIHVybCA9IHVybC5zcmM7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodGhpcy5wYXJhbXMuYmFja2VuZCkge1xuICAgICAgICBjYXNlICdXZWJBdWRpbyc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJ1ZmZlcih1cmwsIHBlYWtzLCBkdXJhdGlvbik7XG5cbiAgICAgICAgY2FzZSAnTWVkaWFFbGVtZW50JzpcbiAgICAgICAgY2FzZSAnTWVkaWFFbGVtZW50V2ViQXVkaW8nOlxuICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRNZWRpYUVsZW1lbnQodXJsLCBwZWFrcywgcHJlbG9hZCwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyBhdWRpbyB1c2luZyBXZWIgQXVkaW8gYnVmZmVyIGJhY2tlbmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBlbWl0cyBXYXZlU3VyZmVyI3dhdmVmb3JtLXJlYWR5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgb2YgYXVkaW8gZmlsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyW118TnVtYmVyLjxBcnJheVtdPn0gcGVha3MgUGVha3MgZGF0YVxuICAgICAqIEBwYXJhbSB7P251bWJlcn0gZHVyYXRpb24gT3B0aW9uYWwgZHVyYXRpb24gb2YgYXVkaW8gZmlsZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZEJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkQnVmZmVyKHVybCwgcGVha3MsIGR1cmF0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgIF90aGlzMTEudG1wRXZlbnRzLnB1c2goX3RoaXMxMS5vbmNlKCdyZWFkeScsIGFjdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzMTEuZ2V0QXJyYXlCdWZmZXIodXJsLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczExLmxvYWRBcnJheUJ1ZmZlcihkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAocGVha3MpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLnNldFBlYWtzKHBlYWtzLCBkdXJhdGlvbik7XG4gICAgICAgIHRoaXMuZHJhd0J1ZmZlcigpO1xuICAgICAgICB0aGlzLmZpcmVFdmVudCgnd2F2ZWZvcm0tcmVhZHknKTtcbiAgICAgICAgdGhpcy50bXBFdmVudHMucHVzaCh0aGlzLm9uY2UoJ2ludGVyYWN0aW9uJywgbG9hZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRWl0aGVyIGNyZWF0ZSBhIG1lZGlhIGVsZW1lbnQsIG9yIGxvYWQgYW4gZXhpc3RpbmcgbWVkaWEgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjd2F2ZWZvcm0tcmVhZHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xIVE1MTWVkaWFFbGVtZW50fSB1cmxPckVsdCBFaXRoZXIgYSBwYXRoIHRvIGEgbWVkaWEgZmlsZSwgb3IgYW5cbiAgICAgKiBleGlzdGluZyBIVE1MNSBBdWRpby9WaWRlbyBFbGVtZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBBcnJheSBvZiBwZWFrcy4gUmVxdWlyZWQgdG8gYnlwYXNzIHdlYiBhdWRpb1xuICAgICAqIGRlcGVuZGVuY3lcbiAgICAgKiBAcGFyYW0gez9ib29sZWFufSBwcmVsb2FkIFNldCB0byB0cnVlIGlmIHRoZSBwcmVsb2FkIGF0dHJpYnV0ZSBvZiB0aGVcbiAgICAgKiBhdWRpbyBlbGVtZW50IHNob3VsZCBiZSBlbmFibGVkXG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBkdXJhdGlvbiBPcHRpb25hbCBkdXJhdGlvbiBvZiBhdWRpbyBmaWxlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsb2FkTWVkaWFFbGVtZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRNZWRpYUVsZW1lbnQodXJsT3JFbHQsIHBlYWtzLCBwcmVsb2FkLCBkdXJhdGlvbikge1xuICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXG4gICAgICB2YXIgdXJsID0gdXJsT3JFbHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgdXJsT3JFbHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZC5sb2FkKHVybCwgdGhpcy5tZWRpYUNvbnRhaW5lciwgcGVha3MsIHByZWxvYWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVsdCA9IHVybE9yRWx0O1xuICAgICAgICB0aGlzLmJhY2tlbmQubG9hZEVsdChlbHQsIHBlYWtzKTsgLy8gSWYgcGVha3MgYXJlIG5vdCBwcm92aWRlZCxcbiAgICAgICAgLy8gdXJsID0gZWxlbWVudC5zcmMgc28gd2UgY2FuIGdldCBwZWFrcyB3aXRoIHdlYiBhdWRpb1xuXG4gICAgICAgIHVybCA9IGVsdC5zcmM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG1wRXZlbnRzLnB1c2godGhpcy5iYWNrZW5kLm9uY2UoJ2NhbnBsYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGlnbm9yZSB3aGVuIGJhY2tlbmQgd2FzIGFscmVhZHkgZGVzdHJveWVkXG4gICAgICAgIGlmICghX3RoaXMxMi5iYWNrZW5kLmRlc3Ryb3llZCkge1xuICAgICAgICAgIF90aGlzMTIuZHJhd0J1ZmZlcigpO1xuXG4gICAgICAgICAgX3RoaXMxMi5pc1JlYWR5ID0gdHJ1ZTtcblxuICAgICAgICAgIF90aGlzMTIuZmlyZUV2ZW50KCdyZWFkeScpO1xuICAgICAgICB9XG4gICAgICB9KSwgdGhpcy5iYWNrZW5kLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gX3RoaXMxMi5maXJlRXZlbnQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIH0pKTsgLy8gSWYgcGVha3MgYXJlIHByb3ZpZGVkLCByZW5kZXIgdGhlbSBhbmQgZmlyZSB0aGUgYHdhdmVmb3JtLXJlYWR5YCBldmVudC5cblxuICAgICAgaWYgKHBlYWtzKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZC5zZXRQZWFrcyhwZWFrcywgZHVyYXRpb24pO1xuICAgICAgICB0aGlzLmRyYXdCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3dhdmVmb3JtLXJlYWR5Jyk7XG4gICAgICB9IC8vIElmIG5vIHByZS1kZWNvZGVkIHBlYWtzIGFyZSBwcm92aWRlZCwgb3IgYXJlIHByb3ZpZGVkIHdpdGhcbiAgICAgIC8vIGZvcmNlRGVjb2RlIGZsYWcsIGF0dGVtcHQgdG8gZG93bmxvYWQgdGhlIGF1ZGlvIGZpbGUgYW5kIGRlY29kZSBpdFxuICAgICAgLy8gd2l0aCBXZWIgQXVkaW8uXG5cblxuICAgICAgaWYgKCghcGVha3MgfHwgdGhpcy5wYXJhbXMuZm9yY2VEZWNvZGUpICYmIHRoaXMuYmFja2VuZC5zdXBwb3J0c1dlYkF1ZGlvKCkpIHtcbiAgICAgICAgdGhpcy5nZXRBcnJheUJ1ZmZlcih1cmwsIGZ1bmN0aW9uIChhcnJheWJ1ZmZlcikge1xuICAgICAgICAgIF90aGlzMTIuZGVjb2RlQXJyYXlCdWZmZXIoYXJyYXlidWZmZXIsIGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIF90aGlzMTIuYmFja2VuZC5idWZmZXIgPSBidWZmZXI7XG5cbiAgICAgICAgICAgIF90aGlzMTIuYmFja2VuZC5zZXRQZWFrcyhudWxsKTtcblxuICAgICAgICAgICAgX3RoaXMxMi5kcmF3QnVmZmVyKCk7XG5cbiAgICAgICAgICAgIF90aGlzMTIuZmlyZUV2ZW50KCd3YXZlZm9ybS1yZWFkeScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGFuIGFycmF5IGJ1ZmZlciBhbmQgcGFzcyBkYXRhIHRvIGEgY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFycmF5YnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gZGVjb2RlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgb24gY29tcGxldGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlY29kZUFycmF5QnVmZmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZUFycmF5QnVmZmVyKGFycmF5YnVmZmVyLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMTMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmFycmF5YnVmZmVyID0gYXJyYXlidWZmZXI7XG4gICAgICB0aGlzLmJhY2tlbmQuZGVjb2RlQXJyYXlCdWZmZXIoYXJyYXlidWZmZXIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIC8vIE9ubHkgdXNlIHRoZSBkZWNvZGVkIGRhdGEgaWYgd2UgaGF2ZW4ndCBiZWVuIGRlc3Ryb3llZCBvclxuICAgICAgICAvLyBhbm90aGVyIGRlY29kZSBzdGFydGVkIGluIHRoZSBtZWFudGltZVxuICAgICAgICBpZiAoIV90aGlzMTMuaXNEZXN0cm95ZWQgJiYgX3RoaXMxMy5hcnJheWJ1ZmZlciA9PSBhcnJheWJ1ZmZlcikge1xuICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgIF90aGlzMTMuYXJyYXlidWZmZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczEzLmZpcmVFdmVudCgnZXJyb3InLCAnRXJyb3IgZGVjb2RpbmcgYXVkaW9idWZmZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkIGFuIGFycmF5IGJ1ZmZlciB1c2luZyBmZXRjaCBhbmQgcGFzcyB0aGUgcmVzdWx0IHRvIGEgY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBvZiB0aGUgZmlsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY2FsbCBvbiBjb21wbGV0ZVxuICAgICAqIEByZXR1cm5zIHt1dGlsLmZldGNoRmlsZX0gZmV0Y2ggY2FsbFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBcnJheUJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcih1cmwsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcidcbiAgICAgIH0sIHRoaXMucGFyYW1zLnhocik7XG4gICAgICB2YXIgcmVxdWVzdCA9IHV0aWwuZmV0Y2hGaWxlKG9wdGlvbnMpO1xuICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICB0aGlzLnRtcEV2ZW50cy5wdXNoKHJlcXVlc3Qub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgX3RoaXMxNC5vblByb2dyZXNzKGUpO1xuICAgICAgfSksIHJlcXVlc3Qub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgX3RoaXMxNC5jdXJyZW50UmVxdWVzdCA9IG51bGw7XG4gICAgICB9KSwgcmVxdWVzdC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpczE0LmZpcmVFdmVudCgnZXJyb3InLCBlKTtcblxuICAgICAgICBfdGhpczE0LmN1cnJlbnRSZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hpbGUgdGhlIGF1ZGlvIGZpbGUgaXMgbG9hZGluZ1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFByb2dyZXNzIGV2ZW50XG4gICAgICogQGVtaXRzIFdhdmVTdXJmZXIjbG9hZGluZ1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25Qcm9ncmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2dyZXNzKGUpIHtcbiAgICAgIHZhciBwZXJjZW50Q29tcGxldGU7XG5cbiAgICAgIGlmIChlLmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgcGVyY2VudENvbXBsZXRlID0gZS5sb2FkZWQgLyBlLnRvdGFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXBwcm94aW1hdGUgcHJvZ3Jlc3Mgd2l0aCBhbiBhc3ltcHRvdGljXG4gICAgICAgIC8vIGZ1bmN0aW9uLCBhbmQgYXNzdW1lIGRvd25sb2FkcyBpbiB0aGUgMS0zIE1CIHJhbmdlLlxuICAgICAgICBwZXJjZW50Q29tcGxldGUgPSBlLmxvYWRlZCAvIChlLmxvYWRlZCArIDEwMDAwMDApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZpcmVFdmVudCgnbG9hZGluZycsIE1hdGgucm91bmQocGVyY2VudENvbXBsZXRlICogMTAwKSwgZS50YXJnZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBvcnRzIFBDTSBkYXRhIGludG8gYSBKU09OIGFycmF5IGFuZCBvcGVucyBpbiBhIG5ldyB3aW5kb3cuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoPTEwMjQgVGhlIHNjYWxlIGluIHdoaWNoIHRvIGV4cG9ydCB0aGUgcGVha3NcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWNjdXJhY3k9MTAwMDBcbiAgICAgKiBAcGFyYW0gez9ib29sZWFufSBub1dpbmRvdyBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIG9wZW5pbmcgYSBuZXdcbiAgICAgKiB3aW5kb3cgd2l0aCB0aGUgSlNPTlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTdGFydCBpbmRleFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIGluZGV4XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYXJyYXkgb2YgcGVha3NcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImV4cG9ydFBDTVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHBvcnRQQ00obGVuZ3RoLCBhY2N1cmFjeSwgbm9XaW5kb3csIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8fCAxMDI0O1xuICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgYWNjdXJhY3kgPSBhY2N1cmFjeSB8fCAxMDAwMDtcbiAgICAgIG5vV2luZG93ID0gbm9XaW5kb3cgfHwgZmFsc2U7XG4gICAgICB2YXIgcGVha3MgPSB0aGlzLmJhY2tlbmQuZ2V0UGVha3MobGVuZ3RoLCBzdGFydCwgZW5kKTtcbiAgICAgIHZhciBhcnIgPSBbXS5tYXAuY2FsbChwZWFrcywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwgKiBhY2N1cmFjeSkgLyBhY2N1cmFjeTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeShhcnIpO1xuXG4gICAgICAgIGlmICghbm9XaW5kb3cpIHtcbiAgICAgICAgICB3aW5kb3cub3BlbignZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSUNvbXBvbmVudChqc29uKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKGpzb24pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhdmUgd2F2ZWZvcm0gaW1hZ2UgYXMgZGF0YSBVUkkuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBmb3JtYXQgaXMgYCdpbWFnZS9wbmcnYC4gT3RoZXIgc3VwcG9ydGVkIHR5cGVzIGFyZVxuICAgICAqIGAnaW1hZ2UvanBlZydgIGFuZCBgJ2ltYWdlL3dlYnAnYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQ9J2ltYWdlL3BuZycgQSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgaW1hZ2UgZm9ybWF0LlxuICAgICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB0eXBlIGlzIGAnaW1hZ2UvcG5nJ2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHk9MSBBIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEgaW5kaWNhdGluZyB0aGUgaW1hZ2VcbiAgICAgKiBxdWFsaXR5IHRvIHVzZSBmb3IgaW1hZ2UgZm9ybWF0cyB0aGF0IHVzZSBsb3NzeSBjb21wcmVzc2lvbiBzdWNoIGFzXG4gICAgICogYCdpbWFnZS9qcGVnJ2BgIGFuZCBgJ2ltYWdlL3dlYnAnYC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBJbWFnZSBkYXRhIHR5cGUgdG8gcmV0dXJuLiBFaXRoZXIgJ2RhdGFVUkwnIChkZWZhdWx0KVxuICAgICAqIG9yICdibG9iJy5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8c3RyaW5nW118UHJvbWlzZX0gV2hlbiB1c2luZyBgJ2RhdGFVUkwnYCB0eXBlIHRoaXMgcmV0dXJuc1xuICAgICAqIGEgc2luZ2xlIGRhdGEgVVJMIG9yIGFuIGFycmF5IG9mIGRhdGEgVVJMcywgb25lIGZvciBlYWNoIGNhbnZhcy4gV2hlbiB1c2luZ1xuICAgICAqIGAnYmxvYidgIHR5cGUgdGhpcyByZXR1cm5zIGEgYFByb21pc2VgIHJlc29sdmluZyB3aXRoIGFuIGFycmF5IG9mIGBCbG9iYFxuICAgICAqIGluc3RhbmNlcywgb25lIGZvciBlYWNoIGNhbnZhcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImV4cG9ydEltYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4cG9ydEltYWdlKGZvcm1hdCwgcXVhbGl0eSwgdHlwZSkge1xuICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgZm9ybWF0ID0gJ2ltYWdlL3BuZyc7XG4gICAgICB9XG5cbiAgICAgIGlmICghcXVhbGl0eSkge1xuICAgICAgICBxdWFsaXR5ID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHR5cGUgPSAnZGF0YVVSTCc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmRyYXdlci5nZXRJbWFnZShmb3JtYXQsIHF1YWxpdHksIHR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgYW55IGZldGNoIHJlcXVlc3QgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjYW5jZWxBamF4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFqYXgoKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UmVxdWVzdCAmJiB0aGlzLmN1cnJlbnRSZXF1ZXN0LmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgcmVxdWVzdCBoYXMgYSBQcm9ncmVzc0hhbmRsZXIsIHRoZW4gaXRzIFJlYWRhYmxlU3RyZWFtIG1pZ2h0IG5lZWQgdG8gYmUgY2FuY2VsbGVkIHRvb1xuICAgICAgICAvLyBTZWU6IFdhdmVzdXJmZXIgaXNzdWUgIzIwNDJcbiAgICAgICAgLy8gU2VlIEZpcmVmb3ggYnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTgzODE1XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRSZXF1ZXN0Ll9yZWFkZXIpIHtcbiAgICAgICAgICAvLyBJZ25vcmluZyBleGNlcHRpb25zIHRocm93biBieSBjYWxsIHRvIGNhbmNlbCgpXG4gICAgICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdC5fcmVhZGVyLmNhbmNlbCgpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFJlcXVlc3QuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRSZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyVG1wRXZlbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyVG1wRXZlbnRzKCkge1xuICAgICAgdGhpcy50bXBFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS51bigpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgZW1wdHkgd2F2ZWZvcm0uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJlbXB0eVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgIGlmICghdGhpcy5iYWNrZW5kLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuYmFja2VuZC5kaXNjb25uZWN0U291cmNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5jYW5jZWxBamF4KCk7XG4gICAgICB0aGlzLmNsZWFyVG1wRXZlbnRzKCk7IC8vIGVtcHR5IGRyYXdlclxuXG4gICAgICB0aGlzLmRyYXdlci5wcm9ncmVzcygwKTtcbiAgICAgIHRoaXMuZHJhd2VyLnNldFdpZHRoKDApO1xuICAgICAgdGhpcy5kcmF3ZXIuZHJhd1BlYWtzKHtcbiAgICAgICAgbGVuZ3RoOiB0aGlzLmRyYXdlci5nZXRXaWR0aCgpXG4gICAgICB9LCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGV2ZW50cywgZWxlbWVudHMgYW5kIGRpc2Nvbm5lY3QgV2ViQXVkaW8gbm9kZXMuXG4gICAgICpcbiAgICAgKiBAZW1pdHMgV2F2ZVN1cmZlciNkZXN0cm95XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lBbGxQbHVnaW5zKCk7XG4gICAgICB0aGlzLmZpcmVFdmVudCgnZGVzdHJveScpO1xuICAgICAgdGhpcy5jYW5jZWxBamF4KCk7XG4gICAgICB0aGlzLmNsZWFyVG1wRXZlbnRzKCk7XG4gICAgICB0aGlzLnVuQWxsKCk7XG5cbiAgICAgIGlmICh0aGlzLnBhcmFtcy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fb25SZXNpemUsIHRydWUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLl9vblJlc2l6ZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmJhY2tlbmQpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLmRlc3Ryb3koKTsgLy8gY2xlYXJzIG1lbW9yeSB1c2FnZVxuXG4gICAgICAgIHRoaXMuYmFja2VuZCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRyYXdlcikge1xuICAgICAgICB0aGlzLmRyYXdlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICB0aGlzLmFycmF5YnVmZmVyID0gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2F2ZVN1cmZlcjtcbn0odXRpbC5PYnNlcnZlcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFdhdmVTdXJmZXI7XG5XYXZlU3VyZmVyLlZFUlNJT04gPSBcIjQuNS4wXCI7XG5XYXZlU3VyZmVyLnV0aWwgPSB1dGlsO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3dlYmF1ZGlvLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3dlYmF1ZGlvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gIHZhbHVlOiB0cnVlXG59KSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciB1dGlsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsICovIFwiLi9zcmMvdXRpbC9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbi8vIHVzaW5nIGNvbnN0YW50cyB0byBwcmV2ZW50IHNvbWVvbmUgd3JpdGluZyB0aGUgc3RyaW5nIHdyb25nXG52YXIgUExBWUlORyA9ICdwbGF5aW5nJztcbnZhciBQQVVTRUQgPSAncGF1c2VkJztcbnZhciBGSU5JU0hFRCA9ICdmaW5pc2hlZCc7XG4vKipcbiAqIFdlYkF1ZGlvIGJhY2tlbmRcbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2ZXJ9XG4gKi9cblxudmFyIFdlYkF1ZGlvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfdXRpbCRPYnNlcnZlcikge1xuICBfaW5oZXJpdHMoV2ViQXVkaW8sIF91dGlsJE9ic2VydmVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdlYkF1ZGlvKTtcblxuICBfY3JlYXRlQ2xhc3MoV2ViQXVkaW8sIFt7XG4gICAga2V5OiBcInN1cHBvcnRzV2ViQXVkaW9cIixcblxuICAgIC8qKiBzY3JpcHRCdWZmZXJTaXplOiBzaXplIG9mIHRoZSBwcm9jZXNzaW5nIGJ1ZmZlciAqL1xuXG4gICAgLyoqIGF1ZGlvQ29udGV4dDogYWxsb3dzIHRvIHByb2Nlc3MgYXVkaW8gd2l0aCBXZWJBdWRpbyBBUEkgKi9cblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICAvKipcbiAgICAgKiBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgdGhpcyBiYWNrZW5kXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyBiYWNrZW5kXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1cHBvcnRzV2ViQXVkaW8oKSB7XG4gICAgICByZXR1cm4gISEod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhdWRpbyBjb250ZXh0IHVzZWQgYnkgdGhpcyBiYWNrZW5kIG9yIGNyZWF0ZSBvbmVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0F1ZGlvQ29udGV4dH0gRXhpc3RpbmcgYXVkaW8gY29udGV4dCwgb3IgY3JlYXRlcyBhIG5ldyBvbmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEF1ZGlvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdWRpb0NvbnRleHQoKSB7XG4gICAgICBpZiAoIXdpbmRvdy5XYXZlU3VyZmVyQXVkaW9Db250ZXh0KSB7XG4gICAgICAgIHdpbmRvdy5XYXZlU3VyZmVyQXVkaW9Db250ZXh0ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kb3cuV2F2ZVN1cmZlckF1ZGlvQ29udGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvZmZsaW5lIGF1ZGlvIGNvbnRleHQgdXNlZCBieSB0aGlzIGJhY2tlbmQgb3IgY3JlYXRlIG9uZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZVJhdGUgVGhlIHNhbXBsZSByYXRlIHRvIHVzZVxuICAgICAqIEByZXR1cm4ge09mZmxpbmVBdWRpb0NvbnRleHR9IEV4aXN0aW5nIG9mZmxpbmUgYXVkaW8gY29udGV4dCwgb3IgY3JlYXRlc1xuICAgICAqIGEgbmV3IG9uZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0T2ZmbGluZUF1ZGlvQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPZmZsaW5lQXVkaW9Db250ZXh0KHNhbXBsZVJhdGUpIHtcbiAgICAgIGlmICghd2luZG93LldhdmVTdXJmZXJPZmZsaW5lQXVkaW9Db250ZXh0KSB7XG4gICAgICAgIHdpbmRvdy5XYXZlU3VyZmVyT2ZmbGluZUF1ZGlvQ29udGV4dCA9IG5ldyAod2luZG93Lk9mZmxpbmVBdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdE9mZmxpbmVBdWRpb0NvbnRleHQpKDEsIDIsIHNhbXBsZVJhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2luZG93LldhdmVTdXJmZXJPZmZsaW5lQXVkaW9Db250ZXh0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgdGhlIGJhY2tlbmRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2F2ZXN1cmZlclBhcmFtc30gcGFyYW1zIFdhdmVzdXJmZXIgcGFyYW1ldGVyc1xuICAgICAqL1xuXG4gIH1dKTtcblxuICBmdW5jdGlvbiBXZWJBdWRpbyhwYXJhbXMpIHtcbiAgICB2YXIgX3RoaXMkc3RhdGVCZWhhdmlvcnMsIF90aGlzJHN0YXRlcztcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJBdWRpbyk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMuYXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICBfdGhpcy5vZmZsaW5lQXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICBfdGhpcy5zdGF0ZUJlaGF2aW9ycyA9IChfdGhpcyRzdGF0ZUJlaGF2aW9ycyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3RoaXMkc3RhdGVCZWhhdmlvcnMsIFBMQVlJTkcsIHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMuYWRkT25BdWRpb1Byb2Nlc3MoKTtcbiAgICAgIH0sXG4gICAgICBnZXRQbGF5ZWRQZXJjZW50czogZnVuY3Rpb24gZ2V0UGxheWVkUGVyY2VudHMoKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRpbWUoKSAvIGR1cmF0aW9uIHx8IDA7XG4gICAgICB9LFxuICAgICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFBvc2l0aW9uICsgdGhpcy5nZXRQbGF5ZWRUaW1lKCk7XG4gICAgICB9XG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfdGhpcyRzdGF0ZUJlaGF2aW9ycywgUEFVU0VELCB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB0aGlzLnJlbW92ZU9uQXVkaW9Qcm9jZXNzKCk7XG4gICAgICB9LFxuICAgICAgZ2V0UGxheWVkUGVyY2VudHM6IGZ1bmN0aW9uIGdldFBsYXllZFBlcmNlbnRzKCkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRUaW1lKCkgLyBkdXJhdGlvbiB8fCAwO1xuICAgICAgfSxcbiAgICAgIGdldEN1cnJlbnRUaW1lOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRQb3NpdGlvbjtcbiAgICAgIH1cbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF90aGlzJHN0YXRlQmVoYXZpb3JzLCBGSU5JU0hFRCwge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVPbkF1ZGlvUHJvY2VzcygpO1xuICAgICAgICB0aGlzLmZpcmVFdmVudCgnZmluaXNoJyk7XG4gICAgICB9LFxuICAgICAgZ2V0UGxheWVkUGVyY2VudHM6IGZ1bmN0aW9uIGdldFBsYXllZFBlcmNlbnRzKCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0sXG4gICAgICBnZXRDdXJyZW50VGltZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICB9XG4gICAgfSksIF90aGlzJHN0YXRlQmVoYXZpb3JzKTtcbiAgICBfdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgLyoqIGFjOiBBdWRpbyBDb250ZXh0IGluc3RhbmNlICovXG5cbiAgICBfdGhpcy5hYyA9IHBhcmFtcy5hdWRpb0NvbnRleHQgfHwgKF90aGlzLnN1cHBvcnRzV2ViQXVkaW8oKSA/IF90aGlzLmdldEF1ZGlvQ29udGV4dCgpIDoge30pO1xuICAgIC8qKkBwcml2YXRlICovXG5cbiAgICBfdGhpcy5sYXN0UGxheSA9IF90aGlzLmFjLmN1cnJlbnRUaW1lO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMuc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5zY2hlZHVsZWRQYXVzZSA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5zdGF0ZXMgPSAoX3RoaXMkc3RhdGVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfdGhpcyRzdGF0ZXMsIFBMQVlJTkcsIE9iamVjdC5jcmVhdGUoX3RoaXMuc3RhdGVCZWhhdmlvcnNbUExBWUlOR10pKSwgX2RlZmluZVByb3BlcnR5KF90aGlzJHN0YXRlcywgUEFVU0VELCBPYmplY3QuY3JlYXRlKF90aGlzLnN0YXRlQmVoYXZpb3JzW1BBVVNFRF0pKSwgX2RlZmluZVByb3BlcnR5KF90aGlzJHN0YXRlcywgRklOSVNIRUQsIE9iamVjdC5jcmVhdGUoX3RoaXMuc3RhdGVCZWhhdmlvcnNbRklOSVNIRURdKSksIF90aGlzJHN0YXRlcyk7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5idWZmZXIgPSBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMuZmlsdGVycyA9IFtdO1xuICAgIC8qKiBnYWluTm9kZTogYWxsb3dzIHRvIGNvbnRyb2wgYXVkaW8gdm9sdW1lICovXG5cbiAgICBfdGhpcy5nYWluTm9kZSA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5tZXJnZWRQZWFrcyA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5vZmZsaW5lQWMgPSBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMucGVha3MgPSBudWxsO1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gICAgX3RoaXMucGxheWJhY2tSYXRlID0gMTtcbiAgICAvKiogYW5hbHlzZXI6IHByb3ZpZGVzIGF1ZGlvIGFuYWx5c2lzIGluZm9ybWF0aW9uICovXG5cbiAgICBfdGhpcy5hbmFseXNlciA9IG51bGw7XG4gICAgLyoqIHNjcmlwdE5vZGU6IGFsbG93cyBwcm9jZXNzaW5nIGF1ZGlvICovXG5cbiAgICBfdGhpcy5zY3JpcHROb2RlID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5zcGxpdFBlYWtzID0gW107XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgICBfdGhpcy5leHBsaWNpdER1cmF0aW9uID0gcGFyYW1zLmR1cmF0aW9uO1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgYmFja2VuZCB3YXMgZGVzdHJveWVkLlxuICAgICAqL1xuXG4gICAgX3RoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHRoZSBiYWNrZW5kLCBjYWxsZWQgaW4gYHdhdmVzdXJmZXIuY3JlYXRlQmFja2VuZCgpYFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhXZWJBdWRpbywgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5jcmVhdGVWb2x1bWVOb2RlKCk7XG4gICAgICB0aGlzLmNyZWF0ZVNjcmlwdE5vZGUoKTtcbiAgICAgIHRoaXMuY3JlYXRlQW5hbHlzZXJOb2RlKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKFBBVVNFRCk7XG4gICAgICB0aGlzLnNldFBsYXliYWNrUmF0ZSh0aGlzLnBhcmFtcy5hdWRpb1JhdGUpO1xuICAgICAgdGhpcy5zZXRMZW5ndGgoMCk7XG4gICAgfVxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdEZpbHRlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdEZpbHRlcnMoKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICBmaWx0ZXIgJiYgZmlsdGVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZmlsdGVycyA9IG51bGw7IC8vIFJlY29ubmVjdCBkaXJlY3QgcGF0aFxuXG4gICAgICAgIHRoaXMuYW5hbHlzZXIuY29ubmVjdCh0aGlzLmdhaW5Ob2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZSBUaGUgbmV3IHN0YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzW3N0YXRlXSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGF0ZXNbc3RhdGVdO1xuICAgICAgICB0aGlzLnN0YXRlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVW5wYWNrZWQgYHNldEZpbHRlcnMoKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uQXVkaW9Ob2RlfSBmaWx0ZXJzIE9uZSBvciBtb3JlIGZpbHRlcnMgdG8gc2V0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRGaWx0ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsdGVyKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZpbHRlcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGZpbHRlcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0RmlsdGVycyhmaWx0ZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGN1c3RvbSBXZWIgQXVkaW8gbm9kZXMgaW50byB0aGUgZ3JhcGhcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXVkaW9Ob2RlW119IGZpbHRlcnMgUGFja2VkIGZpbHRlcnMgYXJyYXlcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGxvd3Bhc3MgPSB3YXZlc3VyZmVyLmJhY2tlbmQuYWMuY3JlYXRlQmlxdWFkRmlsdGVyKCk7XG4gICAgICogd2F2ZXN1cmZlci5iYWNrZW5kLnNldEZpbHRlcihsb3dwYXNzKTtcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldEZpbHRlcnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsdGVycyhmaWx0ZXJzKSB7XG4gICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgZmlsdGVyc1xuICAgICAgdGhpcy5kaXNjb25uZWN0RmlsdGVycygpOyAvLyBJbnNlcnQgZmlsdGVycyBpZiBmaWx0ZXIgYXJyYXkgbm90IGVtcHR5XG5cbiAgICAgIGlmIChmaWx0ZXJzICYmIGZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7IC8vIERpc2Nvbm5lY3QgZGlyZWN0IHBhdGggYmVmb3JlIGluc2VydGluZyBmaWx0ZXJzXG5cbiAgICAgICAgdGhpcy5hbmFseXNlci5kaXNjb25uZWN0KCk7IC8vIENvbm5lY3QgZWFjaCBmaWx0ZXIgaW4gdHVyblxuXG4gICAgICAgIGZpbHRlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyKSB7XG4gICAgICAgICAgcHJldi5jb25uZWN0KGN1cnIpO1xuICAgICAgICAgIHJldHVybiBjdXJyO1xuICAgICAgICB9LCB0aGlzLmFuYWx5c2VyKS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiogQ3JlYXRlIFNjcmlwdFByb2Nlc3Nvck5vZGUgdG8gcHJvY2VzcyBhdWRpbyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlU2NyaXB0Tm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTY3JpcHROb2RlKCkge1xuICAgICAgaWYgKHRoaXMucGFyYW1zLmF1ZGlvU2NyaXB0UHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuc2NyaXB0Tm9kZSA9IHRoaXMucGFyYW1zLmF1ZGlvU2NyaXB0UHJvY2Vzc29yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuYWMuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKSB7XG4gICAgICAgICAgdGhpcy5zY3JpcHROb2RlID0gdGhpcy5hYy5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoV2ViQXVkaW8uc2NyaXB0QnVmZmVyU2l6ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zY3JpcHROb2RlID0gdGhpcy5hYy5jcmVhdGVKYXZhU2NyaXB0Tm9kZShXZWJBdWRpby5zY3JpcHRCdWZmZXJTaXplKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcmlwdE5vZGUuY29ubmVjdCh0aGlzLmFjLmRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRPbkF1ZGlvUHJvY2Vzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRPbkF1ZGlvUHJvY2VzcygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLnNjcmlwdE5vZGUub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lID0gX3RoaXMyLmdldEN1cnJlbnRUaW1lKCk7XG5cbiAgICAgICAgaWYgKHRpbWUgPj0gX3RoaXMyLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoRklOSVNIRUQpO1xuXG4gICAgICAgICAgX3RoaXMyLmZpcmVFdmVudCgncGF1c2UnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aW1lID49IF90aGlzMi5zY2hlZHVsZWRQYXVzZSkge1xuICAgICAgICAgIF90aGlzMi5wYXVzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5zdGF0ZSA9PT0gX3RoaXMyLnN0YXRlc1tQTEFZSU5HXSkge1xuICAgICAgICAgIF90aGlzMi5maXJlRXZlbnQoJ2F1ZGlvcHJvY2VzcycsIHRpbWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICAvKiogQHByaXZhdGUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZU9uQXVkaW9Qcm9jZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU9uQXVkaW9Qcm9jZXNzKCkge1xuICAgICAgdGhpcy5zY3JpcHROb2RlLm9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24gKCkge307XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYW5hbHlzZXIgbm9kZSB0byBwZXJmb3JtIGF1ZGlvIGFuYWx5c2lzICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVBbmFseXNlck5vZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQW5hbHlzZXJOb2RlKCkge1xuICAgICAgdGhpcy5hbmFseXNlciA9IHRoaXMuYWMuY3JlYXRlQW5hbHlzZXIoKTtcbiAgICAgIHRoaXMuYW5hbHlzZXIuY29ubmVjdCh0aGlzLmdhaW5Ob2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBnYWluIG5vZGUgbmVlZGVkIHRvIGNvbnRyb2wgdGhlIHBsYXliYWNrIHZvbHVtZS5cbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlVm9sdW1lTm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVWb2x1bWVOb2RlKCkge1xuICAgICAgLy8gQ3JlYXRlIGdhaW4gbm9kZSB1c2luZyB0aGUgQXVkaW9Db250ZXh0XG4gICAgICBpZiAodGhpcy5hYy5jcmVhdGVHYWluKSB7XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmFjLmNyZWF0ZUdhaW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmFjLmNyZWF0ZUdhaW5Ob2RlKCk7XG4gICAgICB9IC8vIEFkZCB0aGUgZ2FpbiBub2RlIHRvIHRoZSBncmFwaFxuXG5cbiAgICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmFjLmRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaW5rIGlkIGZvciB0aGUgbWVkaWEgcGxheWVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGV2aWNlSWQgU3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyBhdWRpbyBkZXZpY2UgaWQuXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGB1bmRlZmluZWRgIHdoZW4gdGhlcmVcbiAgICAgKiBhcmUgbm8gZXJyb3JzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2lua0lkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNpbmtJZChkZXZpY2VJZCkge1xuICAgICAgaWYgKGRldmljZUlkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgd2ViYXVkaW8gQVBJIGRvZXNuJ3QgY3VycmVudGx5IHN1cHBvcnQgc2V0dGluZyB0aGUgZGV2aWNlXG4gICAgICAgICAqIG91dHB1dC4gSGVyZSB3ZSBjcmVhdGUgYW4gSFRNTEF1ZGlvRWxlbWVudCwgY29ubmVjdCB0aGVcbiAgICAgICAgICogd2ViYXVkaW8gc3RyZWFtIHRvIHRoYXQgZWxlbWVudCBhbmQgc2V0U2lua0lkIHRoZXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGF1ZGlvID0gbmV3IHdpbmRvdy5BdWRpbygpO1xuXG4gICAgICAgIGlmICghYXVkaW8uc2V0U2lua0lkKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignc2V0U2lua0lkIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBicm93c2VyJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXVkaW8uYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICB2YXIgZGVzdCA9IHRoaXMuYWMuY3JlYXRlTWVkaWFTdHJlYW1EZXN0aW5hdGlvbigpO1xuICAgICAgICB0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KGRlc3QpO1xuICAgICAgICBhdWRpby5zcmNPYmplY3QgPSBkZXN0LnN0cmVhbTtcbiAgICAgICAgcmV0dXJuIGF1ZGlvLnNldFNpbmtJZChkZXZpY2VJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIGRldmljZUlkOiAnICsgZGV2aWNlSWQpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhdWRpbyB2b2x1bWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBBIGZsb2F0aW5nIHBvaW50IHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodmFsdWUpIHtcbiAgICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh2YWx1ZSwgdGhpcy5hYy5jdXJyZW50VGltZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB2b2x1bWVcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdmFsdWUgQSBmbG9hdGluZyBwb2ludCB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vm9sdW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGFuIGFycmF5IGJ1ZmZlciBhbmQgcGFzcyBkYXRhIHRvIGEgY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlidWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBkZWNvZGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY2FsbCBvbiBjb21wbGV0ZS5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBlcnJiYWNrIFRoZSBmdW5jdGlvbiB0byBjYWxsIG9uIGVycm9yLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVjb2RlQXJyYXlCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjb2RlQXJyYXlCdWZmZXIoYXJyYXlidWZmZXIsIGNhbGxiYWNrLCBlcnJiYWNrKSB7XG4gICAgICBpZiAoIXRoaXMub2ZmbGluZUFjKSB7XG4gICAgICAgIHRoaXMub2ZmbGluZUFjID0gdGhpcy5nZXRPZmZsaW5lQXVkaW9Db250ZXh0KHRoaXMuYWMgJiYgdGhpcy5hYy5zYW1wbGVSYXRlID8gdGhpcy5hYy5zYW1wbGVSYXRlIDogNDQxMDApO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ0F1ZGlvQ29udGV4dCcgaW4gd2luZG93KSB7XG4gICAgICAgIHRoaXMub2ZmbGluZUFjLmRlY29kZUF1ZGlvRGF0YShhcnJheWJ1ZmZlcikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIHJldHVybiBlcnJiYWNrKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2FmYXJpOiBubyBzdXBwb3J0IGZvciBQcm9taXNlLWJhc2VkIGRlY29kZUF1ZGlvRGF0YSB5ZXRcbiAgICAgICAgdGhpcy5vZmZsaW5lQWMuZGVjb2RlQXVkaW9EYXRhKGFycmF5YnVmZmVyLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfSwgZXJyYmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBwcmUtZGVjb2RlZCBwZWFrc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBwZWFrcyBQZWFrcyBkYXRhXG4gICAgICogQHBhcmFtIHs/bnVtYmVyfSBkdXJhdGlvbiBFeHBsaWNpdCBkdXJhdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UGVha3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGVha3MocGVha3MsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoZHVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmV4cGxpY2l0RHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wZWFrcyA9IHBlYWtzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHJlbmRlcmVkIGxlbmd0aCAoZGlmZmVyZW50IGZyb20gdGhlIGxlbmd0aCBvZiB0aGUgYXVkaW8pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSByZW5kZXJlZCBsZW5ndGhcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNldExlbmd0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMZW5ndGgobGVuZ3RoKSB7XG4gICAgICAvLyBObyByZXNpemUsIHdlIGNhbiBwcmVzZXJ2ZSB0aGUgY2FjaGVkIHBlYWtzLlxuICAgICAgaWYgKHRoaXMubWVyZ2VkUGVha3MgJiYgbGVuZ3RoID09IDIgKiB0aGlzLm1lcmdlZFBlYWtzLmxlbmd0aCAtIDEgKyAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zcGxpdFBlYWtzID0gW107XG4gICAgICB0aGlzLm1lcmdlZFBlYWtzID0gW107IC8vIFNldCB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBzcGFyc2UgYXJyYXkgc28gdGhlIHBlYWsgYXJyYXlzIGFyZVxuICAgICAgLy8gYXBwcm9wcmlhdGVseSBzaXplZCBmb3Igb3RoZXIgY2FsY3VsYXRpb25zLlxuXG4gICAgICB2YXIgY2hhbm5lbHMgPSB0aGlzLmJ1ZmZlciA/IHRoaXMuYnVmZmVyLm51bWJlck9mQ2hhbm5lbHMgOiAxO1xuICAgICAgdmFyIGM7XG5cbiAgICAgIGZvciAoYyA9IDA7IGMgPCBjaGFubmVsczsgYysrKSB7XG4gICAgICAgIHRoaXMuc3BsaXRQZWFrc1tjXSA9IFtdO1xuICAgICAgICB0aGlzLnNwbGl0UGVha3NbY11bMiAqIChsZW5ndGggLSAxKV0gPSAwO1xuICAgICAgICB0aGlzLnNwbGl0UGVha3NbY11bMiAqIChsZW5ndGggLSAxKSArIDFdID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tZXJnZWRQZWFrc1syICogKGxlbmd0aCAtIDEpXSA9IDA7XG4gICAgICB0aGlzLm1lcmdlZFBlYWtzWzIgKiAobGVuZ3RoIC0gMSkgKyAxXSA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG1heCBhbmQgbWluIHZhbHVlIG9mIHRoZSB3YXZlZm9ybSB3aGVuIGJyb2tlbiBpbnRvIDxsZW5ndGg+IHN1YnJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggSG93IG1hbnkgc3VicmFuZ2VzIHRvIGJyZWFrIHRoZSB3YXZlZm9ybSBpbnRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdCBGaXJzdCBzYW1wbGUgaW4gdGhlIHJlcXVpcmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0IExhc3Qgc2FtcGxlIGluIHRoZSByZXF1aXJlZCByYW5nZS5cbiAgICAgKiBAcmV0dXJuIHtudW1iZXJbXXxOdW1iZXIuPEFycmF5W10+fSBBcnJheSBvZiAyKjxsZW5ndGg+IHBlYWtzIG9yIGFycmF5IG9mIGFycmF5cyBvZlxuICAgICAqIHBlYWtzIGNvbnNpc3Rpbmcgb2YgKG1heCwgbWluKSB2YWx1ZXMgZm9yIGVhY2ggc3VicmFuZ2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRQZWFrc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQZWFrcyhsZW5ndGgsIGZpcnN0LCBsYXN0KSB7XG4gICAgICBpZiAodGhpcy5wZWFrcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wZWFrcztcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGZpcnN0ID0gZmlyc3QgfHwgMDtcbiAgICAgIGxhc3QgPSBsYXN0IHx8IGxlbmd0aCAtIDE7XG4gICAgICB0aGlzLnNldExlbmd0aChsZW5ndGgpO1xuXG4gICAgICBpZiAoIXRoaXMuYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5zcGxpdENoYW5uZWxzID8gdGhpcy5zcGxpdFBlYWtzIDogdGhpcy5tZXJnZWRQZWFrcztcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGZvbGxvd2luZyBzbmlwcGV0IGZpeGVzIGEgYnVmZmVyaW5nIGRhdGEgaXNzdWUgb24gdGhlIFNhZmFyaVxuICAgICAgICogYnJvd3NlciB3aGljaCByZXR1cm5lZCB1bmRlZmluZWQgSXQgY3JlYXRlcyB0aGUgbWlzc2luZyBidWZmZXIgYmFzZWRcbiAgICAgICAqIG9uIDEgY2hhbm5lbCwgNDA5NiBzYW1wbGVzIGFuZCB0aGUgc2FtcGxlUmF0ZSBmcm9tIHRoZSBjdXJyZW50XG4gICAgICAgKiB3ZWJhdWRpbyBjb250ZXh0IDQwOTYgc2FtcGxlcyBzZWVtZWQgdG8gYmUgdGhlIGJlc3QgZml0IGZvciByZW5kZXJpbmdcbiAgICAgICAqIHdpbGwgcmV2aWV3IHRoaXMgY29kZSBvbmNlIGEgc3RhYmxlIHZlcnNpb24gb2YgU2FmYXJpIFRQIGlzIG91dFxuICAgICAgICovXG5cblxuICAgICAgaWYgKCF0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5ld0J1ZmZlciA9IHRoaXMuY3JlYXRlQnVmZmVyKDEsIDQwOTYsIHRoaXMuc2FtcGxlUmF0ZSk7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3QnVmZmVyLmJ1ZmZlcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNhbXBsZVNpemUgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLyBsZW5ndGg7XG4gICAgICB2YXIgc2FtcGxlU3RlcCA9IH5+KHNhbXBsZVNpemUgLyAxMCkgfHwgMTtcbiAgICAgIHZhciBjaGFubmVscyA9IHRoaXMuYnVmZmVyLm51bWJlck9mQ2hhbm5lbHM7XG4gICAgICB2YXIgYztcblxuICAgICAgZm9yIChjID0gMDsgYyA8IGNoYW5uZWxzOyBjKyspIHtcbiAgICAgICAgdmFyIHBlYWtzID0gdGhpcy5zcGxpdFBlYWtzW2NdO1xuICAgICAgICB2YXIgY2hhbiA9IHRoaXMuYnVmZmVyLmdldENoYW5uZWxEYXRhKGMpO1xuICAgICAgICB2YXIgaSA9IHZvaWQgMDtcblxuICAgICAgICBmb3IgKGkgPSBmaXJzdDsgaSA8PSBsYXN0OyBpKyspIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSB+fihpICogc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgdmFyIGVuZCA9IH5+KHN0YXJ0ICsgc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogSW5pdGlhbGl6ZSB0aGUgbWF4IGFuZCBtaW4gdG8gdGhlIGZpcnN0IHNhbXBsZSBvZiB0aGlzXG4gICAgICAgICAgICogc3VicmFuZ2UsIHNvIHRoYXQgZXZlbiBpZiB0aGUgc2FtcGxlcyBhcmUgZW50aXJlbHlcbiAgICAgICAgICAgKiBvbiBvbmUgc2lkZSBvZiB6ZXJvLCB3ZSBzdGlsbCByZXR1cm4gdGhlIHRydWUgbWF4IGFuZFxuICAgICAgICAgICAqIG1pbiB2YWx1ZXMgaW4gdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAqL1xuXG4gICAgICAgICAgdmFyIG1pbiA9IGNoYW5bc3RhcnRdO1xuICAgICAgICAgIHZhciBtYXggPSBtaW47XG4gICAgICAgICAgdmFyIGogPSB2b2lkIDA7XG5cbiAgICAgICAgICBmb3IgKGogPSBzdGFydDsgaiA8IGVuZDsgaiArPSBzYW1wbGVTdGVwKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBjaGFuW2pdO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IG1pbikge1xuICAgICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwZWFrc1syICogaV0gPSBtYXg7XG4gICAgICAgICAgcGVha3NbMiAqIGkgKyAxXSA9IG1pbjtcblxuICAgICAgICAgIGlmIChjID09IDAgfHwgbWF4ID4gdGhpcy5tZXJnZWRQZWFrc1syICogaV0pIHtcbiAgICAgICAgICAgIHRoaXMubWVyZ2VkUGVha3NbMiAqIGldID0gbWF4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjID09IDAgfHwgbWluIDwgdGhpcy5tZXJnZWRQZWFrc1syICogaSArIDFdKSB7XG4gICAgICAgICAgICB0aGlzLm1lcmdlZFBlYWtzWzIgKiBpICsgMV0gPSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5zcGxpdENoYW5uZWxzID8gdGhpcy5zcGxpdFBlYWtzIDogdGhpcy5tZXJnZWRQZWFrcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwb3NpdGlvbiBmcm9tIDAgdG8gMVxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBQb3NpdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGxheWVkUGVyY2VudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGxheWVkUGVyY2VudHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5nZXRQbGF5ZWRQZXJjZW50cy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICAvKiogQHByaXZhdGUgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRpc2Nvbm5lY3RTb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdFNvdXJjZSgpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICB0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYWxsIHJlZmVyZW5jZXMgd2l0aCBXZWJBdWRpbywgZGlzY29ubmVjdGluZyBhdWRpbyBub2RlcyBhbmQgY2xvc2luZyBBdWRpbyBDb250ZXh0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95V2ViQXVkaW9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVdlYkF1ZGlvKCkge1xuICAgICAgdGhpcy5kaXNjb25uZWN0RmlsdGVycygpO1xuICAgICAgdGhpcy5kaXNjb25uZWN0U291cmNlKCk7XG4gICAgICB0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuc2NyaXB0Tm9kZS5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLmFuYWx5c2VyLmRpc2Nvbm5lY3QoKTsgLy8gY2xvc2UgdGhlIGF1ZGlvQ29udGV4dCBpZiBjbG9zZUF1ZGlvQ29udGV4dCBvcHRpb24gaXMgc2V0IHRvIHRydWVcblxuICAgICAgaWYgKHRoaXMucGFyYW1zLmNsb3NlQXVkaW9Db250ZXh0KSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGJyb3dzZXIgc3VwcG9ydHMgQXVkaW9Db250ZXh0LmNsb3NlKClcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFjLmNsb3NlID09PSAnZnVuY3Rpb24nICYmIHRoaXMuYWMuc3RhdGUgIT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICB0aGlzLmFjLmNsb3NlKCk7XG4gICAgICAgIH0gLy8gY2xlYXIgdGhlIHJlZmVyZW5jZSB0byB0aGUgYXVkaW9jb250ZXh0XG5cblxuICAgICAgICB0aGlzLmFjID0gbnVsbDsgLy8gY2xlYXIgdGhlIGFjdHVhbCBhdWRpb2NvbnRleHQsIGVpdGhlciBwYXNzZWQgYXMgcGFyYW0gb3IgdGhlXG4gICAgICAgIC8vIGdsb2JhbCBzaW5nbGV0b25cblxuICAgICAgICBpZiAoIXRoaXMucGFyYW1zLmF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgIHdpbmRvdy5XYXZlU3VyZmVyQXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhcmFtcy5hdWRpb0NvbnRleHQgPSBudWxsO1xuICAgICAgICB9IC8vIGNsZWFyIHRoZSBvZmZsaW5lQXVkaW9Db250ZXh0XG5cblxuICAgICAgICB3aW5kb3cuV2F2ZVN1cmZlck9mZmxpbmVBdWRpb0NvbnRleHQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdhdmVzdXJmZXIgaXMgZGVzdHJveWVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBpZiAoIXRoaXMuaXNQYXVzZWQoKSkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudW5BbGwoKTtcbiAgICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZGVzdHJveVdlYkF1ZGlvKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvYWRlZCBhIGRlY29kZWQgYXVkaW8gYnVmZmVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYnVmZmVyIERlY29kZWQgYXVkaW8gYnVmZmVyIHRvIGxvYWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZChidWZmZXIpIHtcbiAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICB0aGlzLmxhc3RQbGF5ID0gdGhpcy5hYy5jdXJyZW50VGltZTtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5jcmVhdGVTb3VyY2UoKTtcbiAgICB9XG4gICAgLyoqIEBwcml2YXRlICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjcmVhdGVTb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU291cmNlKCkge1xuICAgICAgdGhpcy5kaXNjb25uZWN0U291cmNlKCk7XG4gICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuYWMuY3JlYXRlQnVmZmVyU291cmNlKCk7IC8vIGFkanVzdCBmb3Igb2xkIGJyb3dzZXJzXG5cbiAgICAgIHRoaXMuc291cmNlLnN0YXJ0ID0gdGhpcy5zb3VyY2Uuc3RhcnQgfHwgdGhpcy5zb3VyY2Uubm90ZUdyYWluT247XG4gICAgICB0aGlzLnNvdXJjZS5zdG9wID0gdGhpcy5zb3VyY2Uuc3RvcCB8fCB0aGlzLnNvdXJjZS5ub3RlT2ZmO1xuICAgICAgdGhpcy5zZXRQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xuICAgICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICB0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuYW5hbHlzZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqXG4gICAgICogc29tZSBicm93c2VycyByZXF1aXJlIGFuIGV4cGxpY2l0IGNhbGwgdG8gI3Jlc3VtZSBiZWZvcmUgdGhleSB3aWxsIHBsYXkgYmFjayBhdWRpb1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVzdW1lQXVkaW9Db250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUF1ZGlvQ29udGV4dCgpIHtcbiAgICAgIGlmICh0aGlzLmFjLnN0YXRlID09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgIHRoaXMuYWMucmVzdW1lICYmIHRoaXMuYWMucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYHdhdmVzdXJmZXIuaXNQbGF5aW5nKClgIGFuZCBgd2F2ZXN1cmZlci5wbGF5UGF1c2UoKWBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoaXMgYmFja2VuZCBpcyBjdXJyZW50bHkgcGF1c2VkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpc1BhdXNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1BhdXNlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlICE9PSB0aGlzLnN0YXRlc1tQTEFZSU5HXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgd2F2ZXN1cmZlci5nZXREdXJhdGlvbigpYFxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBEdXJhdGlvbiBvZiBsb2FkZWQgYnVmZmVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmV4cGxpY2l0RHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGljaXREdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGB3YXZlc3VyZmVyLnNlZWtUbygpYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFBvc2l0aW9uIHRvIHN0YXJ0IGF0IGluIHNlY29uZHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFBvc2l0aW9uIHRvIGVuZCBhdCBpbiBzZWNvbmRzXG4gICAgICogQHJldHVybiB7e3N0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyfX0gT2JqZWN0IGNvbnRhaW5pbmcgc3RhcnQgYW5kIGVuZFxuICAgICAqIHBvc2l0aW9uc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIXRoaXMuYnVmZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY2hlZHVsZWRQYXVzZSA9IG51bGw7XG5cbiAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0ID0gdGhpcy5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgICAgIGlmIChzdGFydCA+PSB0aGlzLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCA9PSBudWxsKSB7XG4gICAgICAgIGVuZCA9IHRoaXMuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnQ7XG4gICAgICB0aGlzLmxhc3RQbGF5ID0gdGhpcy5hYy5jdXJyZW50VGltZTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzW0ZJTklTSEVEXSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFBBVVNFRCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgZW5kOiBlbmRcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcGxheWJhY2sgcG9zaXRpb24gaW4gc2Vjb25kc1xuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgcGxheWJhY2sgcG9zaXRpb24gaW4gc2Vjb25kc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGxheWVkVGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQbGF5ZWRUaW1lKCkge1xuICAgICAgcmV0dXJuICh0aGlzLmFjLmN1cnJlbnRUaW1lIC0gdGhpcy5sYXN0UGxheSkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGxheXMgdGhlIGxvYWRlZCBhdWRpbyByZWdpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0IGluIHNlY29uZHMsIHJlbGF0aXZlIHRvIHRoZSBiZWdpbm5pbmdcbiAgICAgKiBvZiBhIGNsaXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBXaGVuIHRvIHN0b3AgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiBhIGNsaXAuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIG5lZWQgdG8gcmUtY3JlYXRlIHNvdXJjZSBvbiBlYWNoIHBsYXliYWNrXG5cblxuICAgICAgdGhpcy5jcmVhdGVTb3VyY2UoKTtcbiAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0aGlzLnNlZWtUbyhzdGFydCwgZW5kKTtcbiAgICAgIHN0YXJ0ID0gYWRqdXN0ZWRUaW1lLnN0YXJ0O1xuICAgICAgZW5kID0gYWRqdXN0ZWRUaW1lLmVuZDtcbiAgICAgIHRoaXMuc2NoZWR1bGVkUGF1c2UgPSBlbmQ7XG4gICAgICB0aGlzLnNvdXJjZS5zdGFydCgwLCBzdGFydCk7XG4gICAgICB0aGlzLnJlc3VtZUF1ZGlvQ29udGV4dCgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZShQTEFZSU5HKTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdwbGF5Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdXNlcyB0aGUgbG9hZGVkIGF1ZGlvLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlZFBhdXNlID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiArPSB0aGlzLmdldFBsYXllZFRpbWUoKTtcbiAgICAgIHRoaXMuc291cmNlICYmIHRoaXMuc291cmNlLnN0b3AoMCk7XG4gICAgICB0aGlzLnNldFN0YXRlKFBBVVNFRCk7XG4gICAgICB0aGlzLmZpcmVFdmVudCgncGF1c2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB0aW1lIGluIHNlY29uZHMgcmVsYXRpdmUgdG8gdGhlIGF1ZGlvLWNsaXAnc1xuICAgICAqIGR1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCB0aW1lIGluIHNlY29uZHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZ2V0Q3VycmVudFRpbWUuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlLiAoMD1ubyBwbGF5YmFjaywgMT1ub3JtYWwgcGxheWJhY2spXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQbGF5YmFja1JhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5YmFja1JhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYXVkaW8gc291cmNlIHBsYXliYWNrIHJhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHBsYXliYWNrIHJhdGUgdG8gdXNlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHZhbHVlKSB7XG4gICAgICB0aGlzLnBsYXliYWNrUmF0ZSA9IHZhbHVlIHx8IDE7XG4gICAgICB0aGlzLnNvdXJjZSAmJiB0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VmFsdWVBdFRpbWUodGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuYWMuY3VycmVudFRpbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYSBwb2ludCBpbiBzZWNvbmRzIGZvciBwbGF5YmFjayB0byBzdG9wIGF0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBQb3NpdGlvbiB0byBlbmQgYXRcbiAgICAgKiBAdmVyc2lvbiAzLjMuMFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UGxheUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5RW5kKGVuZCkge1xuICAgICAgdGhpcy5zY2hlZHVsZWRQYXVzZSA9IGVuZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2ViQXVkaW87XG59KHV0aWwuT2JzZXJ2ZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBXZWJBdWRpbztcbldlYkF1ZGlvLnNjcmlwdEJ1ZmZlclNpemUgPSAyNTY7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZGVib3VuY2UvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvZGVib3VuY2UvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAqIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAqIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICogbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy4gVGhlIGZ1bmN0aW9uIGFsc28gaGFzIGEgcHJvcGVydHkgJ2NsZWFyJyBcbiAqIHRoYXQgaXMgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGNsZWFyIHRoZSB0aW1lciB0byBwcmV2ZW50IHByZXZpb3VzbHkgc2NoZWR1bGVkIGV4ZWN1dGlvbnMuIFxuICpcbiAqIEBzb3VyY2UgdW5kZXJzY29yZS5qc1xuICogQHNlZSBodHRwOi8vdW5zY3JpcHRhYmxlLmNvbS8yMDA5LzAzLzIwL2RlYm91bmNpbmctamF2YXNjcmlwdC1tZXRob2RzL1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb24gdG8gd3JhcFxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgaW4gbXMgKGAxMDBgKVxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRvIGV4ZWN1dGUgYXQgdGhlIGJlZ2lubmluZyAoYGZhbHNlYClcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSl7XG4gIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgaWYgKG51bGwgPT0gd2FpdCkgd2FpdCA9IDEwMDtcblxuICBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICB2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uKCl7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgXG4gIGRlYm91bmNlZC5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG5cbi8vIEFkZHMgY29tcGF0aWJpbGl0eSBmb3IgRVMgbW9kdWxlc1xuZGVib3VuY2UuZGVib3VuY2UgPSBkZWJvdW5jZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvd2F2ZXN1cmZlci5qc1wiKTtcbi8qKioqKiovIH0pKClcbjtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F2ZXN1cmZlci5qcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyBhcyBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlU3R5bGVzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5leHBvcnQgdmFyIGh0bWwgPSB7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbn07XG5leHBvcnQgdmFyIGJvZHkgPSBmdW5jdGlvbiBib2R5KHRoZW1lKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gIH0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAvLyBTYXZlIHByaW50ZXIgaW5rLlxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICAgIH1cbiAgfSk7XG59O1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAnQGdsb2JhbCc6IHtcbiAgICAgIGh0bWw6IGh0bWwsXG4gICAgICAnKiwgKjo6YmVmb3JlLCAqOjphZnRlcic6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICAgIH0sXG4gICAgICAnc3Ryb25nLCBiJzoge1xuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkXG4gICAgICB9LFxuICAgICAgYm9keTogX2V4dGVuZHMoe1xuICAgICAgICBtYXJnaW46IDBcbiAgICAgIH0sIGJvZHkodGhlbWUpLCB7XG4gICAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsU2NyZWVuKCkuXG4gICAgICAgIC8vIE90aGVyIGVsZW1lbnRzLCBpZiBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50LCBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgJyY6OmJhY2tkcm9wJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBLaWNrc3RhcnQgYW4gZWxlZ2FudCwgY29uc2lzdGVudCwgYW5kIHNpbXBsZSBiYXNlbGluZSB0byBidWlsZCB1cG9uLlxuICovXG5cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKHByb3BzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBfcHJvcHMkY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX3Byb3BzJGNoaWxkcmVuID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJGNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQ3NzQmFzZWxpbmVbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoQ3NzQmFzZWxpbmUucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNzc0Jhc2VsaW5lJ1xufSkoQ3NzQmFzZWxpbmUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmlwcGxlKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRwdWxzYXRlID0gcHJvcHMucHVsc2F0ZSxcbiAgICAgIHB1bHNhdGUgPSBfcHJvcHMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVggPSBwcm9wcy5yaXBwbGVYLFxuICAgICAgcmlwcGxlWSA9IHByb3BzLnJpcHBsZVksXG4gICAgICByaXBwbGVTaXplID0gcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgX3Byb3BzJG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRlZCA9IF9wcm9wcyRvbkV4aXRlZCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcHJvcHMkb25FeGl0ZWQsXG4gICAgICB0aW1lb3V0ID0gcHJvcHMudGltZW91dDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldExlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHJpcHBsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yaXBwbGUsIGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgcHVsc2F0ZSAmJiBjbGFzc2VzLnJpcHBsZVB1bHNhdGUpO1xuICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IHVzZUV2ZW50Q2FsbGJhY2sob25FeGl0ZWQpOyAvLyBSaXBwbGUgaXMgdXNlZCBmb3IgdXNlciBmZWVkYmFjayAoZS5nLiBjbGljayBvciBwcmVzcykgc28gd2Ugd2FudCB0byBhcHBseSBzdHlsZXMgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eVxuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWluUHJvcCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRcbiAgICAgIHNldExlYXZpbmcodHJ1ZSk7IC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0ZWRcblxuICAgICAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoaGFuZGxlRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlc1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xudmFyIERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IHZhciBERUxBWV9SSVBQTEUgPSA4MDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHpJbmRleDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZToge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVWaXNpYmxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVWaXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICBhbmltYXRpb246IFwiJGVudGVyIFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVQdWxzYXRlOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogXCJcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgXCJtc1wiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRgIGNsYXNzLiAqL1xuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZExlYXZpbmdgIGNsYXNzLiAqL1xuICAgIGNoaWxkTGVhdmluZzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkZXhpdCBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkcHVsc2F0ZSAyNTAwbXMgXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIFwiIDIwMG1zIGluZmluaXRlXCIpXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBlbnRlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgcHVsc2F0ZSc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMC45MiknXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxudmFyIFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbnRlciA9IHByb3BzLmNlbnRlcixcbiAgICAgIGNlbnRlclByb3AgPSBfcHJvcHMkY2VudGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgcmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICB2YXIgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgdmFyIHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSA9IHBhcmFtcy5yaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9sZFJpcHBsZXMpLCBbLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlwcGxlLCB7XG4gICAgICAgIGtleTogbmV4dEtleS5jdXJyZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIHZhciBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgcHVsc2F0ZSA9IF9vcHRpb25zJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcHVsc2F0ZSxcbiAgICAgICAgX29wdGlvbnMkY2VudGVyID0gb3B0aW9ucy5jZW50ZXIsXG4gICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUgOiBfb3B0aW9ucyRjZW50ZXIsXG4gICAgICAgIF9vcHRpb25zJGZha2VFbGVtZW50ID0gb3B0aW9ucy5mYWtlRWxlbWVudCxcbiAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBjb250YWluZXIuY3VycmVudDtcbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIHZhciByaXBwbGVYO1xuICAgIHZhciByaXBwbGVZO1xuICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudCxcbiAgICAgICAgICBjbGllbnRYID0gX3JlZi5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBfcmVmLmNsaWVudFk7XG5cbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlbGF5IHRoZSBleGVjdXRpb24gb2YgdGhlIHJpcHBsZSBlZmZlY3QuXG5cblxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgY2I6IGNiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjZW50ZXJQcm9wLCBzdGFydENvbW1pdF0pO1xuICB2YXIgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgdmFyIHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQsIGNiKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7IC8vIFRoZSB0b3VjaCBpbnRlcmFjdGlvbiBvY2N1cnMgdG9vIHF1aWNrbHkuXG4gICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgc3RvcDogc3RvcFxuICAgIH07XG4gIH0sIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGV4aXQ6IHRydWVcbiAgfSwgcmlwcGxlcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKCAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyhUb3VjaFJpcHBsZSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICAgIH0sXG4gICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgIH0sXG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cbnZhciBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgb25EcmFnTGVhdmUgPSBwcm9wcy5vbkRyYWdMZWF2ZSxcbiAgICAgIF9wcm9wcyR0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdGFiSW5kZXggPSBfcHJvcHMkdGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdGFiSW5kZXgsXG4gICAgICBUb3VjaFJpcHBsZVByb3BzID0gcHJvcHMuVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJidXR0b25SZWZcIiwgXCJjZW50ZXJSaXBwbGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrKSB7XG4gICAgdmFyIHNraXBSaXBwbGVBY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudENhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgdmFyIGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Nb3VzZVVwKTtcbiAgdmFyIGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIHZhciBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICB2YXIgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBvbkJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgdmFyIGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGlzTm9uTmF0aXZlQnV0dG9uID0gZnVuY3Rpb24gaXNOb25OYXRpdmVCdXR0b24oKSB7XG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcbiAgLyoqXG4gICAqIElFIDExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIHZhciBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIG90aGVyLmhyZWYpIHtcbiAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICB9XG5cbiAgdmFyIGJ1dHRvblByb3BzID0ge307XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoQ29tcG9uZW50UHJvcCAhPT0gJ2EnIHx8ICFvdGhlci5ocmVmKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICB9XG5cbiAgdmFyIGhhbmRsZVVzZXJSZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZlByb3AsIHJlZik7XG4gIHZhciBoYW5kbGVPd25SZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlVXNlclJlZiwgaGFuZGxlT3duUmVmKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZvY3VzVmlzaWJsZSAmJiBbY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gIC8qI19fUFVSRV9fKi9cblxuICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmlwcGxlUmVmLFxuICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVmYCBpbnN0ZWFkLlxuICAgKi9cbiAgYnV0dG9uUmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGVzIHdpbGwgYmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9tYXN0ZXIvZXhwbGFpbmVyLm1kKS5cbiAgICogQSBbcG9seWZpbGwgY2FuIGJlIHVzZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUpIHRvIGFwcGx5IGEgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIG90aGVyIGNvbXBvbmVudHNcbiAgICogaWYgbmVlZGVkLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG59KShCdXR0b25CYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgcGFkZGluZzogMTIsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHRvIHNvbHZlIGEgYnVnIG9uIElFIDExLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cInN0YXJ0XCJgLiAqL1xuICAgIGVkZ2VTdGFydDoge1xuICAgICAgbWFyZ2luTGVmdDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDMsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY2hpbGRyZW4gY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogUmVmZXIgdG8gdGhlIFtJY29uc10oL2NvbXBvbmVudHMvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cblxudmFyIEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRlZGdlID0gcHJvcHMuZWRnZSxcbiAgICAgIGVkZ2UgPSBfcHJvcHMkZWRnZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZWRnZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c1JpID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzJGRpc2FibGVGb2N1c1JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJlZGdlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcInNpemVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBzaXplID09PSBcInNtYWxsXCIgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCB7XG4gICAgICAnc3RhcnQnOiBjbGFzc2VzLmVkZ2VTdGFydCxcbiAgICAgICdlbmQnOiBjbGFzc2VzLmVkZ2VFbmRcbiAgICB9W2VkZ2VdKSxcbiAgICBjZW50ZXJSaXBwbGU6IHRydWUsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQucHJvcHMub25DbGljaztcbiAgICB9KTtcblxuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhbiBvbkNsaWNrIGV2ZW50IGxpc3RlbmVyICcgKyAndG8gYSBjaGlsZCBvZiBhIGJ1dHRvbiBlbGVtZW50LicsICdGaXJlZm94IHdpbGwgbmV2ZXIgdHJpZ2dlciB0aGUgZXZlbnQuJywgJ1lvdSBzaG91bGQgbW92ZSB0aGUgb25DbGljayBsaXN0ZW5lciB0byB0aGUgcGFyZW50IGJ1dHRvbiBlbGVtZW50LicsICdodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS9pc3N1ZXMvMTM5NTcnXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbidcbn0pKEljb25CdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlR3V0dGVyczoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZml4ZWQ9e3RydWV9YC4gKi9cbiAgICBmaXhlZDogT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgICBtYXhXaWR0aDogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInhzXCJgLiAqL1xuICAgIG1heFdpZHRoWHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hzJyksIHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwic21cImAuICovXG4gICAgbWF4V2lkdGhTbTogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJtZFwiYC4gKi9cbiAgICBtYXhXaWR0aE1kOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cImxnXCJgLiAqL1xuICAgIG1heFdpZHRoTGc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ2xnJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieGxcImAuICovXG4gICAgbWF4V2lkdGhYbDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneGwnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bFxuICAgIH0pXG4gIH07XG59O1xudmFyIENvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbnRhaW5lcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyRmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgZml4ZWQgPSBfcHJvcHMkZml4ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZpeGVkLFxuICAgICAgX3Byb3BzJG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IF9wcm9wcyRtYXhXaWR0aCA9PT0gdm9pZCAwID8gJ2xnJyA6IF9wcm9wcyRtYXhXaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmaXhlZFwiLCBcIm1heFdpZHRoXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmaXhlZCAmJiBjbGFzc2VzLmZpeGVkLCBkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmRpc2FibGVHdXR0ZXJzLCBtYXhXaWR0aCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcIm1heFdpZHRoXCIuY29uY2F0KGNhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2V0IHRoZSBtYXgtd2lkdGggdG8gbWF0Y2ggdGhlIG1pbi13aWR0aCBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UnZCBwcmVmZXIgdG8gZGVzaWduIGZvciBhIGZpeGVkIHNldCBvZiBzaXplc1xuICAgKiBpbnN0ZWFkIG9mIHRyeWluZyB0byBhY2NvbW1vZGF0ZSBhIGZ1bGx5IGZsdWlkIHZpZXdwb3J0LlxuICAgKiBJdCdzIGZsdWlkIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqL1xuICBtYXhXaWR0aDogUHJvcFR5cGVzLm9uZU9mKFsnbGcnLCAnbWQnLCAnc20nLCAneGwnLCAneHMnLCBmYWxzZV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNvbnRhaW5lcidcbn0pKENvbnRhaW5lcik7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gQSBncmlkIGNvbXBvbmVudCB1c2luZyB0aGUgZm9sbG93aW5nIGxpYnMgYXMgaW5zcGlyYXRpb24uXG4vL1xuLy8gRm9yIHRoZSBpbXBsZW1lbnRhdGlvbjpcbi8vIC0gaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4zL2xheW91dC9ncmlkL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20va3Jpc3RvZmVyam9zZXBoL2ZsZXhib3hncmlkL2Jsb2IvbWFzdGVyL3NyYy9jc3MvZmxleGJveGdyaWQuY3NzXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9yb3lsZWUwNzA0L3JlYWN0LWZsZXhib3gtZ3JpZFxuLy8gLSBodHRwczovL21hdGVyaWFsLmFuZ3VsYXJqcy5vcmcvbGF0ZXN0L2xheW91dC9pbnRyb2R1Y3Rpb25cbi8vXG4vLyBGb2xsb3cgdGhpcyBmbGV4Ym94IEd1aWRlIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1bmRlcmx5aW5nIG1vZGVsOlxuLy8gLSBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9hLWd1aWRlLXRvLWZsZXhib3gvXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgcmVxdWlyZVByb3BGYWN0b3J5IGZyb20gJy4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeSc7XG52YXIgU1BBQ0lOR1MgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xudmFyIEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVHcmlkKGdsb2JhbFN0eWxlcywgdGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBHUklEX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIga2V5ID0gXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNpemUpO1xuXG4gICAgaWYgKHNpemUgPT09IHRydWUpIHtcbiAgICAgIC8vIEZvciB0aGUgYXV0byBsYXlvdXRpbmdcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgZmxleEdyb3c6IDAsXG4gICAgICAgIG1heFdpZHRoOiAnbm9uZSdcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cblxuXG4gICAgdmFyIHdpZHRoID0gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChzaXplIC8gMTIgKiAxMGU3KSAvIDEwZTUsIFwiJVwiKTsgLy8gQ2xvc2UgdG8gdGhlIGJvb3RzdHJhcCBpbXBsZW1lbnRhdGlvbjpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi84ZmNjYWEyNDM5ZTk3ZWM3MmE0YjdkYzQyY2NjMWY2NDk3OTBhZGIwL3Njc3MvbWl4aW5zL19ncmlkLnNjc3MjTDQxXG5cbiAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgIGZsZXhCYXNpczogd2lkdGgsXG4gICAgICBmbGV4R3JvdzogMCxcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxuICAgIH07XG4gIH0pOyAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cblxuICBpZiAoYnJlYWtwb2ludCA9PT0gJ3hzJykge1xuICAgIF9leHRlbmRzKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxTdHlsZXNbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldCh2YWwpIHtcbiAgdmFyIGRpdiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgdmFyIHBhcnNlID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gXCJcIi5jb25jYXQocGFyc2UgLyBkaXYpLmNvbmNhdChTdHJpbmcodmFsKS5yZXBsYWNlKFN0cmluZyhwYXJzZSksICcnKSB8fCAncHgnKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHdXR0ZXIodGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBTUEFDSU5HUy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFjaW5nKSB7XG4gICAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcoc3BhY2luZyk7XG5cbiAgICBpZiAodGhlbWVTcGFjaW5nID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3R5bGVzW1wic3BhY2luZy1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzcGFjaW5nKV0gPSB7XG4gICAgICBtYXJnaW46IFwiLVwiLmNvbmNhdChnZXRPZmZzZXQodGhlbWVTcGFjaW5nLCAyKSksXG4gICAgICB3aWR0aDogXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQoZ2V0T2Zmc2V0KHRoZW1lU3BhY2luZyksIFwiKVwiKSxcbiAgICAgICcmID4gJGl0ZW0nOiB7XG4gICAgICAgIHBhZGRpbmc6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcsIDIpXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59IC8vIERlZmF1bHQgQ1NTIHZhbHVlc1xuLy8gZmxleDogJzAgMSBhdXRvJyxcbi8vIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuLy8gYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuLy8gZmxleFdyYXA6ICdub3dyYXAnLFxuLy8ganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcblxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb250YWluZXI9e3RydWV9YC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaXRlbT17dHJ1ZX1gLiAqL1xuICAgIGl0ZW06IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luOiAnMCcgLy8gRm9yIGluc3RhbmNlLCBpdCdzIHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhIGBmaWd1cmVgIGVsZW1lbnQuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgemVyb01pbldpZHRoPXt0cnVlfWAuICovXG4gICAgemVyb01pbldpZHRoOiB7XG4gICAgICBtaW5XaWR0aDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW5cImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4nOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW4tcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbi1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJyb3ctcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLXJvdy1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwibm93cmFwXCJgLiAqL1xuICAgICd3cmFwLXhzLW5vd3JhcCc6IHtcbiAgICAgIGZsZXhXcmFwOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwicmV2ZXJzZVwiYC4gKi9cbiAgICAnd3JhcC14cy13cmFwLXJldmVyc2UnOiB7XG4gICAgICBmbGV4V3JhcDogJ3dyYXAtcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImJhc2VsaW5lXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1iYXNlbGluZSc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdiYXNlbGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImNlbnRlclwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1jZW50ZXInOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWZsZXgtZW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWV2ZW5seVwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1ldmVubHknOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWV2ZW5seSdcbiAgICB9XG4gIH0sIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCAneHMnKSwgdGhlbWUuYnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBnZW5lcmF0ZUdyaWQoYWNjdW11bGF0b3IsIHRoZW1lLCBrZXkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwge30pKTtcbn07XG52YXIgR3JpZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyaWQocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFsaWduQ29udGVudCA9IHByb3BzLmFsaWduQ29udGVudCxcbiAgICAgIGFsaWduQ29udGVudCA9IF9wcm9wcyRhbGlnbkNvbnRlbnQgPT09IHZvaWQgMCA/ICdzdHJldGNoJyA6IF9wcm9wcyRhbGlnbkNvbnRlbnQsXG4gICAgICBfcHJvcHMkYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBhbGlnbkl0ZW1zID0gX3Byb3BzJGFsaWduSXRlbXMgPT09IHZvaWQgMCA/ICdzdHJldGNoJyA6IF9wcm9wcyRhbGlnbkl0ZW1zLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBjb250YWluZXIgPSBfcHJvcHMkY29udGFpbmVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgZGlyZWN0aW9uID0gX3Byb3BzJGRpcmVjdGlvbiA9PT0gdm9pZCAwID8gJ3JvdycgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgX3Byb3BzJGl0ZW0gPSBwcm9wcy5pdGVtLFxuICAgICAgaXRlbSA9IF9wcm9wcyRpdGVtID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpdGVtLFxuICAgICAgX3Byb3BzJGp1c3RpZnkgPSBwcm9wcy5qdXN0aWZ5LFxuICAgICAganVzdGlmeSA9IF9wcm9wcyRqdXN0aWZ5ID09PSB2b2lkIDAgPyAnZmxleC1zdGFydCcgOiBfcHJvcHMkanVzdGlmeSxcbiAgICAgIF9wcm9wcyRsZyA9IHByb3BzLmxnLFxuICAgICAgbGcgPSBfcHJvcHMkbGcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGxnLFxuICAgICAgX3Byb3BzJG1kID0gcHJvcHMubWQsXG4gICAgICBtZCA9IF9wcm9wcyRtZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbWQsXG4gICAgICBfcHJvcHMkc20gPSBwcm9wcy5zbSxcbiAgICAgIHNtID0gX3Byb3BzJHNtID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzbSxcbiAgICAgIF9wcm9wcyRzcGFjaW5nID0gcHJvcHMuc3BhY2luZyxcbiAgICAgIHNwYWNpbmcgPSBfcHJvcHMkc3BhY2luZyA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRzcGFjaW5nLFxuICAgICAgX3Byb3BzJHdyYXAgPSBwcm9wcy53cmFwLFxuICAgICAgd3JhcCA9IF9wcm9wcyR3cmFwID09PSB2b2lkIDAgPyAnd3JhcCcgOiBfcHJvcHMkd3JhcCxcbiAgICAgIF9wcm9wcyR4bCA9IHByb3BzLnhsLFxuICAgICAgeGwgPSBfcHJvcHMkeGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHhsLFxuICAgICAgX3Byb3BzJHhzID0gcHJvcHMueHMsXG4gICAgICB4cyA9IF9wcm9wcyR4cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeHMsXG4gICAgICBfcHJvcHMkemVyb01pbldpZHRoID0gcHJvcHMuemVyb01pbldpZHRoLFxuICAgICAgemVyb01pbldpZHRoID0gX3Byb3BzJHplcm9NaW5XaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkemVyb01pbldpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduQ29udGVudFwiLCBcImFsaWduSXRlbXNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiaXRlbVwiLCBcImp1c3RpZnlcIiwgXCJsZ1wiLCBcIm1kXCIsIFwic21cIiwgXCJzcGFjaW5nXCIsIFwid3JhcFwiLCBcInhsXCIsIFwieHNcIiwgXCJ6ZXJvTWluV2lkdGhcIl0pO1xuXG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCwgY29udGFpbmVyICYmIFtjbGFzc2VzLmNvbnRhaW5lciwgc3BhY2luZyAhPT0gMCAmJiBjbGFzc2VzW1wic3BhY2luZy14cy1cIi5jb25jYXQoU3RyaW5nKHNwYWNpbmcpKV1dLCBpdGVtICYmIGNsYXNzZXMuaXRlbSwgemVyb01pbldpZHRoICYmIGNsYXNzZXMuemVyb01pbldpZHRoLCBkaXJlY3Rpb24gIT09ICdyb3cnICYmIGNsYXNzZXNbXCJkaXJlY3Rpb24teHMtXCIuY29uY2F0KFN0cmluZyhkaXJlY3Rpb24pKV0sIHdyYXAgIT09ICd3cmFwJyAmJiBjbGFzc2VzW1wid3JhcC14cy1cIi5jb25jYXQoU3RyaW5nKHdyYXApKV0sIGFsaWduSXRlbXMgIT09ICdzdHJldGNoJyAmJiBjbGFzc2VzW1wiYWxpZ24taXRlbXMteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkl0ZW1zKSldLCBhbGlnbkNvbnRlbnQgIT09ICdzdHJldGNoJyAmJiBjbGFzc2VzW1wiYWxpZ24tY29udGVudC14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduQ29udGVudCkpXSwganVzdGlmeSAhPT0gJ2ZsZXgtc3RhcnQnICYmIGNsYXNzZXNbXCJqdXN0aWZ5LXhzLVwiLmNvbmNhdChTdHJpbmcoanVzdGlmeSkpXSwgeHMgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLXhzLVwiLmNvbmNhdChTdHJpbmcoeHMpKV0sIHNtICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1zbS1cIi5jb25jYXQoU3RyaW5nKHNtKSldLCBtZCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtbWQtXCIuY29uY2F0KFN0cmluZyhtZCkpXSwgbGcgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLWxnLVwiLmNvbmNhdChTdHJpbmcobGcpKV0sIHhsICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC14bC1cIi5jb25jYXQoU3RyaW5nKHhsKSldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0cmV0Y2gnLCAnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduSXRlbXM6IFByb3BUeXBlcy5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3N0cmV0Y2gnLCAnYmFzZWxpbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICpjb250YWluZXIqIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsncm93JywgJ3Jvdy1yZXZlcnNlJywgJ2NvbHVtbicsICdjb2x1bW4tcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqaXRlbSogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqL1xuICBpdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGp1c3RpZnktY29udGVudGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBqdXN0aWZ5OiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzcGFjZS1ldmVubHknXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYGxnYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbGc6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBtZGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIG1kOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgc21gIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBzbTogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudC5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mKFNQQUNJTkdTKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwJywgJ3dyYXAtcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgeGxgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMuXG4gICAqL1xuICB4bDogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqL1xuICB4czogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgc2V0cyBgbWluLXdpZHRoOiAwYCBvbiB0aGUgaXRlbS5cbiAgICogUmVmZXIgdG8gdGhlIGxpbWl0YXRpb25zIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24gdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVzZSBjYXNlLlxuICAgKi9cbiAgemVyb01pbldpZHRoOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbnZhciBTdHlsZWRHcmlkID0gd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWQnXG59KShHcmlkKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlcXVpcmVQcm9wID0gcmVxdWlyZVByb3BGYWN0b3J5KCdHcmlkJyk7XG4gIFN0eWxlZEdyaWQucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFN0eWxlZEdyaWQucHJvcFR5cGVzLCB7XG4gICAgYWxpZ25Db250ZW50OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgYWxpZ25JdGVtczogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGRpcmVjdGlvbjogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGp1c3RpZnk6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBsZzogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBtZDogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzbTogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzcGFjaW5nOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgd3JhcDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHhzOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHplcm9NaW5XaWR0aDogcmVxdWlyZVByb3AoJ2l0ZW0nKVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkR3JpZDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG52YXIgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgc3F1YXJlID0gX3Byb3BzJHNxdWFyZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3F1YXJlLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnZWxldmF0aW9uJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzcXVhcmVcIiwgXCJlbGV2YXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ID09PSAnb3V0bGluZWQnID8gY2xhc3Nlcy5vdXRsaW5lZCA6IGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5udW1iZXIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uOyAvLyBpbiBjYXNlIGB3aXRoU3R5bGVzYCBmYWlscyB0byBpbmplY3Qgd2UgZG9uJ3QgbmVlZCB0aGlzIHdhcm5pbmdcblxuICAgIGlmIChjbGFzc2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbGV2YXRpb24gIT0gbnVsbCAmJiBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJNYXRlcmlhbC1VSTogVGhpcyBlbGV2YXRpb24gYFwiLmNvbmNhdChlbGV2YXRpb24sIFwiYCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBfcmVmLm11aUZvcm1Db250cm9sO1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0ZSkge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIEZvcm1Db250cm9sQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNoYWRvdyB0ZXh0YXJlYSBlbGVtZW50LiAqL1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbnZhciBUZXh0YXJlYUF1dG9zaXplID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWFBdXRvc2l6ZShwcm9wcywgcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIF9wcm9wcyRyb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHJvd3NNaW5Qcm9wID0gX3Byb3BzJHJvd3NNaW4gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkcm93c01pbixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm9uQ2hhbmdlXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJyb3dzTWluXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIHJvd3NNaW4gPSByb3dzIHx8IHJvd3NNaW5Qcm9wO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIHZhciBzaGFkb3dSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBzdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG4gICAgdmFyIGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuXG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuXG4gICAgdmFyIGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTtcbiAgICB2YXIgcGFkZGluZyA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctYm90dG9tJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLXRvcCcpO1xuICAgIHZhciBib3JkZXIgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItYm90dG9tLXdpZHRoJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItdG9wLXdpZHRoJyk7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGNvbnRlbnRcblxuICAgIHZhciBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG5cbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgdmFyIHNpbmdsZVJvd0hlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICB2YXIgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChyb3dzTWluKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihyb3dzTWluKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChyb3dzTWF4KSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihyb3dzTWF4KSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICB2YXIgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIHZhciBvdmVyZmxvdyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPCAyMCAmJiAob3V0ZXJIZWlnaHRTdHlsZSA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5vdXRlckhlaWdodFN0eWxlIHx8IDApIC0gb3V0ZXJIZWlnaHRTdHlsZSkgPiAxIHx8IHByZXZTdGF0ZS5vdmVyZmxvdyAhPT0gb3ZlcmZsb3cpKSB7XG4gICAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG92ZXJmbG93OiBvdmVyZmxvdyxcbiAgICAgICAgICBvdXRlckhlaWdodFN0eWxlOiBvdXRlckhlaWdodFN0eWxlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPT09IDIwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIH0pO1xuICB9LCBbcm93c01heCwgcm93c01pbiwgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAsXG4gICAgcm93czogcm93c01pbixcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIGFsbG93IHNjcm9sbGluZy5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IG51bGxcbiAgICB9LCBzdHlsZSlcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgIHJlZjogc2hhZG93UmVmLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2UgYHJvd3NNaW5gIGluc3RlYWQuIFRoZSBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWluOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0LCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgVGV4dGFyZWFBdXRvc2l6ZSBmcm9tICcuLi9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsJzoge30sXG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHt9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGxpbmVIZWlnaHQ6ICcxLjE4NzZlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBjdXJzb3I6ICd0ZXh0JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnLFxuICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgaGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRml4IElFIDExIHdpZHRoIGlzc3VlXG4gICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfSxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7XG4gICAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnLFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBoaWRkZW5MYWJlbD17dHJ1ZX1gLiAqL1xuICAgIGlucHV0SGlkZGVuTGFiZWw6IHt9XG4gIH07XG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG52YXIgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZW5kQWRvcm5tZW50ID0gcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UHJvcHNQcm9wID0gX3Byb3BzJGlucHV0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGlucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZlByb3AgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclN1ZmZpeCA9IHByb3BzLnJlbmRlclN1ZmZpeCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICByb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHN0YXJ0QWRvcm5tZW50ID0gcHJvcHMuc3RhcnRBZG9ybm1lbnQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZW5kQWRvcm5tZW50XCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJpZFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibWFyZ2luXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwicm93c01pblwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYGlucHV0UmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGBpbnB1dFJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRSZWZQcm9wLCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICAgIHJldHVybiBtdWlGb3JtQ29udHJvbC5yZWdpc3RlckVmZmVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2hpZGRlbkxhYmVsJywgJ21hcmdpbicsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICB9KTtcbiAgZmNzLmZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiBmb2N1c2VkOyAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFtdWlGb3JtQ29udHJvbCAmJiBkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcblxuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICB2YXIgb25GaWxsZWQgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZDtcbiAgdmFyIG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICB2YXIgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcblxuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhldmVudCkge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFIDExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgLy8gd2hpbGUgdGhlIGlucHV0IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBgaW5wdXRDb21wb25lbnRgIGFuZCBmb3JnZXQgdG8gZm9yd2FyZCByZWZzPyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxKSk7XG4gICAgICB9XG5cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkNoYW5nZS5hcHBseShpbnB1dFByb3BzUHJvcCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTsgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuXG4gIHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHNQcm9wLCB7XG4gICAgcmVmOiBoYW5kbGVJbnB1dFJlZlxuICB9KTtcblxuICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAvLyBSZW5hbWUgcmVmIHRvIGlucHV0UmVmIGFzIHdlIGRvbid0IGtub3cgdGhlXG4gICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgIGlucHV0UmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICByZWY6IG51bGxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtdWx0aWxpbmUpIHtcbiAgICBpZiAocm93cyAmJiAhcm93c01heCAmJiAhcm93c01pbikge1xuICAgICAgSW5wdXRDb21wb25lbnQgPSAndGV4dGFyZWEnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4XG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKTtcbiAgfVxuXG4gIHZhciBoYW5kbGVBdXRvRmlsbCA9IGZ1bmN0aW9uIGhhbmRsZUF1dG9GaWxsKGV2ZW50KSB7XG4gICAgLy8gUHJvdmlkZSBhIGZha2UgdmFsdWUgYXMgQ2hyb21lIG1pZ2h0IG5vdCBsZXQgeW91IGFjY2VzcyBpdCBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAgICBjaGVja0RpcnR5KGV2ZW50LmFuaW1hdGlvbk5hbWUgPT09ICdtdWktYXV0by1maWxsLWNhbmNlbCcgPyBpbnB1dFJlZi5jdXJyZW50IDoge1xuICAgICAgdmFsdWU6ICd4J1xuICAgIH0pO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGZjcy5jb2xvciB8fCAncHJpbWFyeScpKV0sIGNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgbXVpRm9ybUNvbnRyb2wgJiYgY2xhc3Nlcy5mb3JtQ29udHJvbCwgbXVsdGlsaW5lICYmIGNsYXNzZXMubXVsdGlsaW5lLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZEVuZCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlKSxcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN0YXJ0QWRvcm5tZW50LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgaWQ6IGlkLFxuICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgIG9uS2V5VXA6IG9uS2V5VXBcbiAgfSwgaW5wdXRQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzUHJvcC5jbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgZmNzLmhpZGRlbkxhYmVsICYmIGNsYXNzZXMuaW5wdXRIaWRkZW5MYWJlbCwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCB0eXBlID09PSAnc2VhcmNoJyAmJiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2UpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gIH0pKSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnRcbiAgfSkpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaW5wdXQgaXMgYmx1cnJlZC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IChldmVudCkgbWlnaHQgYmUgdW5kZWZpbmVkLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01pbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgICdsYWJlbCArICYnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgY29sb3Igc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiR1bmRlcmxpbmU6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7fVxuICB9O1xufTtcbnZhciBJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCAhZGlzYWJsZVVuZGVybGluZSAmJiBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICB1bmRlcmxpbmU6IG51bGxcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0J1xufSkoSW5wdXQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4xMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMyknLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGNvbG9yIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkdW5kZXJsaW5lOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlVW5kZXJsaW5lPXtmYWxzZX1gLiAqL1xuICAgIHVuZGVybGluZToge1xuICAgICAgJyY6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQ6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMTJcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6ICcyN3B4IDEycHggMTBweCcsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4JyxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgY2FyZXRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDIzLFxuICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBpZiBpbiBgPEZvcm1Db250cm9sIGhpZGRlbkxhYmVsIC8+YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7XG4gICAgICBwYWRkaW5nVG9wOiAxOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDE5LFxuICAgICAgJyYkaW5wdXRNYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMTAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDExXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBkaXNhYmxlVW5kZXJsaW5lID0gcHJvcHMuZGlzYWJsZVVuZGVybGluZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWVXaXRob3V0RGVmYXVsdCgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50IHdoZW4gYGxhYmVsV2lkdGhgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZExhYmVsbGVkOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogMTEsXG4gICAgICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICBtYXhXaWR0aDogMC4wMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogNTAsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyYgPiBzcGFuJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQgaXMgbm90Y2hlZC4gKi9cbiAgICBsZWdlbmROb3RjaGVkOiB7XG4gICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgICAgICBkZWxheTogNTBcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTm90Y2hlZE91dGxpbmUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgbGFiZWxXaWR0aFByb3AgPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbm90Y2hlZCA9IHByb3BzLm5vdGNoZWQsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGVnZW5kXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxlZ2VuZExhYmVsbGVkLCBub3RjaGVkICYmIGNsYXNzZXMubGVnZW5kTm90Y2hlZClcbiAgICB9LCBsYWJlbCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBsYWJlbCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9XG5cbiAgdmFyIGxhYmVsV2lkdGggPSBsYWJlbFdpZHRoUHJvcCA+IDAgPyBsYWJlbFdpZHRoUHJvcCAqIDAuNzUgKyA4IDogMC4wMTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBzdHlsZTogX2V4dGVuZHMoX2RlZmluZVByb3BlcnR5KHt9LCBcInBhZGRpbmdcIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpLCA4KSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxlZ2VuZCxcbiAgICBzdHlsZToge1xuICAgICAgLy8gSUUgMTE6IGZpZWxkc2V0IHdpdGggbGVnZW5kIGRvZXMgbm90IHJlbmRlclxuICAgICAgLy8gYSBib3JkZXIgcmFkaXVzLiBUaGlzIG1haW50YWlucyBjb25zaXN0ZW5jeVxuICAgICAgLy8gYnkgYWx3YXlzIGhhdmluZyBhIGxlZ2VuZCByZW5kZXJlZFxuICAgICAgd2lkdGg6IG5vdGNoZWQgPyBsYWJlbFdpZHRoIDogMC4wMVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlTm90Y2hlZE91dGxpbmUnXG59KShOb3RjaGVkT3V0bGluZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgTm90Y2hlZE91dGxpbmUgZnJvbSAnLi9Ob3RjaGVkT3V0bGluZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgJyY6aG92ZXIgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICAgIH0sXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAnJjpob3ZlciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgfSxcbiAgICAgICcmJGVycm9yICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAnMTguNXB4IDE0cHgnLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBOb3RjaGVkT3V0bGluZWAgZWxlbWVudC4gKi9cbiAgICBub3RjaGVkT3V0bGluZToge1xuICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCcsXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxMC41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbGFiZWxXaWR0aCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBsYWJlbFdpZHRoID0gX3Byb3BzJGxhYmVsV2lkdGggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkbGFiZWxXaWR0aCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibGFiZWxcIiwgXCJsYWJlbFdpZHRoXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICByZW5kZXJTdWZmaXg6IGZ1bmN0aW9uIHJlbmRlclN1ZmZpeChzdGF0ZSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGNoZWRPdXRsaW5lLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ub3RjaGVkT3V0bGluZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxuICAgICAgICBub3RjaGVkOiB0eXBlb2Ygbm90Y2hlZCAhPT0gJ3VuZGVmaW5lZCcgPyBub3RjaGVkIDogQm9vbGVhbihzdGF0ZS5zdGFydEFkb3JubWVudCB8fCBzdGF0ZS5maWxsZWQgfHwgc3RhdGUuZm9jdXNlZClcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICBub3RjaGVkT3V0bGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGlucHV0LiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuIElmIHNwZWNpZmllZCBgbGFiZWxXaWR0aGAgaXMgaWdub3JlZC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC4gSXMgaWdub3JlZCBpZiBgbGFiZWxgIGlzIHByb3ZpZGVkLiBQcmVmZXIgYGxhYmVsYFxuICAgKiBpZiB0aGUgaW5wdXQgbGFiZWwgYXBwZWFycyB3aXRoIGEgc3RyaWtlIHRocm91Z2guXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbk91dGxpbmVkSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCdcbn0pKE91dGxpbmVkSW5wdXQpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9jdXNlZD17dHJ1ZX1gLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhc3RlcmlzayBlbGVtZW50LiAqL1xuICAgIGFzdGVyaXNrOiB7XG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xhYmVsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwicmVxdWlyZWRcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdyZXF1aXJlZCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCddXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoZmNzLmNvbG9yIHx8ICdwcmltYXJ5JykpXSwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIGZjcy5yZXF1aXJlZCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hc3RlcmlzaywgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IpXG4gIH0sIFwiXFx1MjAwOVwiLCAnKicpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUxhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCB1c2UgZmlsbGVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZmlsbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkICh1c2VkIGJ5IGBGb3JtR3JvdXBgIGNvbXBvbmVudHMpLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkoRm9ybUxhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyNHB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dERlbnNlYCBzdHlsZS5cbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMXB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc2hyaW5rPXt0cnVlfWAuICovXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBkaXNhYmxlQW5pbWF0aW9uPXtmYWxzZX1gLiAqL1xuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gICAgICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAgICAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEwcHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMjBweCkgc2NhbGUoMSknLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxMnB4KSBzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRzaHJpbmsnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtNnB4KSBzY2FsZSgwLjc1KSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIElucHV0TGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVBbmltYXRpID0gcHJvcHMuZGlzYWJsZUFuaW1hdGlvbixcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBfcHJvcHMkZGlzYWJsZUFuaW1hdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBbmltYXRpLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgc2hyaW5rUHJvcCA9IHByb3BzLnNocmluayxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIHNocmluayA9IHNocmlua1Byb3A7XG5cbiAgaWYgKHR5cGVvZiBzaHJpbmsgPT09ICd1bmRlZmluZWQnICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgc2hyaW5rID0gbXVpRm9ybUNvbnRyb2wuZmlsbGVkIHx8IG11aUZvcm1Db250cm9sLmZvY3VzZWQgfHwgbXVpRm9ybUNvbnRyb2wuYWRvcm5lZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ21hcmdpbicsICd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtTGFiZWwsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsICFkaXNhYmxlQW5pbWF0aW9uICYmIGNsYXNzZXMuYW5pbWF0ZWQsIHNocmluayAmJiBjbGFzc2VzLnNocmluaywgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlLCB7XG4gICAgICAnZmlsbGVkJzogY2xhc3Nlcy5maWxsZWQsXG4gICAgICAnb3V0bGluZWQnOiBjbGFzc2VzLm91dGxpbmVkXG4gICAgfVtmY3MudmFyaWFudF0pLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIGZvY3VzZWQ6IGNsYXNzZXMuZm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkLFxuICAgICAgZXJyb3I6IGNsYXNzZXMuZXJyb3IsXG4gICAgICByZXF1aXJlZDogY2xhc3Nlcy5yZXF1aXJlZCxcbiAgICAgIGFzdGVyaXNrOiBjbGFzc2VzLmFzdGVyaXNrXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFwcGx5IGRpc2FibGVkIGNsYXNzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnXSksXG5cbiAgLyoqXG4gICAqIGlmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIHNocnVuay5cbiAgICovXG4gIHNocmluazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dExhYmVsJ1xufSkoSW5wdXRMYWJlbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgaXNGaWxsZWQsIGlzQWRvcm5lZFN0YXJ0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGlzTXVpRWxlbWVudCBmcm9tICcuLi91dGlscy9pc011aUVsZW1lbnQnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gUmVzZXQgZmllbGRzZXQgZGVmYXVsdCBzdHlsZS5cbiAgICBtaW5XaWR0aDogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcgLy8gRml4IGFsaWdubWVudCBpc3N1ZSBvbiBTYWZhcmkuXG5cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJub3JtYWxcImAuICovXG4gIG1hcmdpbk5vcm1hbDoge1xuICAgIG1hcmdpblRvcDogMTYsXG4gICAgbWFyZ2luQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gIG1hcmdpbkRlbnNlOiB7XG4gICAgbWFyZ2luVG9wOiA4LFxuICAgIG1hcmdpbkJvdHRvbTogNFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICBmdWxsV2lkdGg6IHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH1cbn07XG4vKipcbiAqIFByb3ZpZGVzIGNvbnRleHQgc3VjaCBhcyBmaWxsZWQvZm9jdXNlZC9lcnJvci9yZXF1aXJlZCBmb3IgZm9ybSBpbnB1dHMuXG4gKiBSZWx5aW5nIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVzIGhpZ2ggZmxleGliaWxpdHkgYW5kIGVuc3VyZXMgdGhhdCB0aGUgc3RhdGUgYWx3YXlzIHN0YXlzXG4gKiBjb25zaXN0ZW50IGFjcm9zcyB0aGUgY2hpbGRyZW4gb2YgdGhlIGBGb3JtQ29udHJvbGAuXG4gKiBUaGlzIGNvbnRleHQgaXMgdXNlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogIC0gRm9ybUxhYmVsXG4gKiAgLSBGb3JtSGVscGVyVGV4dFxuICogIC0gSW5wdXRcbiAqICAtIElucHV0TGFiZWxcbiAqXG4gKiBZb3UgY2FuIGZpbmQgb25lIGNvbXBvc2l0aW9uIGV4YW1wbGUgYmVsb3cgYW5kIG1vcmUgZ29pbmcgdG8gW3RoZSBkZW1vc10oL2NvbXBvbmVudHMvdGV4dC1maWVsZHMvI2NvbXBvbmVudHMpLlxuICpcbiAqIGBgYGpzeFxuICogPEZvcm1Db250cm9sPlxuICogICA8SW5wdXRMYWJlbCBodG1sRm9yPVwibXktaW5wdXRcIj5FbWFpbCBhZGRyZXNzPC9JbnB1dExhYmVsPlxuICogICA8SW5wdXQgaWQ9XCJteS1pbnB1dFwiIGFyaWEtZGVzY3JpYmVkYnk9XCJteS1oZWxwZXItdGV4dFwiIC8+XG4gKiAgIDxGb3JtSGVscGVyVGV4dCBpZD1cIm15LWhlbHBlci10ZXh0XCI+V2UnbGwgbmV2ZXIgc2hhcmUgeW91ciBlbWFpbC48L0Zvcm1IZWxwZXJUZXh0PlxuICogPC9Gb3JtQ29udHJvbD5cbiAqIGBgYFxuICpcbiAqIOKaoO+4j09ubHkgb25lIGlucHV0IGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sLlxuICovXG5cbnZhciBGb3JtQ29udHJvbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIHZpc3VhbGx5Rm9jdXNlZCA9IHByb3BzLmZvY3VzZWQsXG4gICAgICBfcHJvcHMkaGlkZGVuTGFiZWwgPSBwcm9wcy5oaWRkZW5MYWJlbCxcbiAgICAgIGhpZGRlbkxhYmVsID0gX3Byb3BzJGhpZGRlbkxhYmVsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRoaWRkZW5MYWJlbCxcbiAgICAgIF9wcm9wcyRtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBtYXJnaW4gPSBfcHJvcHMkbWFyZ2luID09PSB2b2lkIDAgPyAnbm9uZScgOiBfcHJvcHMkbWFyZ2luLFxuICAgICAgX3Byb3BzJHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByZXF1aXJlZCA9IF9wcm9wcyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVxdWlyZWQsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImZvY3VzZWRcIiwgXCJoaWRkZW5MYWJlbFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5wdXQgPSBpc011aUVsZW1lbnQoY2hpbGQsIFsnU2VsZWN0J10pID8gY2hpbGQucHJvcHMuaW5wdXQgOiBjaGlsZDtcblxuICAgICAgICBpZiAoaW5wdXQgJiYgaXNBZG9ybmVkU3RhcnQoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgaW5pdGlhbEFkb3JuZWRTdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsQWRvcm5lZFN0YXJ0O1xuICB9KSxcbiAgICAgIGFkb3JuZWRTdGFydCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEFkb3JuZWRTdGFydCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIGZpbmQgdGhlIElucHV0IGluIG9yZGVyXG4gICAgLy8gdG8gZnVsbHkgc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgdmFyIGluaXRpYWxGaWxsZWQgPSBmYWxzZTtcblxuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZpbGxlZChjaGlsZC5wcm9wcywgdHJ1ZSkpIHtcbiAgICAgICAgICBpbml0aWFsRmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluaXRpYWxGaWxsZWQ7XG4gIH0pLFxuICAgICAgZmlsbGVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTNbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgZm9jdXNlZCA9IHZpc3VhbGx5Rm9jdXNlZCAhPT0gdW5kZWZpbmVkID8gdmlzdWFsbHlGb2N1c2VkIDogX2ZvY3VzZWQ7XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgfVxuXG4gIHZhciByZWdpc3RlckVmZmVjdDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHZhciByZWdpc3RlcmVkSW5wdXQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gICAgcmVnaXN0ZXJFZmZlY3QgPSBmdW5jdGlvbiByZWdpc3RlckVmZmVjdCgpIHtcbiAgICAgIGlmIChyZWdpc3RlcmVkSW5wdXQuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZXJlIGFyZSBtdWx0aXBsZSBJbnB1dEJhc2UgY29tcG9uZW50cyBpbnNpZGUgYSBGb3JtQ29udHJvbC4nLCAnVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJdCBtaWdodCBjYXVzZSBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcHMuJywgJ09ubHkgdXNlIG9uZSBJbnB1dEJhc2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICByZWdpc3RlcmVkSW5wdXQuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWdpc3RlcmVkSW5wdXQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIG9uRmlsbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHNldEZpbGxlZCh0cnVlKTtcbiAgfSwgW10pO1xuICB2YXIgb25FbXB0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGaWxsZWQoZmFsc2UpO1xuICB9LCBbXSk7XG4gIHZhciBjaGlsZENvbnRleHQgPSB7XG4gICAgYWRvcm5lZFN0YXJ0OiBhZG9ybmVkU3RhcnQsXG4gICAgc2V0QWRvcm5lZFN0YXJ0OiBzZXRBZG9ybmVkU3RhcnQsXG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZmlsbGVkOiBmaWxsZWQsXG4gICAgZm9jdXNlZDogZm9jdXNlZCxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbDogaGlkZGVuTGFiZWwsXG4gICAgbWFyZ2luOiAoc2l6ZSA9PT0gJ3NtYWxsJyA/ICdkZW5zZScgOiB1bmRlZmluZWQpIHx8IG1hcmdpbixcbiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH0sXG4gICAgb25FbXB0eTogb25FbXB0eSxcbiAgICBvbkZpbGxlZDogb25GaWxsZWQsXG4gICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcbiAgICByZWdpc3RlckVmZmVjdDogcmVnaXN0ZXJFZmZlY3QsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBtYXJnaW4gIT09ICdub25lJyAmJiBjbGFzc2VzW1wibWFyZ2luXCIuY29uY2F0KGNhcGl0YWxpemUobWFyZ2luKSldLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBmb3JtIGNvbnRyb2wuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCwgaW5wdXQgYW5kIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgYmUgZGlzcGxheWVkIGluIGZvY3VzZWQgc3RhdGUuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHRleHQgZmllbGQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCdcbn0pKEZvcm1Db250cm9sKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sIHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgbWFyZ2luVG9wOiAzLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7XG4gICAgICBtYXJnaW5Ub3A6IDRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYCBvciBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZDoge1xuICAgICAgbWFyZ2luTGVmdDogMTQsXG4gICAgICBtYXJnaW5SaWdodDogMTRcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9jdXNlZD17dHJ1ZX1gLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmlsbGVkPXt0cnVlfWAuICovXG4gICAgZmlsbGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHJlcXVpcmVkPXt0cnVlfWAuICovXG4gICAgcmVxdWlyZWQ6IHt9XG4gIH07XG59O1xudmFyIEZvcm1IZWxwZXJUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUhlbHBlclRleHQocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdwJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdtYXJnaW4nLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZmlsbGVkJywgJ2ZvY3VzZWQnLCAncmVxdWlyZWQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIChmY3MudmFyaWFudCA9PT0gJ2ZpbGxlZCcgfHwgZmNzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcpICYmIGNsYXNzZXMuY29udGFpbmVkLCBjbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvciwgZmNzLmZpbGxlZCAmJiBjbGFzc2VzLmZpbGxlZCwgZmNzLmZvY3VzZWQgJiYgY2xhc3Nlcy5mb2N1c2VkLCBmY3MucmVxdWlyZWQgJiYgY2xhc3Nlcy5yZXF1aXJlZCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuID09PSAnICcgP1xuICAvKiNfX1BVUkVfXyovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIElmIGAnICdgIGlzIHByb3ZpZGVkLCB0aGUgY29tcG9uZW50IHJlc2VydmVzIG9uZSBsaW5lIGhlaWdodCBmb3IgZGlzcGxheWluZyBhIGZ1dHVyZSBtZXNzYWdlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZm9jdXNlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIHJlcXVpcmVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUhlbHBlclRleHQnXG59KShGb3JtSGVscGVyVGV4dCk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7IC8vICNTdHJpY3RNb2RlIHJlYWR5XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBvblJlbmRlcmVkID0gcHJvcHMub25SZW5kZXJlZDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBtb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRNb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCByZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYocmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtyZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9uUmVuZGVyZWQgJiYgKG1vdW50Tm9kZSB8fCBkaXNhYmxlUG9ydGFsKSkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cbiAgfSwgW29uUmVuZGVyZWQsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuXG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGU7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gdG8gcmVuZGVyIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICpcbiAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NSwgdGhlIHJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuICAgKi9cbiAgb25SZW5kZXJlZDogUHJvcFR5cGVzLmZ1bmNcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBQb3J0YWxbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoUG9ydGFsLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvM2ZmZTNhNWQ4MmY2ZjU2MWI4MmZmNzhkODJiMzJhN2QxNGFlZDU1OC9qcy9zcmMvbW9kYWwuanMjTDUxMi1MNTE5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKCkge1xuICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgcmV0dXJuIHNjcm9sbGJhclNpemU7XG59IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnLi4vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7IC8vIElzIGEgdmVydGljYWwgc2Nyb2xsYmFyIGRpc3BsYXllZD9cblxuZnVuY3Rpb24gaXNPdmVyZmxvd2luZyhjb250YWluZXIpIHtcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcblxuICBpZiAoZG9jLmJvZHkgPT09IGNvbnRhaW5lcikge1xuICAgIHJldHVybiBvd25lcldpbmRvdyhkb2MpLmlubmVyV2lkdGggPiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihub2RlLCBzaG93KSB7XG4gIGlmIChzaG93KSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYWRkaW5nUmlnaHQobm9kZSkge1xuICByZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSlbJ3BhZGRpbmctcmlnaHQnXSwgMTApIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSwgY3VycmVudE5vZGUpIHtcbiAgdmFyIG5vZGVzVG9FeGNsdWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBbXTtcbiAgdmFyIHNob3cgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcbiAgdmFyIGJsYWNrbGlzdCA9IFttb3VudE5vZGUsIGN1cnJlbnROb2RlXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5vZGVzVG9FeGNsdWRlKSk7XG4gIHZhciBibGFja2xpc3RUYWdOYW1lcyA9IFsnVEVNUExBVEUnLCAnU0NSSVBUJywgJ1NUWUxFJ107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgYmxhY2tsaXN0LmluZGV4T2Yobm9kZSkgPT09IC0xICYmIGJsYWNrbGlzdFRhZ05hbWVzLmluZGV4T2Yobm9kZS50YWdOYW1lKSA9PT0gLTEpIHtcbiAgICAgIGFyaWFIaWRkZW4obm9kZSwgc2hvdyk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4T2YoY29udGFpbmVySW5mbywgY2FsbGJhY2spIHtcbiAgdmFyIGlkeCA9IC0xO1xuICBjb250YWluZXJJbmZvLnNvbWUoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgaWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG4gICAgICBpZHggPSBpbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCBwcm9wcykge1xuICB2YXIgcmVzdG9yZVN0eWxlID0gW107XG4gIHZhciByZXN0b3JlUGFkZGluZ3MgPSBbXTtcbiAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lckluZm8uY29udGFpbmVyO1xuICB2YXIgZml4ZWROb2RlcztcblxuICBpZiAoIXByb3BzLmRpc2FibGVTY3JvbGxMb2NrKSB7XG4gICAgaWYgKGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSkge1xuICAgICAgLy8gQ29tcHV0ZSB0aGUgc2l6ZSBiZWZvcmUgYXBwbHlpbmcgb3ZlcmZsb3cgaGlkZGVuIHRvIGF2b2lkIGFueSBzY3JvbGwganVtcHMuXG4gICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcbiAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgIGtleTogJ3BhZGRpbmctcmlnaHQnLFxuICAgICAgICBlbDogY29udGFpbmVyXG4gICAgICB9KTsgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuXG4gICAgICBjb250YWluZXIuc3R5bGVbJ3BhZGRpbmctcmlnaHQnXSA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChjb250YWluZXIpICsgc2Nyb2xsYmFyU2l6ZSwgXCJweFwiKTsgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG5cbiAgICAgIGZpeGVkTm9kZXMgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJlc3RvcmVQYWRkaW5ncy5wdXNoKG5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgICAgICAgbm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChnZXRQYWRkaW5nUmlnaHQobm9kZSkgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpO1xuICAgICAgfSk7XG4gICAgfSAvLyBJbXByb3ZlIEdhdHNieSBzdXBwb3J0XG4gICAgLy8gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvZm9yY2UtdmVydGljYWwtc2Nyb2xsYmFyL1xuXG5cbiAgICB2YXIgcGFyZW50ID0gY29udGFpbmVyLnBhcmVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbENvbnRhaW5lciA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudClbJ292ZXJmbG93LXknXSA9PT0gJ3Njcm9sbCcgPyBwYXJlbnQgOiBjb250YWluZXI7IC8vIEJsb2NrIHRoZSBzY3JvbGwgZXZlbiBpZiBubyBzY3JvbGxiYXIgaXMgdmlzaWJsZSB0byBhY2NvdW50IGZvciBtb2JpbGUga2V5Ym9hcmRcbiAgICAvLyBzY3JlZW5zaXplIHNocmluay5cblxuICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgICBrZXk6ICdvdmVyZmxvdycsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSk7XG4gICAgc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH1cblxuICB2YXIgcmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoKSB7XG4gICAgaWYgKGZpeGVkTm9kZXMpIHtcbiAgICAgIFtdLmZvckVhY2guY2FsbChmaXhlZE5vZGVzLCBmdW5jdGlvbiAobm9kZSwgaSkge1xuICAgICAgICBpZiAocmVzdG9yZVBhZGRpbmdzW2ldKSB7XG4gICAgICAgICAgbm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgPSByZXN0b3JlUGFkZGluZ3NbaV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXN0b3JlU3R5bGUuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgICAgICBlbCA9IF9yZWYuZWwsXG4gICAgICAgICAga2V5ID0gX3JlZi5rZXk7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3RvcmU7XG59XG5cbmZ1bmN0aW9uIGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcikge1xuICB2YXIgaGlkZGVuU2libGluZ3MgPSBbXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJykge1xuICAgICAgaGlkZGVuU2libGluZ3MucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGlkZGVuU2libGluZ3M7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqIFNpbXBsaWZpZWQsIGJ1dCBpbnNwaXJlZCBieSByZWFjdC1vdmVybGF5J3MgTW9kYWxNYW5hZ2VyIGNsYXNzLlxuICogVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cblxuXG52YXIgTW9kYWxNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kYWxNYW5hZ2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbE1hbmFnZXIpO1xuXG4gICAgLy8gdGhpcy5tb2RhbHNbbW9kYWxJbmRleF0gPSBtb2RhbFxuICAgIHRoaXMubW9kYWxzID0gW107IC8vIHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF0gPSB7XG4gICAgLy8gICBtb2RhbHM6IFtdLFxuICAgIC8vICAgY29udGFpbmVyLFxuICAgIC8vICAgcmVzdG9yZTogbnVsbCxcbiAgICAvLyB9XG5cbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbE1hbmFnZXIsIFt7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobW9kYWwsIGNvbnRhaW5lcikge1xuICAgICAgdmFyIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgICAgaWYgKG1vZGFsSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7IC8vIElmIHRoZSBtb2RhbCB3ZSBhcmUgYWRkaW5nIGlzIGFscmVhZHkgaW4gdGhlIERPTS5cblxuICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGRlblNpYmxpbmdOb2RlcyA9IGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcik7XG4gICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCBoaWRkZW5TaWJsaW5nTm9kZXMsIHRydWUpO1xuICAgICAgdmFyIGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5jb250YWluZXIgPT09IGNvbnRhaW5lcjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY29udGFpbmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXJzLnB1c2goe1xuICAgICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICByZXN0b3JlOiBudWxsLFxuICAgICAgICBoaWRkZW5TaWJsaW5nTm9kZXM6IGhpZGRlblNpYmxpbmdOb2Rlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnQobW9kYWwsIHByb3BzKSB7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICAgIHZhciBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcblxuICAgICAgaWYgKCFjb250YWluZXJJbmZvLnJlc3RvcmUpIHtcbiAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlID0gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShtb2RhbCkge1xuICAgICAgdmFyIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgICAgaWYgKG1vZGFsSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICAgIHZhciBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcbiAgICAgIGNvbnRhaW5lckluZm8ubW9kYWxzLnNwbGljZShjb250YWluZXJJbmZvLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJbmRleCwgMSk7IC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuXG4gICAgICBpZiAoY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFRoZSBtb2RhbCBtaWdodCBiZSBjbG9zZWQgYmVmb3JlIGl0IGhhZCB0aGUgY2hhbmNlIHRvIGJlIG1vdW50ZWQgaW4gdGhlIERPTS5cbiAgICAgICAgaWYgKGNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICAgIGNvbnRhaW5lckluZm8ucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgICAgLy8gSW4gY2FzZSB0aGUgbW9kYWwgd2Fzbid0IGluIHRoZSBET00geWV0LlxuICAgICAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lckluZm8uY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCBjb250YWluZXJJbmZvLmhpZGRlblNpYmxpbmdOb2RlcywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lckluZGV4LCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBtYWtlIHN1cmUgdGhlIG5leHQgdG9wIG1vZGFsIGlzIHZpc2libGUgdG8gYSBzY3JlZW4gcmVhZGVyLlxuICAgICAgICB2YXIgbmV4dFRvcCA9IGNvbnRhaW5lckluZm8ubW9kYWxzW2NvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCAtIDFdOyAvLyBhcyBzb29uIGFzIGEgbW9kYWwgaXMgYWRkaW5nIGl0cyBtb2RhbFJlZiBpcyB1bmRlZmluZWQuIGl0IGNhbid0IHNldFxuICAgICAgICAvLyBhcmlhLWhpZGRlbiBiZWNhdXNlIHRoZSBkb20gZWxlbWVudCBkb2Vzbid0IGV4aXN0IGVpdGhlclxuICAgICAgICAvLyB3aGVuIG1vZGFsIHdhcyB1bm1vdW50ZWQgYmVmb3JlIG1vZGFsUmVmIGdldHMgbnVsbFxuXG4gICAgICAgIGlmIChuZXh0VG9wLm1vZGFsUmVmKSB7XG4gICAgICAgICAgYXJpYUhpZGRlbihuZXh0VG9wLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVG9wTW9kYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb3BNb2RhbChtb2RhbCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kYWxzLmxlbmd0aCA+IDAgJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbE1hbmFnZXI7XG59KCk7XG5cbmV4cG9ydCB7IE1vZGFsTWFuYWdlciBhcyBkZWZhdWx0IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtdGFiaW5kZXgsIGNhbWVsY2FzZSAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbi8qKlxuICogVXRpbGl0eSBjb21wb25lbnQgdGhhdCBsb2NrcyBmb2N1cyBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBVbnN0YWJsZV9UcmFwRm9jdXMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPSBwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVuZm9yY2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPSBwcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJlc3RvcmUsXG4gICAgICBnZXREb2MgPSBwcm9wcy5nZXREb2MsXG4gICAgICBpc0VuYWJsZWQgPSBwcm9wcy5pc0VuYWJsZWQsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbjtcbiAgdmFyIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHNlbnRpbmVsU3RhcnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBzZW50aW5lbEVuZCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG5vZGVUb1Jlc3RvcmUgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZHJvcCBzdXBwb3J0IGZvciBub24gcmVmIGZvcndhcmRpbmcgY2xhc3MgY29tcG9uZW50c1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJvb3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGhhbmRsZU93blJlZik7XG4gIHZhciBwcmV2T3BlblJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHByZXZPcGVuUmVmLmN1cnJlbnQgPSBvcGVuO1xuICB9LCBbb3Blbl0pO1xuXG4gIGlmICghcHJldk9wZW5SZWYuY3VycmVudCAmJiBvcGVuICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gV0FSTklORzogUG90ZW50aWFsbHkgdW5zYWZlIGluIGNvbmN1cnJlbnQgbW9kZS5cbiAgICAvLyBUaGUgd2F5IHRoZSByZWFkIG9uIGBub2RlVG9SZXN0b3JlYCBpcyBzZXR1cCBjb3VsZCBtYWtlIHRoaXMgYWN0dWFsbHkgc2FmZS5cbiAgICAvLyBTYXkgd2UgcmVuZGVyIGBvcGVuPXtmYWxzZX1gIC0+IGBvcGVuPXt0cnVlfWAgYnV0IG5ldmVyIGNvbW1pdC5cbiAgICAvLyBXZSBoYXZlIG5vdyB3cml0dGVuIGEgc3RhdGUgdGhhdCB3YXNuJ3QgY29tbWl0dGVkLiBCdXQgbm8gY29tbWl0dGVkIGVmZmVjdFxuICAgIC8vIHdpbGwgcmVhZCB0aGlzIHdyb25nIHZhbHVlLiBXZSBvbmx5IHJlYWQgZnJvbSBgbm9kZVRvUmVzdG9yZWAgaW4gZWZmZWN0c1xuICAgIC8vIHRoYXQgd2VyZSBjb21taXR0ZWQgb24gYG9wZW49e3RydWV9YFxuICAgIC8vIFdBUk5JTkc6IFByZXZlbnRzIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLiBTaG91bGQgb25seVxuICAgIC8vIGhvbGQgYSB3ZWFrIHJlZi5cbiAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBnZXREb2MoKS5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChyb290UmVmLmN1cnJlbnQpOyAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG5cbiAgICBpZiAoIWRpc2FibGVBdXRvRm9jdXMgJiYgcm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW4gPSBmdW5jdGlvbiBjb250YWluKCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdFJlZi5jdXJyZW50OyAvLyBDbGVhbnVwIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQgbGF6aWx5IGluIFJlYWN0IDE3LlxuICAgICAgLy8gQ29udGFpbiBjYW4gYmUgY2FsbGVkIGJldHdlZW4gdGhlIGNvbXBvbmVudCBiZWluZyB1bm1vdW50ZWQgYW5kIGl0cyBjbGVhbnVwIGZ1bmN0aW9uIGJlaW5nIHJ1bi5cblxuICAgICAgaWYgKHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCBkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3RSZWYuY3VycmVudCAmJiAhcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxvb3BGb2N1cyA9IGZ1bmN0aW9uIGxvb3BGb2N1cyhldmVudCkge1xuICAgICAgLy8gOSA9IFRhYlxuICAgICAgaWYgKGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGV2ZW50LmtleUNvZGUgIT09IDkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIG5leHQgdGFiIHN0YXJ0cyBmcm9tIHRoZSByaWdodCBwbGFjZS5cblxuXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBjb250YWluIGFzXG4gICAgICAgIC8vIGl0IHdpbGwgdHJ5IHRvIG1vdmUgdGhlIGZvY3VzIGJhY2sgdG8gdGhlIHJvb3RSZWYgZWxlbWVudC5cbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VudGluZWxTdGFydC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgY29udGFpbiwgdHJ1ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYVxuICAgIC8vIGUuZy4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTU5NTYxLlxuICAgIC8vXG4gICAgLy8gVGhlIHdoYXR3ZyBzcGVjIGRlZmluZXMgaG93IHRoZSBicm93c2VyIHNob3VsZCBiZWhhdmUgYnV0IGRvZXMgbm90IGV4cGxpY2l0bHkgbWVudGlvbiBhbnkgZXZlbnRzOlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjZm9jdXMtZml4dXAtcnVsZS5cblxuICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnRhaW4oKTtcbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgY29udGFpbiwgdHJ1ZSk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIHJlc3RvcmVMYXN0Rm9jdXMoKVxuXG4gICAgICBpZiAoIWRpc2FibGVSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgLy8gSW4gSUUgMTEgaXQgaXMgcG9zc2libGUgZm9yIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgdG8gYmUgbnVsbCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gbm9kZVRvUmVzdG9yZS5jdXJyZW50IGJlaW5nIG51bGwuXG4gICAgICAgIC8vIE5vdCBhbGwgZWxlbWVudHMgaW4gSUUgMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRSAxMSBzdXBwb3J0IGlzIGRyb3BwZWQgdGhlIGZvY3VzKCkgY2FsbCBjYW4gYmUgdW5jb25kaXRpb25hbC5cbiAgICAgICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCAmJiBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMpIHtcbiAgICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIGRpc2FibGVFbmZvcmNlRm9jdXMsIGRpc2FibGVSZXN0b3JlRm9jdXMsIGlzRW5hYmxlZCwgb3Blbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIHJlZjogc2VudGluZWxFbmQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbEVuZFwiXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVW5zdGFibGVfVHJhcEZvY3VzLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgdHJhcCBmb2N1cyBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSB0cmFwIGZvY3VzIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSB0cmFwIGZvY3VzIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIHRyYXAgZm9jdXMgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZG9jdW1lbnQgdG8gY29uc2lkZXIuXG4gICAqIFdlIHVzZSBpdCB0byBpbXBsZW1lbnQgdGhlIHJlc3RvcmUgZm9jdXMgYmV0d2VlbiBkaWZmZXJlbnQgYnJvd3NlciBkb2N1bWVudHMuXG4gICAqL1xuICBnZXREb2M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERvIHdlIHN0aWxsIHdhbnQgdG8gZW5mb3JjZSB0aGUgZm9jdXM/XG4gICAqIFRoaXMgcHJvcCBoZWxwcyBuZXN0aW5nIFRyYXBGb2N1cyBlbGVtZW50cy5cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBmb2N1cyB3aWxsIGJlIGxvY2tlZC5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBVbnN0YWJsZV9UcmFwRm9jdXNbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoVW5zdGFibGVfVHJhcEZvY3VzLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuc3RhYmxlX1RyYXBGb2N1czsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB6SW5kZXg6IC0xLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBTaW1wbGVCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNpbXBsZUJhY2tkcm9wKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRpbnZpc2libGUgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBpbnZpc2libGUgPSBfcHJvcHMkaW52aXNpYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnZpc2libGUsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJpbnZpc2libGVcIiwgXCJvcGVuXCJdKTtcblxuICByZXR1cm4gb3BlbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5yb290LCBpbnZpc2libGUgPyBzdHlsZXMuaW52aXNpYmxlIDoge30sIG90aGVyLnN0eWxlKVxuICB9KSkgOiBudWxsO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTaW1wbGVCYWNrZHJvcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTaW1wbGVCYWNrZHJvcDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuLi9zdHlsZXMvekluZGV4JztcbmltcG9ydCBNb2RhbE1hbmFnZXIsIHsgYXJpYUhpZGRlbiB9IGZyb20gJy4vTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBUcmFwRm9jdXMgZnJvbSAnLi4vVW5zdGFibGVfVHJhcEZvY3VzJztcbmltcG9ydCBTaW1wbGVCYWNrZHJvcCBmcm9tICcuL1NpbXBsZUJhY2tkcm9wJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShjb250YWluZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59IC8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cblxuXG52YXIgZGVmYXVsdE1hbmFnZXIgPSBuZXcgTW9kYWxNYW5hZ2VyKCk7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2RhbCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBgTW9kYWxgIGhhcyBleGl0ZWQuICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuXG52YXIgTW9kYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbChpblByb3BzLCByZWYpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIHByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICBwcm9wczogX2V4dGVuZHMoe30sIGluUHJvcHMpLFxuICAgIHRoZW1lOiB0aGVtZVxuICB9KTtcblxuICB2YXIgX3Byb3BzJEJhY2tkcm9wQ29tcG9uID0gcHJvcHMuQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICBCYWNrZHJvcENvbXBvbmVudCA9IF9wcm9wcyRCYWNrZHJvcENvbXBvbiA9PT0gdm9pZCAwID8gU2ltcGxlQmFja2Ryb3AgOiBfcHJvcHMkQmFja2Ryb3BDb21wb24sXG4gICAgICBCYWNrZHJvcFByb3BzID0gcHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkY2xvc2VBZnRlclRyYW4gPSBwcm9wcy5jbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjbG9zZUFmdGVyVHJhbixcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQmFja2RybyA9IHByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2sgPSBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVCYWNrZHJvLFxuICAgICAgX3Byb3BzJGRpc2FibGVFbmZvcmNlID0gcHJvcHMuZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFbmZvcmNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVFc2NhcGVLID0gcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVzY2FwZUssXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPSBwcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJlc3RvcmUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVNjcm9sbEwgPSBwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jayxcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrID0gX3Byb3BzJGRpc2FibGVTY3JvbGxMID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCxcbiAgICAgIF9wcm9wcyRoaWRlQmFja2Ryb3AgPSBwcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICBoaWRlQmFja2Ryb3AgPSBfcHJvcHMkaGlkZUJhY2tkcm9wID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRoaWRlQmFja2Ryb3AsXG4gICAgICBfcHJvcHMka2VlcE1vdW50ZWQgPSBwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgIGtlZXBNb3VudGVkID0gX3Byb3BzJGtlZXBNb3VudGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRrZWVwTW91bnRlZCxcbiAgICAgIF9wcm9wcyRtYW5hZ2VyID0gcHJvcHMubWFuYWdlcixcbiAgICAgIG1hbmFnZXIgPSBfcHJvcHMkbWFuYWdlciA9PT0gdm9pZCAwID8gZGVmYXVsdE1hbmFnZXIgOiBfcHJvcHMkbWFuYWdlcixcbiAgICAgIG9uQmFja2Ryb3BDbGljayA9IHByb3BzLm9uQmFja2Ryb3BDbGljayxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25Fc2NhcGVLZXlEb3duID0gcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcIkJhY2tkcm9wUHJvcHNcIiwgXCJjaGlsZHJlblwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY29udGFpbmVyXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVCYWNrZHJvcENsaWNrXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImRpc2FibGVSZXN0b3JlRm9jdXNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCIsIFwibWFuYWdlclwiLCBcIm9uQmFja2Ryb3BDbGlja1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkVzY2FwZUtleURvd25cIiwgXCJvblJlbmRlcmVkXCIsIFwib3BlblwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtb2RhbCA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIHZhciBtb3VudE5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBtb2RhbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobW9kYWxSZWYsIHJlZik7XG4gIHZhciBoYXNUcmFuc2l0aW9uID0gZ2V0SGFzVHJhbnNpdGlvbihwcm9wcyk7XG5cbiAgdmFyIGdldERvYyA9IGZ1bmN0aW9uIGdldERvYygpIHtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudChtb3VudE5vZGVSZWYuY3VycmVudCk7XG4gIH07XG5cbiAgdmFyIGdldE1vZGFsID0gZnVuY3Rpb24gZ2V0TW9kYWwoKSB7XG4gICAgbW9kYWwuY3VycmVudC5tb2RhbFJlZiA9IG1vZGFsUmVmLmN1cnJlbnQ7XG4gICAgbW9kYWwuY3VycmVudC5tb3VudE5vZGUgPSBtb3VudE5vZGVSZWYuY3VycmVudDtcbiAgICByZXR1cm4gbW9kYWwuY3VycmVudDtcbiAgfTtcblxuICB2YXIgaGFuZGxlTW91bnRlZCA9IGZ1bmN0aW9uIGhhbmRsZU1vdW50ZWQoKSB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9jazogZGlzYWJsZVNjcm9sbExvY2tcbiAgICB9KTsgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuXG4gICAgbW9kYWxSZWYuY3VycmVudC5zY3JvbGxUb3AgPSAwO1xuICB9O1xuXG4gIHZhciBoYW5kbGVPcGVuID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc29sdmVkQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZ2V0RG9jKCkuYm9keTtcbiAgICBtYW5hZ2VyLmFkZChnZXRNb2RhbCgpLCByZXNvbHZlZENvbnRhaW5lcik7IC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBpc1RvcE1vZGFsID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYW5hZ2VyLmlzVG9wTW9kYWwoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIHZhciBoYW5kbGVQb3J0YWxSZWYgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgbW91bnROb2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uUmVuZGVyZWQpIHtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9XG5cbiAgICBpZiAob3BlbiAmJiBpc1RvcE1vZGFsKCkpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJpYUhpZGRlbihtb2RhbFJlZi5jdXJyZW50LCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlQ2xvc2UgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgbWFuYWdlci5yZW1vdmUoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGhhbmRsZU9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNUcmFuc2l0aW9uIHx8ICFjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBoYW5kbGVDbG9zZSwgaGFzVHJhbnNpdGlvbiwgY2xvc2VBZnRlclRyYW5zaXRpb24sIGhhbmRsZU9wZW5dKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcigpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuXG4gICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUJhY2tkcm9wQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQmFja2Ryb3BDbGljaykge1xuICAgICAgb25CYWNrZHJvcENsaWNrKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVCYWNrZHJvcENsaWNrICYmIG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIFRoZSBoYW5kbGVyIGRvZXNuJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAvL1xuICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgaXMgbWVhbnQgdG8gc3RvcCBkZWZhdWx0IGJlaGF2aW91cnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkVzY2FwZUtleURvd24pIHtcbiAgICAgIG9uRXNjYXBlS2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlRXNjYXBlS2V5RG93bikge1xuICAgICAgLy8gU3dhbGxvdyB0aGUgZXZlbnQsIGluIGNhc2Ugc29tZW9uZSBpcyBsaXN0ZW5pbmcgZm9yIHRoZSBlc2NhcGUga2V5IG9uIHRoZSBib2R5LlxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbmxpbmVTdHlsZSA9IHN0eWxlcyh0aGVtZSB8fCB7XG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSk7XG4gIHZhciBjaGlsZFByb3BzID0ge307XG5cbiAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggfHwgJy0xJztcbiAgfSAvLyBJdCdzIGEgVHJhbnNpdGlvbiBsaWtlIGNvbXBvbmVudFxuXG5cbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICBjaGlsZFByb3BzLm9uRW50ZXIgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRW50ZXIsIGNoaWxkcmVuLnByb3BzLm9uRW50ZXIpO1xuICAgIGNoaWxkUHJvcHMub25FeGl0ZWQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRXhpdGVkLCBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZCk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgcmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIGlubGluZVN0eWxlLnJvb3QsICFvcGVuICYmIGV4aXRlZCA/IGlubGluZVN0eWxlLmhpZGRlbiA6IHt9LCBvdGhlci5zdHlsZSlcbiAgfSksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCYWNrZHJvcENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbGljazogaGFuZGxlQmFja2Ryb3BDbGlja1xuICB9LCBCYWNrZHJvcFByb3BzKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYXBGb2N1cywge1xuICAgIGRpc2FibGVFbmZvcmNlRm9jdXM6IGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGdldERvYzogZ2V0RG9jLFxuICAgIGlzRW5hYmxlZDogaXNUb3BNb2RhbCxcbiAgICBvcGVuOiBvcGVuXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkUHJvcHMpKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIE1vZGFsIHdhaXRzIHVudGlsIGEgbmVzdGVkIFRyYW5zaXRpb24gaXMgY29tcGxldGVkIGJlZm9yZSBjbG9zaW5nLlxuICAgKi9cbiAgY2xvc2VBZnRlclRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBgb25DbG9zZWAuXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIGBvbkNsb3NlYC5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHNjcm9sbCBsb2NrIGJlaGF2aW9yLlxuICAgKi9cbiAgZGlzYWJsZVNjcm9sbExvY2s6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBub3QgcmVuZGVyZWQuXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgTW9kYWwuXG4gICAqL1xuICBrZWVwTW91bnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCxcbiAgICogYGRpc2FibGVFc2NhcGVLZXlEb3duYCBpcyBmYWxzZSBhbmQgdGhlIG1vZGFsIGlzIGluIGZvY3VzLlxuICAgKi9cbiAgb25Fc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICogSXQgc2lnbmFscyB0aGF0IHRoZSBgb3Blbj17dHJ1ZX1gIHByb3AgdG9vayBlZmZlY3QuXG4gICAqXG4gICAqIFRoaXMgcHJvcCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlbW92ZWQgaW4gdjUsIHRoZSByZWYgY2FuIGJlIHVzZWQgaW5zdGVhZC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihFbGVtZW50KVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgdmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BzKHByb3BzLCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIF9wcm9wcyRzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcHJvcHMkc3R5bGUgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJHN0eWxlO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gfHwgdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSB8fCAwLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBcInNjYWxlKFwiLmNvbmNhdCh2YWx1ZSwgXCIsIFwiKS5jb25jYXQoTWF0aC5wb3codmFsdWUsIDIpLCBcIilcIik7XG59XG5cbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH1cbn07XG4vKipcbiAqIFRoZSBHcm93IHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1Rvb2x0aXBdKC9jb21wb25lbnRzL3Rvb2x0aXBzLykgYW5kXG4gKiBbUG9wb3Zlcl0oL2NvbXBvbmVudHMvcG9wb3Zlci8pIGNvbXBvbmVudHMuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbnZhciBHcm93ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3Jvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGRpc2FibGVTdHJpY3RNID0gcHJvcHMuZGlzYWJsZVN0cmljdE1vZGVDb21wYXQsXG4gICAgICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCA9IF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVN0cmljdE0sXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXSk7XG5cbiAgdmFyIHRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBhdXRvVGltZW91dCA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA9IHRoZW1lLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgIWRpc2FibGVTdHJpY3RNb2RlQ29tcGF0O1xuICB2YXIgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGZvcmVpZ25SZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVSZWYgOiB1bmRlZmluZWQsIGZvcmVpZ25SZWYpO1xuXG4gIHZhciBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAobm9kZU9yQXBwZWFyaW5nLCBtYXliZUFwcGVhcmluZykge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfcmVmID0gZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IFtub2RlUmVmLmN1cnJlbnQsIG5vZGVPckFwcGVhcmluZ10gOiBbbm9kZU9yQXBwZWFyaW5nLCBtYXliZUFwcGVhcmluZ10sXG4gICAgICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgbm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgaXNBcHBlYXJpbmcgPSBfcmVmMlsxXTsgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG5cblxuICAgICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyaW5nKTtcbiAgdmFyIGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICByZWZsb3cobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfZ2V0VHJhbnNpdGlvblByb3BzLmRlbGF5O1xuXG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KV0uam9pbignLCcpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICB2YXIgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgdmFyIGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZGVsYXk7XG5cbiAgICB2YXIgZHVyYXRpb247XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzXG4gICAgfSldLmpvaW4oJywnKTtcbiAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBnZXRTY2FsZSgwLjc1KTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG5cbiAgdmFyIGFkZEVuZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIobm9kZU9yTmV4dCwgbWF5YmVOZXh0KSB7XG4gICAgdmFyIG5leHQgPSBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZU9yTmV4dCA6IG1heWJlTmV4dDtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KG5leHQsIGF1dG9UaW1lb3V0LmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBpblByb3AsXG4gICAgbm9kZVJlZjogZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVSZWYgOiB1bmRlZmluZWQsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogYWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgfSwgb3RoZXIpLCBmdW5jdGlvbiAoc3RhdGUsIGNoaWxkUHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGlzIHByb3AgaWYgeW91IGVuY291bnRlciAnRnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgYmUgZ2l2ZW4gcmVmcycsXG4gICAqIHVzZSBgdW5zdGFibGVfY3JlYXRlU3RyaWN0TW9kZVRoZW1lYCxcbiAgICogYW5kIGNhbid0IGZvcndhcmQgdGhlIHJlZiBpbiB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgYW5pbWF0aW9uLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5Hcm93Lm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IEdyb3c7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldFRvcChyZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIHZlcnRpY2FsID09PSAnbnVtYmVyJykge1xuICAgIG9mZnNldCA9IHZlcnRpY2FsO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0IC8gMjtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2JvdHRvbScpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0TGVmdChyZWN0LCBob3Jpem9udGFsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSh0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgcmV0dXJuIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQobiwgXCJweFwiKSA6IG47XG4gIH0pLmpvaW4oJyAnKTtcbn0gLy8gU3VtIHRoZSBzY3JvbGxUb3AgYmV0d2VlbiB0d28gZWxlbWVudHMuXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIGVsZW1lbnQgPSBjaGlsZDtcbiAgdmFyIHNjcm9sbFRvcCA9IDA7XG5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gcGFyZW50KSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICBzY3JvbGxUb3AgKz0gZWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICByZXR1cm4gc2Nyb2xsVG9wO1xufVxuXG5mdW5jdGlvbiBnZXRBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICBwYXBlcjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgLy8gU28gd2Ugc2VlIHRoZSBwb3BvdmVyIHdoZW4gaXQncyBlbXB0eS5cbiAgICAvLyBJdCdzIG1vc3QgbGlrZWx5IG9uIGlzc3VlIG9uIHVzZXJsYW5kLlxuICAgIG1pbldpZHRoOiAxNixcbiAgICBtaW5IZWlnaHQ6IDE2LFxuICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDBcbiAgfVxufTtcbnZhciBQb3BvdmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wb3Zlcihwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBhbmNob3JFbCA9IHByb3BzLmFuY2hvckVsLFxuICAgICAgX3Byb3BzJGFuY2hvck9yaWdpbiA9IHByb3BzLmFuY2hvck9yaWdpbixcbiAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcyRhbmNob3JPcmlnaW4gPT09IHZvaWQgMCA/IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0gOiBfcHJvcHMkYW5jaG9yT3JpZ2luLFxuICAgICAgYW5jaG9yUG9zaXRpb24gPSBwcm9wcy5hbmNob3JQb3NpdGlvbixcbiAgICAgIF9wcm9wcyRhbmNob3JSZWZlcmVuYyA9IHByb3BzLmFuY2hvclJlZmVyZW5jZSxcbiAgICAgIGFuY2hvclJlZmVyZW5jZSA9IF9wcm9wcyRhbmNob3JSZWZlcmVuYyA9PT0gdm9pZCAwID8gJ2FuY2hvckVsJyA6IF9wcm9wcyRhbmNob3JSZWZlcmVuYyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRhaW5lclByb3AgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gOCA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBnZXRDb250ZW50QW5jaG9yRWwgPSBwcm9wcy5nZXRDb250ZW50QW5jaG9yRWwsXG4gICAgICBfcHJvcHMkbWFyZ2luVGhyZXNob2wgPSBwcm9wcy5tYXJnaW5UaHJlc2hvbGQsXG4gICAgICBtYXJnaW5UaHJlc2hvbGQgPSBfcHJvcHMkbWFyZ2luVGhyZXNob2wgPT09IHZvaWQgMCA/IDE2IDogX3Byb3BzJG1hcmdpblRocmVzaG9sLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSA9IHByb3BzLnRyYW5zZm9ybU9yaWdpbixcbiAgICAgIHRyYW5zZm9ybU9yaWdpbiA9IF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSA9PT0gdm9pZCAwID8ge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSA6IF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBHcm93IDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Qcm9wID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gX3Byb3BzJFRyYW5zaXRpb25Qcm9wID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRUcmFuc2l0aW9uUHJvcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJhbmNob3JFbFwiLCBcImFuY2hvck9yaWdpblwiLCBcImFuY2hvclBvc2l0aW9uXCIsIFwiYW5jaG9yUmVmZXJlbmNlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwiZ2V0Q29udGVudEFuY2hvckVsXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7XG5cbiAgdmFyIHBhcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7IC8vIFJldHVybnMgdGhlIHRvcC9sZWZ0IG9mZnNldCBvZiB0aGUgcG9zaXRpb25cbiAgLy8gdG8gYXR0YWNoIHRvIG9uIHRoZSBhbmNob3IgZWxlbWVudCAob3IgYm9keSBpZiBub25lIGlzIHByb3ZpZGVkKVxuXG4gIHZhciBnZXRBbmNob3JPZmZzZXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoY29udGVudEFuY2hvck9mZnNldCkge1xuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JQb3NpdGlvbicpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IG5lZWQgdG8gcHJvdmlkZSBhIGBhbmNob3JQb3NpdGlvbmAgcHJvcCB3aGVuIHVzaW5nICcgKyAnPFBvcG92ZXIgYW5jaG9yUmVmZXJlbmNlPVwiYW5jaG9yUG9zaXRpb25cIiAvPi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYW5jaG9yUG9zaXRpb247XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChhbmNob3JFbCk7IC8vIElmIGFuIGFuY2hvciBlbGVtZW50IHdhc24ndCBwcm92aWRlZCwganVzdCB1c2UgdGhlIHBhcmVudCBib2R5IGVsZW1lbnQgb2YgdGhpcyBQb3BvdmVyXG5cbiAgICB2YXIgYW5jaG9yRWxlbWVudCA9IHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSA/IHJlc29sdmVkQW5jaG9yRWwgOiBvd25lckRvY3VtZW50KHBhcGVyUmVmLmN1cnJlbnQpLmJvZHk7XG4gICAgdmFyIGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBib3ggPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yVmVydGljYWwgPSBjb250ZW50QW5jaG9yT2Zmc2V0ID09PSAwID8gYW5jaG9yT3JpZ2luLnZlcnRpY2FsIDogJ2NlbnRlcic7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AgKyBnZXRPZmZzZXRUb3AoYW5jaG9yUmVjdCwgYW5jaG9yVmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTsgLy8gUmV0dXJucyB0aGUgdmVydGljYWwgb2Zmc2V0IG9mIGlubmVyIGNvbnRlbnQgdG8gYW5jaG9yIHRoZSB0cmFuc2Zvcm0gb24gaWYgcHJvdmlkZWRcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSAwO1xuXG4gICAgaWYgKGdldENvbnRlbnRBbmNob3JFbCAmJiBhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgIHZhciBjb250ZW50QW5jaG9yRWwgPSBnZXRDb250ZW50QW5jaG9yRWwoZWxlbWVudCk7XG5cbiAgICAgIGlmIChjb250ZW50QW5jaG9yRWwgJiYgZWxlbWVudC5jb250YWlucyhjb250ZW50QW5jaG9yRWwpKSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCwgY29udGVudEFuY2hvckVsKTtcbiAgICAgICAgY29udGVudEFuY2hvck9mZnNldCA9IGNvbnRlbnRBbmNob3JFbC5vZmZzZXRUb3AgKyBjb250ZW50QW5jaG9yRWwuY2xpZW50SGVpZ2h0IC8gMiAtIHNjcm9sbFRvcCB8fCAwO1xuICAgICAgfSAvLyAhPSB0aGUgZGVmYXVsdCB2YWx1ZVxuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhbmNob3JPcmlnaW4udmVydGljYWwgIT09ICd0b3AnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgY2FuIG5vdCBjaGFuZ2UgdGhlIGRlZmF1bHQgYGFuY2hvck9yaWdpbi52ZXJ0aWNhbGAgdmFsdWUgJywgJ3doZW4gYWxzbyBwcm92aWRpbmcgdGhlIGBnZXRDb250ZW50QW5jaG9yRWxgIHByb3AgdG8gdGhlIHBvcG92ZXIgY29tcG9uZW50LicsICdPbmx5IHVzZSBvbmUgb2YgdGhlIHR3byBwcm9wcy4nLCAnU2V0IGBnZXRDb250ZW50QW5jaG9yRWxgIHRvIGBudWxsIHwgdW5kZWZpbmVkYCcgKyAnIG9yIGxlYXZlIGBhbmNob3JPcmlnaW4udmVydGljYWxgIHVuY2hhbmdlZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudEFuY2hvck9mZnNldDtcbiAgfSwgW2FuY2hvck9yaWdpbi52ZXJ0aWNhbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRDb250ZW50QW5jaG9yRWxdKTsgLy8gUmV0dXJuIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcbiAgLy8gYW5kIHRha2luZyB0aGUgY29udGVudCBhbmNob3Igb2Zmc2V0IGludG8gYWNjb3VudCBpZiBpbiB1c2VcblxuICB2YXIgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsZW1SZWN0KSB7XG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRpY2FsOiBnZXRPZmZzZXRUb3AoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCkgKyBjb250ZW50QW5jaG9yT2Zmc2V0LFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgdmFyIGdldFBvc2l0aW9uaW5nU3R5bGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIENoZWNrIGlmIHRoZSBwYXJlbnQgaGFzIHJlcXVlc3RlZCBhbmNob3Jpbmcgb24gYW4gaW5uZXIgY29udGVudCBub2RlXG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBnZXRDb250ZW50QW5jaG9yT2Zmc2V0KGVsZW1lbnQpO1xuICAgIHZhciBlbGVtUmVjdCA9IHtcbiAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICAgIH07IC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcblxuICAgIHZhciBlbGVtVHJhbnNmb3JtT3JpZ2luID0gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0LCBjb250ZW50QW5jaG9yT2Zmc2V0KTtcblxuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgICB9O1xuICAgIH0gLy8gR2V0IHRoZSBvZmZzZXQgb2Ygb2YgdGhlIGFuY2hvcmluZyBlbGVtZW50XG5cblxuICAgIHZhciBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoY29udGVudEFuY2hvck9mZnNldCk7IC8vIENhbGN1bGF0ZSBlbGVtZW50IHBvc2l0aW9uaW5nXG5cbiAgICB2YXIgdG9wID0gYW5jaG9yT2Zmc2V0LnRvcCAtIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWw7XG4gICAgdmFyIGxlZnQgPSBhbmNob3JPZmZzZXQubGVmdCAtIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbDtcbiAgICB2YXIgYm90dG9tID0gdG9wICsgZWxlbVJlY3QuaGVpZ2h0O1xuICAgIHZhciByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgdmFyIGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGdldEFuY2hvckVsKGFuY2hvckVsKSk7IC8vIFdpbmRvdyB0aHJlc2hvbGRzIHRha2luZyByZXF1aXJlZCBtYXJnaW4gaW50byBhY2NvdW50XG5cbiAgICB2YXIgaGVpZ2h0VGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgIHZhciB3aWR0aFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoIC0gbWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgdmVydGljYWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG4gICAgaWYgKHRvcCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgdmFyIGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgdmFyIF9kaWZmID0gYm90dG9tIC0gaGVpZ2h0VGhyZXNob2xkO1xuXG4gICAgICB0b3AgLT0gX2RpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IF9kaWZmO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWxlbVJlY3QuaGVpZ2h0ID4gaGVpZ2h0VGhyZXNob2xkICYmIGVsZW1SZWN0LmhlaWdodCAmJiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgcG9wb3ZlciBjb21wb25lbnQgaXMgdG9vIHRhbGwuJywgXCJTb21lIHBhcnQgb2YgaXQgY2FuIG5vdCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4gKFwiLmNvbmNhdChlbGVtUmVjdC5oZWlnaHQgLSBoZWlnaHRUaHJlc2hvbGQsIFwicHgpLlwiKSwgJ1BsZWFzZSBjb25zaWRlciBhZGRpbmcgYSBgbWF4LWhlaWdodGAgdG8gaW1wcm92ZSB0aGUgdXNlci1leHBlcmllbmNlLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9IC8vIENoZWNrIGlmIHRoZSBob3Jpem9udGFsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuXG4gICAgaWYgKGxlZnQgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIHZhciBfZGlmZjIgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuXG4gICAgICBsZWZ0IC09IF9kaWZmMjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjI7XG4gICAgfSBlbHNlIGlmIChyaWdodCA+IHdpZHRoVGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYzID0gcmlnaHQgLSB3aWR0aFRocmVzaG9sZDtcblxuICAgICAgbGVmdCAtPSBfZGlmZjM7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gX2RpZmYzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IFwiXCIuY29uY2F0KE1hdGgucm91bmQodG9wKSwgXCJweFwiKSxcbiAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KE1hdGgucm91bmQobGVmdCksIFwicHhcIiksXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JSZWZlcmVuY2UsIGdldEFuY2hvck9mZnNldCwgZ2V0Q29udGVudEFuY2hvck9mZnNldCwgZ2V0VHJhbnNmb3JtT3JpZ2luLCBtYXJnaW5UaHJlc2hvbGRdKTtcbiAgdmFyIHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50ID0gcGFwZXJSZWYuY3VycmVudDtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbmluZyA9IGdldFBvc2l0aW9uaW5nU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAocG9zaXRpb25pbmcudG9wICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb25pbmcubGVmdCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICB9XG5cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHBvc2l0aW9uaW5nLnRyYW5zZm9ybU9yaWdpbjtcbiAgfSwgW2dldFBvc2l0aW9uaW5nU3R5bGVdKTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZykge1xuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQYXBlclJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcGFwZXJSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG9wZW4gPyB7XG4gICAgICB1cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgICB9XG4gICAgfSA6IG51bGw7XG4gIH0sIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG5cblxuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KGdldEFuY2hvckVsKGFuY2hvckVsKSkuYm9keSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgQmFja2Ryb3BQcm9wczoge1xuICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogb25FeGl0LFxuICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgb25FbnRlcmluZzogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyaW5nLCBUcmFuc2l0aW9uUHJvcHMub25FbnRlcmluZylcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgZWxldmF0aW9uOiBlbGV2YXRpb24sXG4gICAgcmVmOiBoYW5kbGVQYXBlclJlZlxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgY2hpbGRyZW4pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcG92ZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdXBkYXRlUG9zaXRpb24oKSBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdC5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAocHJvcHMub3BlbiAmJiAoIXByb3BzLmFuY2hvclJlZmVyZW5jZSB8fCBwcm9wcy5hbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpKSB7XG4gICAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKHByb3BzLmFuY2hvckVsKTtcblxuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCBcIkl0IHNob3VsZCBiZSBhbiBFbGVtZW50IGluc3RhbmNlIGJ1dCBpdCdzIGBcIi5jb25jYXQocmVzb2x2ZWRBbmNob3JFbCwgXCJgIGluc3RlYWQuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBwb3BvdmVyJ3NcbiAgICogYGFuY2hvckVsYCB3aWxsIGF0dGFjaCB0by4gVGhpcyBpcyBub3QgdXNlZCB3aGVuIHRoZVxuICAgKiBhbmNob3JSZWZlcmVuY2UgaXMgJ2FuY2hvclBvc2l0aW9uJy5cbiAgICpcbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb3NpdGlvbiB0aGF0IG1heSBiZSB1c2VkXG4gICAqIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG9cbiAgICogdGhlIGFwcGxpY2F0aW9uJ3MgY2xpZW50IGFyZWEuXG4gICAqL1xuICBhbmNob3JQb3NpdGlvbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsZWZ0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgdG9wOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB3aGljaCBhbmNob3IgcHJvcCB0byByZWZlciB0byB0byBzZXRcbiAgICogdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yUmVmZXJlbmNlOiBQcm9wVHlwZXMub25lT2YoWydhbmNob3JFbCcsICdhbmNob3JQb3NpdGlvbicsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gb3JkZXIgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEl0J3MgdGhlIG9wcG9zaXRlIG9mIHRoZSBgYW5jaG9yRWxgIHByb3AuXG4gICAqIFRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBhbiBlbGVtZW50IGluc2lkZSB0aGUgcG9wb3Zlci5cbiAgICogSXQncyB1c2VkIHRvIGNvcnJlY3RseSBzY3JvbGwgYW5kIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBwb3NpdGlvbmluZyBzdHJhdGVneSB0cmllcyB0byBtYWtlIHRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IGp1c3QgYWJvdmUgdGhlXG4gICAqIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgZ2V0Q29udGVudEFuY2hvckVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3BvdmVyIGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuc2hhcGUoe1xuICAgIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWZcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9jb21wb25lbnRzL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFRyYW5zaXRpb25gXShodHRwOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbiNUcmFuc2l0aW9uLXByb3BzKSBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInXG59KShQb3BvdmVyKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIExpc3RDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQYWRkaW5nPXtmYWxzZX1gLiAqL1xuICBwYWRkaW5nOiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBkZW5zZS4gKi9cbiAgZGVuc2U6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYSBgc3ViaGVhZGVyYCBpcyBwcm92aWRlZC4gKi9cbiAgc3ViaGVhZGVyOiB7XG4gICAgcGFkZGluZ1RvcDogMFxuICB9XG59O1xudmFyIExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndWwnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkZW5zZSA9IHByb3BzLmRlbnNlLFxuICAgICAgZGVuc2UgPSBfcHJvcHMkZGVuc2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlbnNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVQYWRkaW5nID0gcHJvcHMuZGlzYWJsZVBhZGRpbmcsXG4gICAgICBkaXNhYmxlUGFkZGluZyA9IF9wcm9wcyRkaXNhYmxlUGFkZGluZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBhZGRpbmcsXG4gICAgICBzdWJoZWFkZXIgPSBwcm9wcy5zdWJoZWFkZXIsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXSk7XG5cbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVuc2U6IGRlbnNlXG4gICAgfTtcbiAgfSwgW2RlbnNlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZGVuc2UgJiYgY2xhc3Nlcy5kZW5zZSwgIWRpc2FibGVQYWRkaW5nICYmIGNsYXNzZXMucGFkZGluZywgc3ViaGVhZGVyICYmIGNsYXNzZXMuc3ViaGVhZGVyKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN1YmhlYWRlciwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCB3aWxsIGJlIHVzZWQgZm9yXG4gICAqIHRoZSBsaXN0IGFuZCBsaXN0IGl0ZW1zLlxuICAgKiBUaGUgcHJvcCBpcyBhdmFpbGFibGUgdG8gZGVzY2VuZGFudCBjb21wb25lbnRzIGFzIHRoZSBgZGVuc2VgIGNvbnRleHQuXG4gICAqL1xuICBkZW5zZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdmVydGljYWwgcGFkZGluZyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0J1xufSkoTGlzdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIG5leHRJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBsaXN0LmZpcnN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBpdGVtLm5leHRFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5maXJzdENoaWxkO1xufVxuXG5mdW5jdGlvbiBwcmV2aW91c0l0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IGxpc3QuZmlyc3RDaGlsZCA6IGxpc3QubGFzdENoaWxkO1xuICB9XG5cbiAgaWYgKGl0ZW0gJiYgaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5sYXN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgaWYgKHRleHRDcml0ZXJpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgdGV4dCA9IG5leHRGb2N1cy5pbm5lclRleHQ7XG5cbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGpzZG9tIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lclRleHRcbiAgICB0ZXh0ID0gbmV4dEZvY3VzLnRleHRDb250ZW50O1xuICB9XG5cbiAgdGV4dCA9IHRleHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRleHRDcml0ZXJpYS5yZXBlYXRpbmcpIHtcbiAgICByZXR1cm4gdGV4dFswXSA9PT0gdGV4dENyaXRlcmlhLmtleXNbMF07XG4gIH1cblxuICByZXR1cm4gdGV4dC5pbmRleE9mKHRleHRDcml0ZXJpYS5rZXlzLmpvaW4oJycpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCB0cmF2ZXJzYWxGdW5jdGlvbiwgdGV4dENyaXRlcmlhKSB7XG4gIHZhciB3cmFwcGVkT25jZSA9IGZhbHNlO1xuICB2YXIgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgY3VycmVudEZvY3VzLCBjdXJyZW50Rm9jdXMgPyBkaXNhYmxlTGlzdFdyYXAgOiBmYWxzZSk7XG5cbiAgd2hpbGUgKG5leHRGb2N1cykge1xuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcC5cbiAgICBpZiAobmV4dEZvY3VzID09PSBsaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIGlmICh3cmFwcGVkT25jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZWRPbmNlID0gdHJ1ZTtcbiAgICB9IC8vIFNhbWUgbG9naWMgYXMgdXNlQXV0b2NvbXBsZXRlLmpzXG5cblxuICAgIHZhciBuZXh0Rm9jdXNEaXNhYmxlZCA9IGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPyBmYWxzZSA6IG5leHRGb2N1cy5kaXNhYmxlZCB8fCBuZXh0Rm9jdXMuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJztcblxuICAgIGlmICghbmV4dEZvY3VzLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCAhdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkgfHwgbmV4dEZvY3VzRGlzYWJsZWQpIHtcbiAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIG5leHRGb2N1cywgZGlzYWJsZUxpc3RXcmFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dEZvY3VzLmZvY3VzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNtZW51YnV0dG9uLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgY29tcG9uZW50LiBJZiB5b3VcbiAqIHVzZSBpdCBzZXBhcmF0ZWx5IHlvdSBuZWVkIHRvIG1vdmUgZm9jdXMgaW50byB0aGUgY29tcG9uZW50IG1hbnVhbGx5LiBPbmNlXG4gKiB0aGUgZm9jdXMgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29tcG9uZW50IGl0IGlzIGZ1bGx5IGtleWJvYXJkIGFjY2Vzc2libGUuXG4gKi9cblxudmFyIE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9ucyA9IHByb3BzLmFjdGlvbnMsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgX3Byb3BzJGF1dG9Gb2N1c0l0ZW0gPSBwcm9wcy5hdXRvRm9jdXNJdGVtLFxuICAgICAgYXV0b0ZvY3VzSXRlbSA9IF9wcm9wcyRhdXRvRm9jdXNJdGVtID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvRm9jdXNJdGVtLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9IHByb3BzLmRpc2FibGVkSXRlbXNGb2N1c2FibGUsXG4gICAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gX3Byb3BzJGRpc2FibGVkSXRlbXNGID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRixcbiAgICAgIF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9IHByb3BzLmRpc2FibGVMaXN0V3JhcCxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUxpc3RXcmEsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzZWxlY3RlZE1lbnUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uc1wiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9Gb2N1c0l0ZW1cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkSXRlbXNGb2N1c2FibGVcIiwgXCJkaXNhYmxlTGlzdFdyYXBcIiwgXCJvbktleURvd25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbGlzdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAga2V5czogW10sXG4gICAgcmVwZWF0aW5nOiB0cnVlLFxuICAgIHByZXZpb3VzS2V5TWF0Y2hlZDogdHJ1ZSxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGxpc3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXI6IGZ1bmN0aW9uIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGNvbnRhaW5lckVsZW1lbnQsIHRoZW1lKSB7XG4gICAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAgIC8vIG9mIHRoZSBtZW51LlxuICAgICAgICB2YXIgbm9FeHBsaWNpdFdpZHRoID0gIWxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aDtcblxuICAgICAgICBpZiAoY29udGFpbmVyRWxlbWVudC5jbGllbnRIZWlnaHQgPCBsaXN0UmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0ICYmIG5vRXhwbGljaXRXaWR0aCkge1xuICAgICAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gXCJcIi5jb25jYXQoZ2V0U2Nyb2xsYmFyU2l6ZSh0cnVlKSwgXCJweFwiKTtcbiAgICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGVbdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzY3JvbGxiYXJTaXplO1xuICAgICAgICAgIGxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNjcm9sbGJhclNpemUsIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIHZhciBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIHZhciBrZXkgPSBldmVudC5rZXk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9IC0gd2lsbCBhbHdheXMgYmUgZGVmaW5lZCBzaW5jZSB3ZSBhcmUgaW4gYSBrZXlkb3duIGhhbmRsZXJcbiAgICAgKiBhdHRhY2hlZCB0byBhbiBlbGVtZW50LiBBIGtleWRvd24gZXZlbnQgaXMgZWl0aGVyIGRpc3BhdGNoZWQgdG8gdGhlIGFjdGl2ZUVsZW1lbnRcbiAgICAgKiBvciBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC4gT25seSB0aGUgZmlyc3QgY2FzZSB3aWxsXG4gICAgICogdHJpZ2dlciB0aGlzIHNwZWNpZmljIGhhbmRsZXIuXG4gICAgICovXG5cbiAgICB2YXIgY3VycmVudEZvY3VzID0gb3duZXJEb2N1bWVudChsaXN0KS5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIC8vIFByZXZlbnQgc2Nyb2xsIG9mIHRoZSBwYWdlXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgcHJldmlvdXNJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIG51bGwsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnRW5kJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIHZhciBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGN1cnJUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5rZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gY3JpdGVyaWEubGFzdFRpbWUgPiA1MDApIHtcbiAgICAgICAgICBjcml0ZXJpYS5rZXlzID0gW107XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNyaXRlcmlhLnJlcGVhdGluZyAmJiBsb3dlcktleSAhPT0gY3JpdGVyaWEua2V5c1swXSkge1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNyaXRlcmlhLmxhc3RUaW1lID0gY3VyclRpbWU7XG4gICAgICBjcml0ZXJpYS5rZXlzLnB1c2gobG93ZXJLZXkpO1xuICAgICAgdmFyIGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGxpc3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVPd25SZWYsIHJlZik7XG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG5cbiAgdmFyIGFjdGl2ZUl0ZW1JbmRleCA9IC0xOyAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSBhY3RpdmVJdGVtSW5kZXgpIHtcbiAgICAgIHZhciBuZXdDaGlsZFByb3BzID0ge307XG5cbiAgICAgIGlmIChhdXRvRm9jdXNJdGVtKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgdmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdDaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwibWVudVwiLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICB0YWJJbmRleDogYXV0b0ZvY3VzID8gMCA6IC0xXG4gIH0sIG90aGVyKSwgaXRlbXMpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBmb2N1cyB0aGUgZmlyc3QgbWVudWl0ZW0gaWYgYHZhcmlhbnQ9XCJtZW51XCJgIG9yIHNlbGVjdGVkIGl0ZW1cbiAgICogaWYgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAuXG4gICAqL1xuICBhdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBhbGxvdyBmb2N1cyBvbiBkaXNhYmxlZCBpdGVtcy5cbiAgICovXG4gIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgTWVudUxpc3QgZnJvbSAnLi4vTWVudUxpc3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xudmFyIFJUTF9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbnZhciBMVFJfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gIHBhcGVyOiB7XG4gICAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAgIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAgIC8vIHRoZSBtZW51LlxuICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDk2cHgpJyxcbiAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgTGlzdGAgY29tcG9uZW50IHZpYSBgTWVudUxpc3RgLiAqL1xuICBsaXN0OiB7XG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwXG4gIH1cbn07XG52YXIgTWVudSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1c0l0ZW0sXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkTWVudUxpc3RQcm9wcyA9IHByb3BzLk1lbnVMaXN0UHJvcHMsXG4gICAgICBNZW51TGlzdFByb3BzID0gX3Byb3BzJE1lbnVMaXN0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1lbnVMaXN0UHJvcHMsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICBQb3BvdmVyQ2xhc3NlcyA9IHByb3BzLlBvcG92ZXJDbGFzc2VzLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzZWxlY3RlZE1lbnUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW1cIiwgXCJNZW51TGlzdFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGF1dG9Gb2N1c0l0ZW0gPSBhdXRvRm9jdXMgJiYgIWRpc2FibGVBdXRvRm9jdXNJdGVtICYmIG9wZW47XG4gIHZhciBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250ZW50QW5jaG9yUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBnZXRDb250ZW50QW5jaG9yRWwgPSBmdW5jdGlvbiBnZXRDb250ZW50QW5jaG9yRWwoKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRBbmNob3JSZWYuY3VycmVudDtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZykge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUxpc3RLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlTGlzdEtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG5cblxuICB2YXIgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IFwibWVudVwiICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBpdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gYWN0aXZlSXRlbUluZGV4KSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihpbnN0YW5jZSkge1xuICAgICAgICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgICAgICAgY29udGVudEFuY2hvclJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICAgIHNldFJlZihjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcG92ZXIsIF9leHRlbmRzKHtcbiAgICBnZXRDb250ZW50QW5jaG9yRWw6IGdldENvbnRlbnRBbmNob3JFbCxcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIGFuY2hvck9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLCB7XG4gICAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgUGFwZXJQcm9wcy5jbGFzc2VzLCB7XG4gICAgICAgIHJvb3Q6IGNsYXNzZXMucGFwZXJcbiAgICAgIH0pXG4gICAgfSksXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgb25LZXlEb3duOiBoYW5kbGVMaXN0S2V5RG93bixcbiAgICBhY3Rpb25zOiBtZW51TGlzdEFjdGlvbnNSZWYsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgIGF1dG9Gb2N1c0l0ZW06IGF1dG9Gb2N1c0l0ZW0sXG4gICAgdmFyaWFudDogdmFyaWFudFxuICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGlzdCwgTWVudUxpc3RQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBpdGVtcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdC5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgKERlZmF1bHQpIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGlmIG5vIGZvY3VzYWJsZSBjaGlsZCBpcyBmb3VuZC4gRGlzYWJsZWRcbiAgICogY2hpbGRyZW4gYXJlIG5vdCBmb2N1c2FibGUuIElmIHlvdSBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAgZm9jdXMgd2lsbCBiZSBwbGFjZWRcbiAgICogb24gdGhlIHBhcmVudCBtb2RhbCBjb250YWluZXIuIFRoaXMgaGFzIHNldmVyZSBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9uc1xuICAgKiBhbmQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBpZiB5b3UgbWFuYWdlIGZvY3VzIG90aGVyd2lzZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1lbnUgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gb3BlbmluZyB0aGUgbWVudSB3aWxsIG5vdCBmb2N1cyB0aGUgYWN0aXZlIGl0ZW0gYnV0IHRoZSBgW3JvbGU9XCJtZW51XCJdYFxuICAgKiB1bmxlc3MgYGF1dG9Gb2N1c2AgaXMgYWxzbyBzZXQgdG8gYGZhbHNlYC4gTm90IHVzaW5nIHRoZSBkZWZhdWx0IG1lYW5zIG5vdFxuICAgKiBmb2xsb3dpbmcgV0FJLUFSSUEgYXV0aG9yaW5nIHByYWN0aWNlcy4gUGxlYXNlIGJlIGNvbnNpZGVyYXRlIGFib3V0IHBvc3NpYmxlXG4gICAqIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZW50ZXJzLlxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBleGl0cy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS4gVXNlIGBtZW51YCB0byBwcmV2ZW50IHNlbGVjdGVkIGl0ZW1zIGZyb20gaW1wYWN0aW5nIHRoZSBpbml0aWFsIGZvY3VzXG4gICAqIGFuZCB0aGUgdmVydGljYWwgYWxpZ25tZW50IHJlbGF0aXZlIHRvIHRoZSBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1lbnUnXG59KShNZW51KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuXG5mdW5jdGlvbiBhcmVFcXVhbFZhbHVlcyhhLCBiKSB7XG4gIGlmIChfdHlwZW9mKGIpID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkoZGlzcGxheSkge1xuICByZXR1cm4gZGlzcGxheSA9PSBudWxsIHx8IHR5cGVvZiBkaXNwbGF5ID09PSAnc3RyaW5nJyAmJiAhZGlzcGxheS50cmltKCk7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG52YXIgU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBhcmlhTGFiZWwgPSBwcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IHByb3BzLmRpc3BsYXlFbXB0eSxcbiAgICAgIEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXRSZWZQcm9wID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbElkID0gcHJvcHMubGFiZWxJZCxcbiAgICAgIF9wcm9wcyRNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBNZW51UHJvcHMgPSBfcHJvcHMkTWVudVByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uT3BlbiA9IHByb3BzLm9uT3BlbixcbiAgICAgIG9wZW5Qcm9wID0gcHJvcHMub3BlbixcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZW5kZXJWYWx1ZSA9IHByb3BzLnJlbmRlclZhbHVlLFxuICAgICAgX3Byb3BzJFNlbGVjdERpc3BsYXlQID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gX3Byb3BzJFNlbGVjdERpc3BsYXlQID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRTZWxlY3REaXNwbGF5UCxcbiAgICAgIHRhYkluZGV4UHJvcCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBfdXNlQ29udHJvbGxlZCA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSBfc2xpY2VkVG9BcnJheShfdXNlQ29udHJvbGxlZCwgMiksXG4gICAgICB2YWx1ZSA9IF91c2VDb250cm9sbGVkMlswXSxcbiAgICAgIHNldFZhbHVlID0gX3VzZUNvbnRyb2xsZWQyWzFdO1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBkaXNwbGF5Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldERpc3BsYXlOb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9IG51bGwpLFxuICAgICAgaXNPcGVuQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBtZW51TWluV2lkdGhTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBvcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0T3BlblN0YXRlID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgZGlzcGxheU5vZGUuZm9jdXMoKTtcbiAgICAgIH0sXG4gICAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSwgW2Rpc3BsYXlOb2RlLCB2YWx1ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdXRvRm9jdXMgJiYgZGlzcGxheU5vZGUpIHtcbiAgICAgIGRpc3BsYXlOb2RlLmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzLCBkaXNwbGF5Tm9kZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChkaXNwbGF5Tm9kZSkge1xuICAgICAgdmFyIGxhYmVsID0gb3duZXJEb2N1bWVudChkaXNwbGF5Tm9kZSkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG5cbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWQsIGRpc3BsYXlOb2RlXSk7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShvcGVuLCBldmVudCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgfTtcblxuICB2YXIgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pOyAvLyBTdXBwb3J0IGF1dG9maWxsLlxuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9KS5pbmRleE9mKGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWUoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuICAgICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpOyAvLyBQcmVhY3Qgc3VwcG9ydCwgdGFyZ2V0IGlzIHJlYWQgb25seSBwcm9wZXJ0eSBvbiBhIG5hdGl2ZSBldmVudC5cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgdmFyIHZhbGlkS2V5cyA9IFsnICcsICdBcnJvd1VwJywgJ0Fycm93RG93bicsIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBNYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvZXhhbXBsZXMvbGlzdGJveC9saXN0Ym94LWNvbGxhcHNpYmxlLmh0bWxcbiAgICAgICdFbnRlciddO1xuXG4gICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiAoaXNPcGVuQ29udHJvbGxlZCA/IG9wZW5Qcm9wIDogb3BlblN0YXRlKTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTsgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBkZWxldGUgb3RoZXJbJ2FyaWEtaW52YWxpZCddO1xuICB2YXIgZGlzcGxheTtcbiAgdmFyIGRpc3BsYXlTaW5nbGU7XG4gIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgdmFyIGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgIGlmIChyZW5kZXJWYWx1ZSkge1xuICAgICAgZGlzcGxheSA9IHJlbmRlclZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZURpc3BsYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpdGVtcyA9IGNoaWxkcmVuQXJyYXkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGJlIGFuIGFycmF5IHdoZW4gdXNpbmcgdGhlIGBTZWxlY3RgIGNvbXBvbmVudCB3aXRoIGBtdWx0aXBsZWAuXCIgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZWN0ZWQgPSB2YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlNdWx0aXBsZS5wdXNoKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWQgPSBhcmVFcXVhbFZhbHVlcyh2YWx1ZSwgY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZnVuY3Rpb24gb25LZXlVcChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMub25LZXlVcCkge1xuICAgICAgICAgIGNoaWxkLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG5cbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFmb3VuZE1hdGNoICYmICFtdWx0aXBsZSAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGNoaWxkcmVuQXJyYXkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbXCJNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIGBcIi5jb25jYXQodmFsdWUsIFwiYCBmb3IgdGhlIHNlbGVjdCBcIikuY29uY2F0KG5hbWUgPyBcIihuYW1lPVxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiKSBcIikgOiAnJywgXCJjb21wb25lbnQuXCIpLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBcIlRoZSBhdmFpbGFibGUgdmFsdWVzIGFyZSBcIi5jb25jYXQodmFsdWVzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4ICE9IG51bGw7XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiBcImBcIi5jb25jYXQoeCwgXCJgXCIpO1xuICAgICAgICB9KS5qb2luKCcsICcpIHx8ICdcIlwiJywgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2ZvdW5kTWF0Y2gsIGNoaWxkcmVuQXJyYXksIG11bHRpcGxlLCBuYW1lLCB2YWx1ZV0pO1xuICB9XG5cbiAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgZGlzcGxheSA9IG11bHRpcGxlID8gZGlzcGxheU11bHRpcGxlLmpvaW4oJywgJykgOiBkaXNwbGF5U2luZ2xlO1xuICB9IC8vIEF2b2lkIHBlcmZvcm1pbmcgYSBsYXlvdXQgY29tcHV0YXRpb24gaW4gdGhlIHJlbmRlciBtZXRob2QuXG5cblxuICB2YXIgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG5cbiAgaWYgKCFhdXRvV2lkdGggJiYgaXNPcGVuQ29udHJvbGxlZCAmJiBkaXNwbGF5Tm9kZSkge1xuICAgIG1lbnVNaW5XaWR0aCA9IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgdmFyIHRhYkluZGV4O1xuXG4gIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRhYkluZGV4ID0gdGFiSW5kZXhQcm9wO1xuICB9IGVsc2Uge1xuICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgfVxuXG4gIHZhciBidXR0b25JZCA9IFNlbGVjdERpc3BsYXlQcm9wcy5pZCB8fCAobmFtZSA/IFwibXVpLWNvbXBvbmVudC1zZWxlY3QtXCIuY29uY2F0KG5hbWUpIDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICByZWY6IHNldERpc3BsYXlOb2RlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBbbGFiZWxJZCwgYnV0dG9uSWRdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgfHwgdW5kZWZpbmVkLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBvbkZvY3VzXG4gIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgIC8vIFRoZSBpZCBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGExMXlcbiAgICBpZDogYnV0dG9uSWRcbiAgfSksIGlzRW1wdHkoZGlzcGxheSkgP1xuICAvKiNfX1BVUkVfXyovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkgOiBkaXNwbGF5KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByZWY6IGlucHV0UmVmLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubmF0aXZlSW5wdXQsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXNcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGNsYXNzZXNbXCJpY29uXCIuY29uY2F0KGNhcGl0YWxpemUodmFyaWFudCkpXSwgb3BlbiAmJiBjbGFzc2VzLmljb25PcGVuLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwgX2V4dGVuZHMoe1xuICAgIGlkOiBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpLFxuICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IGhhbmRsZUNsb3NlXG4gIH0sIE1lbnVQcm9wcywge1xuICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsYWJlbElkLFxuICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgfSwgTWVudVByb3BzLlBhcGVyUHJvcHMgIT0gbnVsbCA/IE1lbnVQcm9wcy5QYXBlclByb3BzLnN0eWxlIDogbnVsbClcbiAgICB9KVxuICB9KSwgaXRlbXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJbXBlcmF0aXZlIGhhbmRsZSBpbXBsZW1lbnRpbmcgYHsgdmFsdWU6IFQsIG5vZGU6IEhUTUxFbGVtZW50LCBmb2N1cygpOiB2b2lkIH1gXG4gICAqIEVxdWl2YWxlbnQgdG8gYHJlZmBcbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdElucHV0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTmF0aXZlU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXRpdmVTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAvLyBUT0RPIHY1OiBtZXJnZSByb290IGFuZCBzZWxlY3RcbiAgICBjbGFzc2VzLnNlbGVjdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiBpbnB1dFJlZiB8fCByZWZcbiAgfSwgb3RoZXIpKSwgcHJvcHMubXVsdGlwbGUgPyBudWxsIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGNsYXNzZXNbXCJpY29uXCIuY29uY2F0KGNhcGl0YWxpemUodmFyaWFudCkpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZClcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIG5hdGl2ZSBzZWxlY3QgZWxlbWVudC5cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0SW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuL05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgcm9vdGAgY2xhc3MuICovXG4gICAgcm9vdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgc2VsZWN0YCBjbGFzcy4gKi9cbiAgICBzZWxlY3Q6IHtcbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgICAvLyBSZXNldFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAvLyBXaGVuIGludGVyYWN0aW5nIHF1aWNrbHksIHRoZSB0ZXh0IGNhbiBlbmQgdXAgc2VsZWN0ZWQuXG4gICAgICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIC8vIFJlc2V0XG4gICAgICBtaW5XaWR0aDogMTYsXG4gICAgICAvLyBTbyBpdCBkb2Vzbid0IGNvbGxhcHNlLlxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgLy8gU2hvdyB0aGF0IGl0J3Mgbm90IGFuIHRleHQgaW5wdXRcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcblxuICAgICAgfSxcbiAgICAgIC8vIFJlbW92ZSBJRSAxMSBhcnJvd1xuICAgICAgJyY6Oi1tcy1leHBhbmQnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfSxcbiAgICAgICcmW211bHRpcGxlXSc6IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgIH0sXG4gICAgICAnJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbiAgICAgIH0sXG4gICAgICAnJiYnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMjRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gICAgZmlsbGVkOiB7XG4gICAgICAnJiYnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMzJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICAnJiYnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMzJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYHNlbGVjdE1lbnVgIGNsYXNzLiAqL1xuICAgIHNlbGVjdE1lbnU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgLy8gUmVzZXRzIGZvciBtdWx0cGlsZSBzZWxlY3Qgd2l0aCBjaGlwc1xuICAgICAgbWluSGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVxdWlyZWQgZm9yIHNlbGVjdFxcdGV4dC1maWVsZCBoZWlnaHQgY29uc2lzdGVuY3lcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGBkaXNhYmxlZGAgY2xhc3MuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50LiAqL1xuICAgIGljb246IHtcbiAgICAgIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gICAgICAvLyB0byB0aGUgaW5wdXQgYW5kIHRvIHN1cHBvcnQgd3JhcHBpbmcgdGFncy4uXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAnY2FsYyg1MCUgLSAxMnB4KScsXG4gICAgICAvLyBDZW50ZXIgdmVydGljYWxseVxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRG9uJ3QgYmxvY2sgcG9pbnRlciBldmVudHMgb24gdGhlIHNlbGVjdCB1bmRlciB0aGUgaWNvbi5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudCBpZiB0aGUgcG9wdXAgaXMgb3Blbi4gKi9cbiAgICBpY29uT3Blbjoge1xuICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBpY29uRmlsbGVkOiB7XG4gICAgICByaWdodDogN1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBpY29uT3V0bGluZWQ6IHtcbiAgICAgIHJpZ2h0OiA3XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB1bmRlcmx5aW5nIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuICovXG4gICAgbmF0aXZlSW5wdXQ6IHtcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgbnVsbCk7XG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGA8U2VsZWN0IG5hdGl2ZSAvPmAgd2l0aCBhIG11Y2ggc21hbGxlciBidW5kbGUgc2l6ZSBmb290cHJpbnQuXG4gKi9cblxudmFyIE5hdGl2ZVNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0ID0gX3Byb3BzJGlucHV0ID09PSB2b2lkIDAgPyBkZWZhdWx0SW5wdXQgOiBfcHJvcHMkaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpbnB1dCwgX2V4dGVuZHMoe1xuICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBOYXRpdmVTZWxlY3RJbnB1dGAuXG4gICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgaW5wdXRDb21wb25lbnQ6IE5hdGl2ZVNlbGVjdElucHV0LFxuICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICBJY29uQ29tcG9uZW50OiBJY29uQ29tcG9uZW50LFxuICAgICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgICB0eXBlOiB1bmRlZmluZWRcbiAgICB9LCBpbnB1dFByb3BzLCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5OYXRpdmVTZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCdcbn0pKE5hdGl2ZVNlbGVjdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lcmdlQ2xhc3NlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJy4vU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgeyBzdHlsZXMgYXMgbmF0aXZlU2VsZWN0U3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdCc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gbmF0aXZlU2VsZWN0U3R5bGVzO1xuXG52YXIgX3JlZiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBudWxsKTtcblxudmFyIF9yZWYyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmlsbGVkSW5wdXQsIG51bGwpO1xuXG52YXIgU2VsZWN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhdXRvV2lkdGggPSBwcm9wcy5hdXRvV2lkdGgsXG4gICAgICBhdXRvV2lkdGggPSBfcHJvcHMkYXV0b1dpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvV2lkdGgsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZGlzcGxheUVtcHR5ID0gcHJvcHMuZGlzcGxheUVtcHR5LFxuICAgICAgZGlzcGxheUVtcHR5ID0gX3Byb3BzJGRpc3BsYXlFbXB0eSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzcGxheUVtcHR5LFxuICAgICAgX3Byb3BzJEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IF9wcm9wcyRJY29uQ29tcG9uZW50ID09PSB2b2lkIDAgPyBBcnJvd0Ryb3BEb3duSWNvbiA6IF9wcm9wcyRJY29uQ29tcG9uZW50LFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIGlucHV0ID0gcHJvcHMuaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBsYWJlbElkID0gcHJvcHMubGFiZWxJZCxcbiAgICAgIF9wcm9wcyRsYWJlbFdpZHRoID0gcHJvcHMubGFiZWxXaWR0aCxcbiAgICAgIGxhYmVsV2lkdGggPSBfcHJvcHMkbGFiZWxXaWR0aCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRsYWJlbFdpZHRoLFxuICAgICAgTWVudVByb3BzID0gcHJvcHMuTWVudVByb3BzLFxuICAgICAgX3Byb3BzJG11bHRpcGxlID0gcHJvcHMubXVsdGlwbGUsXG4gICAgICBtdWx0aXBsZSA9IF9wcm9wcyRtdWx0aXBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlwbGUsXG4gICAgICBfcHJvcHMkbmF0aXZlID0gcHJvcHMubmF0aXZlLFxuICAgICAgbmF0aXZlID0gX3Byb3BzJG5hdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbmF0aXZlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHJlbmRlclZhbHVlID0gcHJvcHMucmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHMgPSBwcm9wcy5TZWxlY3REaXNwbGF5UHJvcHMsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50UHJvcHMgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpZFwiLCBcImlucHV0XCIsIFwiaW5wdXRQcm9wc1wiLCBcImxhYmVsXCIsIFwibGFiZWxJZFwiLCBcImxhYmVsV2lkdGhcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgaW5wdXRDb21wb25lbnQgPSBuYXRpdmUgPyBOYXRpdmVTZWxlY3RJbnB1dCA6IFNlbGVjdElucHV0O1xuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICB2YXIgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wcztcbiAgdmFyIElucHV0Q29tcG9uZW50ID0gaW5wdXQgfHwge1xuICAgIHN0YW5kYXJkOiBfcmVmLFxuICAgIG91dGxpbmVkOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsaW5lZElucHV0LCB7XG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoXG4gICAgfSksXG4gICAgZmlsbGVkOiBfcmVmMlxuICB9W3ZhcmlhbnRdO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBTZWxlY3RJbnB1dGAuXG4gICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgbXVsdGlwbGU6IG11bHRpcGxlXG4gICAgfSwgbmF0aXZlID8ge1xuICAgICAgaWQ6IGlkXG4gICAgfSA6IHtcbiAgICAgIGF1dG9XaWR0aDogYXV0b1dpZHRoLFxuICAgICAgZGlzcGxheUVtcHR5OiBkaXNwbGF5RW1wdHksXG4gICAgICBsYWJlbElkOiBsYWJlbElkLFxuICAgICAgTWVudVByb3BzOiBNZW51UHJvcHMsXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgb25PcGVuOiBvbk9wZW4sXG4gICAgICBvcGVuOiBvcGVuLFxuICAgICAgcmVuZGVyVmFsdWU6IHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlkOiBpZFxuICAgICAgfSwgU2VsZWN0RGlzcGxheVByb3BzKVxuICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IGlucHV0UHJvcHMgPyBtZXJnZUNsYXNzZXMoe1xuICAgICAgICBiYXNlQ2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgbmV3Q2xhc3NlczogaW5wdXRQcm9wcy5jbGFzc2VzLFxuICAgICAgICBDb21wb25lbnQ6IFNlbGVjdFxuICAgICAgfSkgOiBjbGFzc2VzXG4gICAgfSwgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgTWVudUl0ZW1gIHdoZW4gYG5hdGl2ZWAgaXMgZmFsc2UgYW5kIGBvcHRpb25gIHdoZW4gYG5hdGl2ZWAgaXMgdHJ1ZS5cbiAgICpcbiAgICog4pqg77iPVGhlIGBNZW51SXRlbWAgZWxlbWVudHMgKiptdXN0KiogYmUgZGlyZWN0IGRlc2NlbmRhbnRzIHdoZW4gYG5hdGl2ZWAgaXMgZmFsc2UuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZhbHVlIGlzIGRpc3BsYXllZCBldmVuIGlmIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gZGlzcGxheSBhIG1lYW5pbmdmdWwgdmFsdWUsIGEgZnVuY3Rpb24gc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgYHJlbmRlclZhbHVlYCBwcm9wIHdoaWNoIHJldHVybnMgdGhlIHZhbHVlIHRvIGJlIGRpc3BsYXllZCB3aGVuIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBgaWRgIG9mIHRoZSB3cmFwcGVyIGVsZW1lbnQgb3IgdGhlIGBzZWxlY3RgIGVsZW1lbnQgd2hlbiBgbmF0aXZlYC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogV2hlbiBgbmF0aXZlYCBpcyBgdHJ1ZWAsIHRoZSBhdHRyaWJ1dGVzIGFyZSBhcHBsaWVkIG9uIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogU2VlIFtPdXRsaW5lZElucHV0I2xhYmVsXSgvYXBpL291dGxpbmVkLWlucHV0LyNwcm9wcylcbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU2VlIFtPdXRsaW5lZElucHV0I2xhYmVsXSgvYXBpL291dGxpbmVkLWlucHV0LyNwcm9wcylcbiAgICovXG4gIGxhYmVsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgYmUgdXNpbmcgYSBuYXRpdmUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIG5hdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQgd2hlbiBgbmF0aXZlYCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGBzZWxlY3RgIG9wZW4gc3RhdGUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBUaGlzIHByb3AgaXMgcmVxdWlyZWQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICogU2V0IHRvIGFuIGVtcHR5IHN0cmluZyBgJydgIGlmIHlvdSBkb24ndCB3YW50IGFueSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgaXQgbXVzdCBoYXZlIHJlZmVyZW5jZSBlcXVhbGl0eSB3aXRoIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG11c3QgbWF0Y2ggd2l0aCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnXG59KShTZWxlY3QpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJy4uL0lucHV0TGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtSGVscGVyVGV4dCBmcm9tICcuLi9Gb3JtSGVscGVyVGV4dCc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL1NlbGVjdCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG52YXIgdmFyaWFudENvbXBvbmVudCA9IHtcbiAgc3RhbmRhcmQ6IElucHV0LFxuICBmaWxsZWQ6IEZpbGxlZElucHV0LFxuICBvdXRsaW5lZDogT3V0bGluZWRJbnB1dFxufTtcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7fVxufTtcbi8qKlxuICogVGhlIGBUZXh0RmllbGRgIGlzIGEgY29udmVuaWVuY2Ugd3JhcHBlciBmb3IgdGhlIG1vc3QgY29tbW9uIGNhc2VzICg4MCUpLlxuICogSXQgY2Fubm90IGJlIGFsbCB0aGluZ3MgdG8gYWxsIHBlb3BsZSwgb3RoZXJ3aXNlIHRoZSBBUEkgd291bGQgZ3JvdyBvdXQgb2YgY29udHJvbC5cbiAqXG4gKiAjIyBBZHZhbmNlZCBDb25maWd1cmF0aW9uXG4gKlxuICogSXQncyBpbXBvcnRhbnQgdG8gdW5kZXJzdGFuZCB0aGF0IHRoZSB0ZXh0IGZpZWxkIGlzIGEgc2ltcGxlIGFic3RyYWN0aW9uXG4gKiBvbiB0b3Agb2YgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0Zvcm1Db250cm9sXSgvYXBpL2Zvcm0tY29udHJvbC8pXG4gKiAtIFtJbnB1dExhYmVsXSgvYXBpL2lucHV0LWxhYmVsLylcbiAqIC0gW0ZpbGxlZElucHV0XSgvYXBpL2ZpbGxlZC1pbnB1dC8pXG4gKiAtIFtPdXRsaW5lZElucHV0XSgvYXBpL291dGxpbmVkLWlucHV0LylcbiAqIC0gW0lucHV0XSgvYXBpL2lucHV0LylcbiAqIC0gW0Zvcm1IZWxwZXJUZXh0XSgvYXBpL2Zvcm0taGVscGVyLXRleHQvKVxuICpcbiAqIElmIHlvdSB3aXNoIHRvIGFsdGVyIHRoZSBwcm9wcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHlvdSBjYW4gZG8gc28gYXMgZm9sbG93czpcbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IGlucHV0UHJvcHMgPSB7XG4gKiAgIHN0ZXA6IDMwMCxcbiAqIH07XG4gKlxuICogcmV0dXJuIDxUZXh0RmllbGQgaWQ9XCJ0aW1lXCIgdHlwZT1cInRpbWVcIiBpbnB1dFByb3BzPXtpbnB1dFByb3BzfSAvPjtcbiAqIGBgYFxuICpcbiAqIEZvciBhZHZhbmNlZCBjYXNlcywgcGxlYXNlIGxvb2sgYXQgdGhlIHNvdXJjZSBvZiBUZXh0RmllbGQgYnkgY2xpY2tpbmcgb24gdGhlXG4gKiBcIkVkaXQgdGhpcyBwYWdlXCIgYnV0dG9uIGFib3ZlLiBDb25zaWRlciBlaXRoZXI6XG4gKlxuICogLSB1c2luZyB0aGUgdXBwZXIgY2FzZSBwcm9wcyBmb3IgcGFzc2luZyB2YWx1ZXMgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudHNcbiAqIC0gdXNpbmcgdGhlIHVuZGVybHlpbmcgY29tcG9uZW50cyBkaXJlY3RseSBhcyBzaG93biBpbiB0aGUgZGVtb3NcbiAqL1xuXG52YXIgVGV4dEZpZWxkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dEZpZWxkKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIF9wcm9wcyRhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBhdXRvRm9jdXMgPSBfcHJvcHMkYXV0b0ZvY3VzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgRm9ybUhlbHBlclRleHRQcm9wcyA9IHByb3BzLkZvcm1IZWxwZXJUZXh0UHJvcHMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgaGVscGVyVGV4dCA9IHByb3BzLmhlbHBlclRleHQsXG4gICAgICBoaWRkZW5MYWJlbCA9IHByb3BzLmhpZGRlbkxhYmVsLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIElucHV0TGFiZWxQcm9wcyA9IHByb3BzLklucHV0TGFiZWxQcm9wcyxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyA9IHByb3BzLklucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyID0gcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICBfcHJvcHMkcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIHJlcXVpcmVkID0gX3Byb3BzJHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRyZXF1aXJlZCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBfcHJvcHMkc2VsZWN0ID0gcHJvcHMuc2VsZWN0LFxuICAgICAgc2VsZWN0ID0gX3Byb3BzJHNlbGVjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2VsZWN0LFxuICAgICAgU2VsZWN0UHJvcHMgPSBwcm9wcy5TZWxlY3RQcm9wcyxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJpZFwiLCBcIklucHV0TGFiZWxQcm9wc1wiLCBcImlucHV0UHJvcHNcIiwgXCJJbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbFwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRm9jdXNcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlcXVpcmVkXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJzZWxlY3RcIiwgXCJTZWxlY3RQcm9wc1wiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHNlbGVjdCAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgY2hpbGRyZW5gIG11c3QgYmUgcGFzc2VkIHdoZW4gdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCB3aXRoIGBzZWxlY3RgLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBJbnB1dE1vcmUgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgIGlmIChJbnB1dExhYmVsUHJvcHMgJiYgdHlwZW9mIElucHV0TGFiZWxQcm9wcy5zaHJpbmsgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBJbnB1dE1vcmUubm90Y2hlZCA9IElucHV0TGFiZWxQcm9wcy5zaHJpbms7XG4gICAgfVxuXG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgX0lucHV0TGFiZWxQcm9wcyRyZXF1O1xuXG4gICAgICB2YXIgZGlzcGxheVJlcXVpcmVkID0gKF9JbnB1dExhYmVsUHJvcHMkcmVxdSA9IElucHV0TGFiZWxQcm9wcyA9PT0gbnVsbCB8fCBJbnB1dExhYmVsUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IElucHV0TGFiZWxQcm9wcy5yZXF1aXJlZCkgIT09IG51bGwgJiYgX0lucHV0TGFiZWxQcm9wcyRyZXF1ICE9PSB2b2lkIDAgPyBfSW5wdXRMYWJlbFByb3BzJHJlcXUgOiByZXF1aXJlZDtcbiAgICAgIElucHV0TW9yZS5sYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBsYWJlbCwgZGlzcGxheVJlcXVpcmVkICYmIFwiXFx4QTAqXCIpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxlY3QpIHtcbiAgICAvLyB1bnNldCBkZWZhdWx0cyBmcm9tIHRleHRib3ggaW5wdXRzXG4gICAgaWYgKCFTZWxlY3RQcm9wcyB8fCAhU2VsZWN0UHJvcHMubmF0aXZlKSB7XG4gICAgICBJbnB1dE1vcmUuaWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgSW5wdXRNb3JlWydhcmlhLWRlc2NyaWJlZGJ5J10gPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1oZWxwZXItdGV4dFwiKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGlucHV0TGFiZWxJZCA9IGxhYmVsICYmIGlkID8gXCJcIi5jb25jYXQoaWQsIFwiLWxhYmVsXCIpIDogdW5kZWZpbmVkO1xuICB2YXIgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICB2YXIgSW5wdXRFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcm93czogcm93cyxcbiAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlkOiBpZCxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWYsXG4gICAgb25CbHVyOiBvbkJsdXIsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNcbiAgfSwgSW5wdXRNb3JlLCBJbnB1dFByb3BzKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGVycm9yOiBlcnJvcixcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbDogaGlkZGVuTGFiZWwsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH0sIG90aGVyKSwgbGFiZWwgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRMYWJlbCwgX2V4dGVuZHMoe1xuICAgIGh0bWxGb3I6IGlkLFxuICAgIGlkOiBpbnB1dExhYmVsSWRcbiAgfSwgSW5wdXRMYWJlbFByb3BzKSwgbGFiZWwpLCBzZWxlY3QgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGlkOiBpZCxcbiAgICBsYWJlbElkOiBpbnB1dExhYmVsSWQsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlucHV0OiBJbnB1dEVsZW1lbnRcbiAgfSwgU2VsZWN0UHJvcHMpLCBjaGlsZHJlbikgOiBJbnB1dEVsZW1lbnQsIGhlbHBlclRleHQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUhlbHBlclRleHQsIF9leHRlbmRzKHtcbiAgICBpZDogaGVscGVyVGV4dElkXG4gIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMpLCBoZWxwZXJUZXh0KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BGb3JtSGVscGVyVGV4dGBdKC9hcGkvZm9ybS1oZWxwZXItdGV4dC8pIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWxwZXIgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgaGVscGVyVGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIHByb3AgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BJbnB1dExhYmVsYF0oL2FwaS9pbnB1dC1sYWJlbC8pIGVsZW1lbnQuXG4gICAqL1xuICBJbnB1dExhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgSW5wdXQgZWxlbWVudC5cbiAgICogSXQgd2lsbCBiZSBhIFtgRmlsbGVkSW5wdXRgXSgvYXBpL2ZpbGxlZC1pbnB1dC8pLFxuICAgKiBbYE91dGxpbmVkSW5wdXRgXSgvYXBpL291dGxpbmVkLWlucHV0Lykgb3IgW2BJbnB1dGBdKC9hcGkvaW5wdXQvKVxuICAgKiBjb21wb25lbnQgZGVwZW5kaW5nIG9uIHRoZSBgdmFyaWFudGAgcHJvcCB2YWx1ZS5cbiAgICovXG4gIElucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgY29udGVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgYXMgcmVxdWlyZWQgYW5kIHRoZSBgaW5wdXRgIGVsZW1lbnRgIHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudCB3aGlsZSBwYXNzaW5nIHRoZSBJbnB1dCBlbGVtZW50IHRvIGBTZWxlY3RgIGFzIGBpbnB1dGAgcGFyYW1ldGVyLlxuICAgKiBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgeW91IG11c3QgcGFzcyB0aGUgb3B0aW9ucyBvZiB0aGUgc2VsZWN0IGFzIGNoaWxkcmVuLlxuICAgKi9cbiAgc2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTZWxlY3RgXSgvYXBpL3NlbGVjdC8pIGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHRleHQgZmllbGQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xufSkoVGV4dEZpZWxkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIChub3JtYWxseSByb290KSBgY29tcG9uZW50YCBlbGVtZW50LiBNYXkgYmUgd3JhcHBlZCBieSBhIGBjb250YWluZXJgLiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZ1RvcDogOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDgsXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICAgIH0sXG4gICAgICAnJiRzZWxlY3RlZCwgJiRzZWxlY3RlZDpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb250YWluZXJgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgJ3MgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAgcHJvcCBpZiBgYnV0dG9uPXt0cnVlfWAuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY29tcG9uZW50YCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXZpZGVyPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBidXR0b249e3RydWV9YC4gKi9cbiAgICBidXR0b246IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIHNlY29uZGFyeUFjdGlvbjoge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogVXNlcyBhbiBhZGRpdGlvbmFsIGNvbnRhaW5lciBjb21wb25lbnQgaWYgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAqL1xuXG52YXIgTGlzdEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBhbGlnbkl0ZW1zID0gX3Byb3BzJGFsaWduSXRlbXMgPT09IHZvaWQgMCA/ICdjZW50ZXInIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgX3Byb3BzJGJ1dHRvbiA9IHByb3BzLmJ1dHRvbixcbiAgICAgIGJ1dHRvbiA9IF9wcm9wcyRidXR0b24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGJ1dHRvbixcbiAgICAgIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJENvbnRhaW5lckNvbXBvID0gcHJvcHMuQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgQ29udGFpbmVyQ29tcG9uZW50ID0gX3Byb3BzJENvbnRhaW5lckNvbXBvID09PSB2b2lkIDAgPyAnbGknIDogX3Byb3BzJENvbnRhaW5lckNvbXBvLFxuICAgICAgX3Byb3BzJENvbnRhaW5lclByb3BzID0gcHJvcHMuQ29udGFpbmVyUHJvcHM7XG4gIF9wcm9wcyRDb250YWluZXJQcm9wcyA9IF9wcm9wcyRDb250YWluZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkQ29udGFpbmVyUHJvcHM7XG5cbiAgdmFyIENvbnRhaW5lckNsYXNzTmFtZSA9IF9wcm9wcyRDb250YWluZXJQcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb250YWluZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMkQ29udGFpbmVyUHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICBfcHJvcHMkZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRlbnNlID0gX3Byb3BzJGRlbnNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkZGl2aWRlciA9IHByb3BzLmRpdmlkZXIsXG4gICAgICBkaXZpZGVyID0gX3Byb3BzJGRpdmlkZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpdmlkZXIsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXZpZGVyXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIHZhciBjaGlsZENvbnRleHQgPSB7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtczogYWxpZ25JdGVtc1xuICB9O1xuICB2YXIgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICB2YXIgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG4gIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0SXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZU93blJlZiwgcmVmKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGlsZENvbnRleHQuZGVuc2UgJiYgY2xhc3Nlcy5kZW5zZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycywgZGl2aWRlciAmJiBjbGFzc2VzLmRpdmlkZXIsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGJ1dHRvbiAmJiBjbGFzc2VzLmJ1dHRvbiwgYWxpZ25JdGVtcyAhPT0gXCJjZW50ZXJcIiAmJiBjbGFzc2VzLmFsaWduSXRlbXNGbGV4U3RhcnQsIGhhc1NlY29uZGFyeUFjdGlvbiAmJiBjbGFzc2VzLnNlY29uZGFyeUFjdGlvbiwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIG90aGVyKTtcblxuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnbGknO1xuXG4gIGlmIChidXR0b24pIHtcbiAgICBjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdkaXYnO1xuICAgIGNvbXBvbmVudFByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSk7XG4gICAgQ29tcG9uZW50ID0gQnV0dG9uQmFzZTtcbiAgfVxuXG4gIGlmIChoYXNTZWNvbmRhcnlBY3Rpb24pIHtcbiAgICAvLyBVc2UgZGl2IGJ5IGRlZmF1bHQuXG4gICAgQ29tcG9uZW50ID0gIWNvbXBvbmVudFByb3BzLmNvbXBvbmVudCAmJiAhY29tcG9uZW50UHJvcCA/ICdkaXYnIDogQ29tcG9uZW50OyAvLyBBdm9pZCBuZXN0aW5nIG9mIGxpID4gbGkuXG5cbiAgICBpZiAoQ29udGFpbmVyQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIENvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jb250YWluZXIsIENvbnRhaW5lckNsYXNzTmFtZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIENvbnRhaW5lclByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pLCBjaGlsZHJlbi5wb3AoKSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBjb21wb25lbnRQcm9wcyksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlciddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSB3aWxsIGJlIGEgYnV0dG9uICh1c2luZyBgQnV0dG9uQmFzZWApLiBQcm9wcyBpbnRlbmRlZFxuICAgKiBmb3IgYEJ1dHRvbkJhc2VgIGNhbiB0aGVuIGJlIGFwcGxpZWQgdG8gYExpc3RJdGVtYC5cbiAgICovXG4gIGJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuIElmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pOyAvLyBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maW5kTGFzdEluZGV4KGlzTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pXG5cbiAgICB2YXIgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChpc011aUVsZW1lbnQoY2hpbGQsIFsnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXSkpIHtcbiAgICAgICAgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vICBpcyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbVxuXG5cbiAgICBpZiAoc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IC0xICYmIHNlY29uZGFyeUFjdGlvbkluZGV4ICE9PSBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogWW91IHVzZWQgYW4gZWxlbWVudCBhZnRlciBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi4gJyArICdGb3IgTGlzdEl0ZW0gdG8gZGV0ZWN0IHRoYXQgaXQgaGFzIGEgc2Vjb25kYXJ5IGFjdGlvbiAnICsgJ3lvdSBtdXN0IHBhc3MgaXQgYXMgdGhlIGxhc3QgY2hpbGQgdG8gTGlzdEl0ZW0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0J3MgYSBgbGlgIHdoZW4gYGJ1dHRvbmAgaXMgYGZhbHNlYCBhbmQgYSBgZGl2YCB3aGVuIGBidXR0b25gIGlzIGB0cnVlYC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHRoZSBsYXN0IGNoaWxkLlxuICAgKi9cbiAgQ29udGFpbmVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBjb21wb25lbnQgaWYgdXNlZC5cbiAgICovXG4gIENvbnRhaW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW0nXG59KShMaXN0SXRlbSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1pbldpZHRoOiA1NixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IHdoZW4gdGhlIHBhcmVudCBgTGlzdEl0ZW1gIHVzZXMgYGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgIGFsaWduSXRlbXNGbGV4U3RhcnQ6IHtcbiAgICAgIG1hcmdpblRvcDogOFxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEEgc2ltcGxlIHdyYXBwZXIgdG8gYXBwbHkgYExpc3RgIHN0eWxlcyB0byBhbiBgSWNvbmAgb3IgYFN2Z0ljb25gLlxuICovXG5cbnZhciBMaXN0SXRlbUljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbnRleHQuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIGNsYXNzZXMuYWxpZ25JdGVtc0ZsZXhTdGFydCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1JY29uLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBJY29uYCwgYFN2Z0ljb25gLFxuICAgKiBvciBhIGBAbWF0ZXJpYWwtdWkvaWNvbnNgIFNWRyBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtSWNvbidcbn0pKExpc3RJdGVtSWNvbik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgbWFyZ2luOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MlwiYC4gKi9cbiAgICBib2R5MjogdGhlbWUudHlwb2dyYXBoeS5ib2R5MixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MVwiYC4gKi9cbiAgICBib2R5MTogdGhlbWUudHlwb2dyYXBoeS5ib2R5MSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjYXB0aW9uXCJgLiAqL1xuICAgIGNhcHRpb246IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidXR0b25cImAuICovXG4gICAgYnV0dG9uOiB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMVwiYC4gKi9cbiAgICBoMTogdGhlbWUudHlwb2dyYXBoeS5oMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMlwiYC4gKi9cbiAgICBoMjogdGhlbWUudHlwb2dyYXBoeS5oMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoM1wiYC4gKi9cbiAgICBoMzogdGhlbWUudHlwb2dyYXBoeS5oMyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNFwiYC4gKi9cbiAgICBoNDogdGhlbWUudHlwb2dyYXBoeS5oNCxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNVwiYC4gKi9cbiAgICBoNTogdGhlbWUudHlwb2dyYXBoeS5oNSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNlwiYC4gKi9cbiAgICBoNjogdGhlbWUudHlwb2dyYXBoeS5oNixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTFcImAuICovXG4gICAgc3VidGl0bGUxOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTJcImAuICovXG4gICAgc3VidGl0bGUyOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdmVybGluZVwiYC4gKi9cbiAgICBvdmVybGluZTogdGhlbWUudHlwb2dyYXBoeS5vdmVybGluZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzck9ubHlcImAuIE9ubHkgYWNjZXNzaWJsZSB0byBzY3JlZW4gcmVhZGVycy4gKi9cbiAgICBzck9ubHk6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJqdXN0aWZ5XCJgLiAqL1xuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbm93cmFwPXt0cnVlfWAuICovXG4gICAgbm9XcmFwOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBndXR0ZXJCb3R0b209e3RydWV9YC4gKi9cbiAgICBndXR0ZXJCb3R0b206IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFyYWdyYXBoPXt0cnVlfWAuICovXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRQcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRTZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImlubGluZVwiYC4gKi9cbiAgICBkaXNwbGF5SW5saW5lOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiYmxvY2tcImAuICovXG4gICAgZGlzcGxheUJsb2NrOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0VmFyaWFudE1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnXG59O1xudmFyIFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2JvZHkxJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgX3Byb3BzJHZhcmlhbnRNYXBwaW5nID0gcHJvcHMudmFyaWFudE1hcHBpbmcsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IF9wcm9wcyR2YXJpYW50TWFwcGluZyA9PT0gdm9pZCAwID8gZGVmYXVsdFZhcmlhbnRNYXBwaW5nIDogX3Byb3BzJHZhcmlhbnRNYXBwaW5nLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzcGxheVwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIE92ZXJyaWRlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGB2YXJpYW50TWFwcGluZ2AgcHJvcC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbn0pKFR5cG9ncmFwaHkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgIG1pbldpZHRoOiAwLFxuICAgIG1hcmdpblRvcDogNCxcbiAgICBtYXJnaW5Cb3R0b206IDRcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFR5cG9ncmFwaHlgIGNvbXBvbmVudHMgaWYgcHJpbWFyeSBhbmQgc2Vjb25kYXJ5IGFyZSBzZXQuICovXG4gIG11bHRpbGluZToge1xuICAgIG1hcmdpblRvcDogNixcbiAgICBtYXJnaW5Cb3R0b206IDZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFR5cG9ncmFwaHlgIGNvbXBvbmVudHMgaWYgZGVuc2UuICovXG4gIGRlbnNlOiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpbnNldD17dHJ1ZX1gLiAqL1xuICBpbnNldDoge1xuICAgIHBhZGRpbmdMZWZ0OiA1NlxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBwcmltYXJ5IGBUeXBvZ3JhcGh5YCBjb21wb25lbnQuICovXG4gIHByaW1hcnk6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWNvbmRhcnkgYFR5cG9ncmFwaHlgIGNvbXBvbmVudC4gKi9cbiAgc2Vjb25kYXJ5OiB7fVxufTtcbnZhciBMaXN0SXRlbVRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbVRleHQocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBfcHJvcHMkaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIGluc2V0ID0gX3Byb3BzJGluc2V0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnNldCxcbiAgICAgIHByaW1hcnlQcm9wID0gcHJvcHMucHJpbWFyeSxcbiAgICAgIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5wcmltYXJ5VHlwb2dyYXBoeVByb3BzLFxuICAgICAgc2Vjb25kYXJ5UHJvcCA9IHByb3BzLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyA9IHByb3BzLnNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcImluc2V0XCIsIFwicHJpbWFyeVwiLCBcInByaW1hcnlUeXBvZ3JhcGh5UHJvcHNcIiwgXCJzZWNvbmRhcnlcIiwgXCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpLFxuICAgICAgZGVuc2UgPSBfUmVhY3QkdXNlQ29udGV4dC5kZW5zZTtcblxuICB2YXIgcHJpbWFyeSA9IHByaW1hcnlQcm9wICE9IG51bGwgPyBwcmltYXJ5UHJvcCA6IGNoaWxkcmVuO1xuXG4gIGlmIChwcmltYXJ5ICE9IG51bGwgJiYgcHJpbWFyeS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHByaW1hcnkgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBkZW5zZSA/ICdib2R5MicgOiAnYm9keTEnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnByaW1hcnksXG4gICAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgcHJpbWFyeVR5cG9ncmFwaHlQcm9wcyksIHByaW1hcnkpO1xuICB9XG5cbiAgdmFyIHNlY29uZGFyeSA9IHNlY29uZGFyeVByb3A7XG5cbiAgaWYgKHNlY29uZGFyeSAhPSBudWxsICYmIHNlY29uZGFyeS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHNlY29uZGFyeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IFwiYm9keTJcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWNvbmRhcnksXG4gICAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9LCBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMpLCBzZWNvbmRhcnkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGRlbnNlICYmIGNsYXNzZXMuZGVuc2UsIGluc2V0ICYmIGNsYXNzZXMuaW5zZXQsIHByaW1hcnkgJiYgc2Vjb25kYXJ5ICYmIGNsYXNzZXMubXVsdGlsaW5lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHByaW1hcnksIHNlY29uZGFyeSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd29uJ3QgYmUgd3JhcHBlZCBieSBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGFsdGVybmF0aXZlIFR5cG9ncmFwaHkgdmFyaWFudCBieSB3cmFwcGluZ1xuICAgKiB0aGUgYGNoaWxkcmVuYCAob3IgYHByaW1hcnlgKSB0ZXh0LCBhbmQgb3B0aW9uYWwgYHNlY29uZGFyeWAgdGV4dFxuICAgKiB3aXRoIHRoZSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd2lsbCBiZSBpbmRlbnRlZC5cbiAgICogVGhpcyBzaG91bGQgYmUgdXNlZCBpZiB0aGVyZSBpcyBubyBsZWZ0IGF2YXRhciBvciBsZWZ0IGljb24uXG4gICAqL1xuICBpbnNldDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHByaW1hcnk6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgcHJpbWFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzZWNvbmRhcnkgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgc2Vjb25kYXJ5OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHNlY29uZGFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnXG59KShMaXN0SXRlbVRleHQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2hlaWdodCcpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBlbnRlcmVkLiAqL1xuICAgIGVudGVyZWQ6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgd2hlbiB0aGUgdHJhbnNpdGlvbiBoYXMgZXhpdGVkIGFuZCBgY29sbGFwc2VkSGVpZ2h0YCAhPSAwcHguICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgb3V0ZXIgd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIHdyYXBwZXI6IHtcbiAgICAgIC8vIEhhY2sgdG8gZ2V0IGNoaWxkcmVuIHdpdGggYSBuZWdhdGl2ZSBtYXJnaW4gdG8gbm90IGZhbHNpZnkgdGhlIGhlaWdodCBjb21wdXRhdGlvbi5cbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW5uZXIgd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIHdyYXBwZXJJbm5lcjoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFRoZSBDb2xsYXBzZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlXG4gKiBbVmVydGljYWwgU3RlcHBlcl0oL2NvbXBvbmVudHMvc3RlcHBlcnMvI3ZlcnRpY2FsLXN0ZXBwZXIpIFN0ZXBDb250ZW50IGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIENvbGxhcHNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29sbGFwc2UocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbGxhcHNlZEhlaWdoID0gcHJvcHMuY29sbGFwc2VkSGVpZ2h0LFxuICAgICAgY29sbGFwc2VkSGVpZ2h0UHJvcCA9IF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9PT0gdm9pZCAwID8gJzBweCcgOiBfcHJvcHMkY29sbGFwc2VkSGVpZ2gsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVTdHJpY3RNID0gcHJvcHMuZGlzYWJsZVN0cmljdE1vZGVDb21wYXQsXG4gICAgICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCA9IF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVN0cmljdE0sXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBUcmFuc2l0aW9uIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbGxhcHNlZEhlaWdodFwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIHRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciB3cmFwcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgYXV0b1RyYW5zaXRpb25EdXJhdGlvbiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgY29sbGFwc2VkSGVpZ2h0ID0gdHlwZW9mIGNvbGxhcHNlZEhlaWdodFByb3AgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQoY29sbGFwc2VkSGVpZ2h0UHJvcCwgXCJweFwiKSA6IGNvbGxhcHNlZEhlaWdodFByb3A7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdGhlbWUudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAhZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBjb2xsYXBzZWRIZWlnaHQ7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuXG4gICAgaWYgKG9uRW50ZXJlZCkge1xuICAgICAgb25FbnRlcmVkKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQod3JhcHBlckhlaWdodCwgXCJweFwiKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciB3cmFwcGVySGVpZ2h0ID0gd3JhcHBlclJlZi5jdXJyZW50ID8gd3JhcHBlclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCA6IDA7XG5cbiAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wczIgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IGNvbGxhcHNlZEhlaWdodDtcblxuICAgIGlmIChvbkV4aXRpbmcpIHtcbiAgICAgIG9uRXhpdGluZyhub2RlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKG5vZGVPck5leHQsIG1heWJlTmV4dCkge1xuICAgIHZhciBuZXh0ID0gZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVPck5leHQgOiBtYXliZU5leHQ7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IGluUHJvcCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNvbnRhaW5lciwgY2xhc3NOYW1lLCB7XG4gICAgICAgICdlbnRlcmVkJzogY2xhc3Nlcy5lbnRlcmVkLFxuICAgICAgICAnZXhpdGVkJzogIWluUHJvcCAmJiBjb2xsYXBzZWRIZWlnaHQgPT09ICcwcHgnICYmIGNsYXNzZXMuaGlkZGVuXG4gICAgICB9W3N0YXRlXSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBtaW5IZWlnaHQ6IGNvbGxhcHNlZEhlaWdodFxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXIsXG4gICAgICByZWY6IHdyYXBwZXJSZWZcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcklubmVyXG4gICAgfSwgY2hpbGRyZW4pKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb2xsYXBzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBub2RlIHRvIGJlIGNvbGxhcHNlZC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciB3aGVuIGNvbGxhcHNlZC5cbiAgICovXG4gIGNvbGxhcHNlZEhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBwYXNzZWQgYENvbXBvbmVudGAuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkNvbGxhcHNlLm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb2xsYXBzZSdcbn0pKENvbGxhcHNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbnZhciBSQURJVVNfU1RBTkRBUkQgPSAxMDtcbnZhciBSQURJVVNfRE9UID0gNDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFkZ2UgYHNwYW5gIGVsZW1lbnQuICovXG4gICAgYmFkZ2U6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfU1RBTkRBUkQgKiAyLFxuICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgIHBhZGRpbmc6ICcwIDZweCcsXG4gICAgICBoZWlnaHQ6IFJBRElVU19TVEFOREFSRCAqIDIsXG4gICAgICBib3JkZXJSYWRpdXM6IFJBRElVU19TVEFOREFSRCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIC8vIFJlbmRlciB0aGUgYmFkZ2Ugb24gdG9wIG9mIHBvdGVudGlhbCByaXBwbGVzLlxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZG90XCJgLiAqL1xuICAgIGRvdDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiBSQURJVVNfRE9ULFxuICAgICAgaGVpZ2h0OiBSQURJVVNfRE9UICogMixcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfRE9UICogMixcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAncmlnaHQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5nbGU6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdyaWdodCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3RhbmdsZToge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ2xlZnQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdFJlY3RhbmdsZToge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAnbGVmdCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlOiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdyaWdodCcgfX0gb3ZlcmxhcD1cImNpcmNsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Ub3BSaWdodENpcmNsZToge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAncmlnaHQnIH19IG92ZXJsYXA9XCJjaXJjbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjbGU6IHtcbiAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICByaWdodDogJzE0JScsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ2xlZnQnIH19IG92ZXJsYXA9XCJjaXJjbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdENpcmNsZToge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgICAgICcmJGludmlzaWJsZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdsZWZ0JyB9fSBvdmVybGFwPVwiY2lyY2xlXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjbGU6IHtcbiAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICBsZWZ0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIHRvIHRoZSBiYWRnZSBgc3BhbmAgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gICAgaW52aXNpYmxlOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xudmFyIEJhZGdlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFkZ2UocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvck9yaWdpbiA9IHByb3BzLmFuY2hvck9yaWdpbixcbiAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcyRhbmNob3JPcmlnaW4gPT09IHZvaWQgMCA/IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xuICB9IDogX3Byb3BzJGFuY2hvck9yaWdpbixcbiAgICAgIGJhZGdlQ29udGVudCA9IHByb3BzLmJhZGdlQ29udGVudCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnRQcm9wID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3NwYW4nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGludmlzaWJsZVByb3AgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBfcHJvcHMkbWF4ID0gcHJvcHMubWF4LFxuICAgICAgbWF4ID0gX3Byb3BzJG1heCA9PT0gdm9pZCAwID8gOTkgOiBfcHJvcHMkbWF4LFxuICAgICAgX3Byb3BzJG92ZXJsYXAgPSBwcm9wcy5vdmVybGFwLFxuICAgICAgb3ZlcmxhcCA9IF9wcm9wcyRvdmVybGFwID09PSB2b2lkIDAgPyAncmVjdGFuZ2xlJyA6IF9wcm9wcyRvdmVybGFwLFxuICAgICAgX3Byb3BzJHNob3daZXJvID0gcHJvcHMuc2hvd1plcm8sXG4gICAgICBzaG93WmVybyA9IF9wcm9wcyRzaG93WmVybyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2hvd1plcm8sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbmNob3JPcmlnaW5cIiwgXCJiYWRnZUNvbnRlbnRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImludmlzaWJsZVwiLCBcIm1heFwiLCBcIm92ZXJsYXBcIiwgXCJzaG93WmVyb1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBpbnZpc2libGUgPSBpbnZpc2libGVQcm9wO1xuXG4gIGlmIChpbnZpc2libGVQcm9wID09IG51bGwgJiYgKGJhZGdlQ29udGVudCA9PT0gMCAmJiAhc2hvd1plcm8gfHwgYmFkZ2VDb250ZW50ID09IG51bGwgJiYgdmFyaWFudCAhPT0gJ2RvdCcpKSB7XG4gICAgaW52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBkaXNwbGF5VmFsdWUgPSAnJztcblxuICBpZiAodmFyaWFudCAhPT0gJ2RvdCcpIHtcbiAgICBkaXNwbGF5VmFsdWUgPSBiYWRnZUNvbnRlbnQgPiBtYXggPyBcIlwiLmNvbmNhdChtYXgsIFwiK1wiKSA6IGJhZGdlQ29udGVudDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmJhZGdlLCBjbGFzc2VzW1wiXCIuY29uY2F0KGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKS5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3JPcmlnaW4udmVydGljYWwpLCBcIn1cIildLCBjbGFzc2VzW1wiYW5jaG9yT3JpZ2luXCIuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yT3JpZ2luLnZlcnRpY2FsKSkuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpKS5jb25jYXQoY2FwaXRhbGl6ZShvdmVybGFwKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBpbnZpc2libGUgJiYgY2xhc3Nlcy5pbnZpc2libGUsIHZhcmlhbnQgPT09ICdkb3QnICYmIGNsYXNzZXMuZG90KVxuICB9LCBkaXNwbGF5VmFsdWUpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFkZ2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGFuY2hvciBvZiB0aGUgYmFkZ2UuXG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAndG9wJ10pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYmFkZ2UuXG4gICAqL1xuICBiYWRnZUNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgYmFkZ2Ugd2lsbCBiZSBhZGRlZCByZWxhdGl2ZSB0byB0aGlzIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdlcnJvcicsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhZGdlIHdpbGwgYmUgaW52aXNpYmxlLlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWF4IGNvdW50IHRvIHNob3cuXG4gICAqL1xuICBtYXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFdyYXBwZWQgc2hhcGUgdGhlIGJhZGdlIHNob3VsZCBvdmVybGFwLlxuICAgKi9cbiAgb3ZlcmxhcDogUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3JlY3RhbmdsZSddKSxcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYmFkZ2UgaXMgaGlkZGVuIHdoZW4gYGJhZGdlQ29udGVudGAgaXMgemVyby5cbiAgICovXG4gIHNob3daZXJvOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZG90JywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJhZGdlJ1xufSkoQmFkZ2UpOyIsImZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplT25lO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbi8vIEFuaW1hdGlvbiBmcmFtZSBiYXNlZCBpbXBsZW1lbnRhdGlvbiBvZiBzZXRUaW1lb3V0LlxuLy8gSW5zcGlyZWQgYnkgSm9lIExhbWJlcnQsIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2pvZWxhbWJlcnQvMTAwMjExNiNmaWxlLXJlcXVlc3R0aW1lb3V0LWpzXG52YXIgaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbic7XG52YXIgbm93ID0gaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbn0gOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufTtcbmZ1bmN0aW9uIGNhbmNlbFRpbWVvdXQodGltZW91dElEKSB7XG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpbWVvdXRJRC5pZCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VGltZW91dChjYWxsYmFjaywgZGVsYXkpIHtcbiAgdmFyIHN0YXJ0ID0gbm93KCk7XG5cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICBpZiAobm93KCkgLSBzdGFydCA+PSBkZWxheSkge1xuICAgICAgY2FsbGJhY2suY2FsbChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dElELmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0aW1lb3V0SUQgPSB7XG4gICAgaWQ6IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKVxuICB9O1xuICByZXR1cm4gdGltZW91dElEO1xufVxuXG52YXIgc2l6ZSA9IC0xOyAvLyBUaGlzIHV0aWxpdHkgY29waWVkIGZyb20gXCJkb20taGVscGVyc1wiIHBhY2thZ2UuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUocmVjYWxjdWxhdGUpIHtcbiAgaWYgKHJlY2FsY3VsYXRlID09PSB2b2lkIDApIHtcbiAgICByZWNhbGN1bGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHNpemUgPT09IC0xIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBzdHlsZSA9IGRpdi5zdHlsZTtcbiAgICBzdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICBzdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgc2l6ZSA9IGRpdi5vZmZzZXRXaWR0aCAtIGRpdi5jbGllbnRXaWR0aDtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn1cbnZhciBjYWNoZWRSVExSZXN1bHQgPSBudWxsOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4vLyBDaHJvbWUgZG9lcyBub3Qgc2VlbSB0byBhZGhlcmU7IGl0cyBzY3JvbGxMZWZ0IHZhbHVlcyBhcmUgcG9zaXRpdmUgKG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbi8vIFNhZmFyaSdzIGVsYXN0aWMgYm91bmNlIG1ha2VzIGRldGVjdGluZyB0aGlzIGV2ZW4gbW9yZSBjb21wbGljYXRlZCB3cnQgcG90ZW50aWFsIGZhbHNlIHBvc2l0aXZlcy5cbi8vIFRoZSBzYWZlc3Qgd2F5IHRvIGNoZWNrIHRoaXMgaXMgdG8gaW50ZW50aW9uYWxseSBzZXQgYSBuZWdhdGl2ZSBvZmZzZXQsXG4vLyBhbmQgdGhlbiB2ZXJpZnkgdGhhdCB0aGUgc3Vic2VxdWVudCBcInNjcm9sbFwiIGV2ZW50IG1hdGNoZXMgdGhlIG5lZ2F0aXZlIG9mZnNldC5cbi8vIElmIGl0IGRvZXMgbm90IG1hdGNoLCB0aGVuIHdlIGNhbiBhc3N1bWUgYSBub24tc3RhbmRhcmQgUlRMIHNjcm9sbCBpbXBsZW1lbnRhdGlvbi5cblxuZnVuY3Rpb24gZ2V0UlRMT2Zmc2V0VHlwZShyZWNhbGN1bGF0ZSkge1xuICBpZiAocmVjYWxjdWxhdGUgPT09IHZvaWQgMCkge1xuICAgIHJlY2FsY3VsYXRlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoY2FjaGVkUlRMUmVzdWx0ID09PSBudWxsIHx8IHJlY2FsY3VsYXRlKSB7XG4gICAgdmFyIG91dGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIG91dGVyU3R5bGUgPSBvdXRlckRpdi5zdHlsZTtcbiAgICBvdXRlclN0eWxlLndpZHRoID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgIG91dGVyU3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICBvdXRlclN0eWxlLmRpcmVjdGlvbiA9ICdydGwnO1xuICAgIHZhciBpbm5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBpbm5lclN0eWxlID0gaW5uZXJEaXYuc3R5bGU7XG4gICAgaW5uZXJTdHlsZS53aWR0aCA9ICcxMDBweCc7XG4gICAgaW5uZXJTdHlsZS5oZWlnaHQgPSAnMTAwcHgnO1xuICAgIG91dGVyRGl2LmFwcGVuZENoaWxkKGlubmVyRGl2KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRGl2KTtcblxuICAgIGlmIChvdXRlckRpdi5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRlckRpdi5zY3JvbGxMZWZ0ID0gMTtcblxuICAgICAgaWYgKG91dGVyRGl2LnNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgICAgY2FjaGVkUlRMUmVzdWx0ID0gJ25lZ2F0aXZlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlZFJUTFJlc3VsdCA9ICdwb3NpdGl2ZS1hc2NlbmRpbmcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXJEaXYpO1xuICAgIHJldHVybiBjYWNoZWRSVExSZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkUlRMUmVzdWx0O1xufVxuXG52YXIgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkgPSBmdW5jdGlvbiBkZWZhdWx0SXRlbUtleShfcmVmKSB7XG4gIHZhciBjb2x1bW5JbmRleCA9IF9yZWYuY29sdW1uSW5kZXgsXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgcm93SW5kZXggPSBfcmVmLnJvd0luZGV4O1xuICByZXR1cm4gcm93SW5kZXggKyBcIjpcIiArIGNvbHVtbkluZGV4O1xufTsgLy8gSW4gREVWIG1vZGUsIHRoaXMgU2V0IGhlbHBzIHVzIG9ubHkgbG9nIGEgd2FybmluZyBvbmNlIHBlciBjb21wb25lbnQgaW5zdGFuY2UuXG4vLyBUaGlzIGF2b2lkcyBzcGFtbWluZyB0aGUgY29uc29sZSBldmVyeSB0aW1lIGEgcmVuZGVyIGhhcHBlbnMuXG5cblxudmFyIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudCA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NPdmVyc2NhblJvd3NDb2x1bW5zQ291bnQgPSBudWxsO1xudmFyIGRldldhcm5pbmdzVGFnTmFtZSA9IG51bGw7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LldlYWtTZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGV2V2FybmluZ3NPdmVyc2NhbkNvdW50ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gICAgZGV2V2FybmluZ3NUYWdOYW1lID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHcmlkQ29tcG9uZW50KF9yZWYyKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRDb2x1bW5PZmZzZXQgPSBfcmVmMi5nZXRDb2x1bW5PZmZzZXQsXG4gICAgICBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZjIuZ2V0Q29sdW1uU3RhcnRJbmRleEZvck9mZnNldCxcbiAgICAgIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXggPSBfcmVmMi5nZXRDb2x1bW5TdG9wSW5kZXhGb3JTdGFydEluZGV4LFxuICAgICAgZ2V0Q29sdW1uV2lkdGggPSBfcmVmMi5nZXRDb2x1bW5XaWR0aCxcbiAgICAgIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0ID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gX3JlZjIuZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgICAgIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCxcbiAgICAgIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCA9IF9yZWYyLmdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudCxcbiAgICAgIGdldFJvd0hlaWdodCA9IF9yZWYyLmdldFJvd0hlaWdodCxcbiAgICAgIGdldFJvd09mZnNldCA9IF9yZWYyLmdldFJvd09mZnNldCxcbiAgICAgIGdldFJvd1N0YXJ0SW5kZXhGb3JPZmZzZXQgPSBfcmVmMi5nZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0Um93U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYyLmdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgsXG4gICAgICBpbml0SW5zdGFuY2VQcm9wcyA9IF9yZWYyLmluaXRJbnN0YW5jZVByb3BzLFxuICAgICAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZSA9IF9yZWYyLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZjIudmFsaWRhdGVQcm9wcztcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShHcmlkLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgICAvLyBBbHdheXMgdXNlIGV4cGxpY2l0IGNvbnN0cnVjdG9yIGZvciBSZWFjdCBjb21wb25lbnRzLlxuICAgIC8vIEl0IHByb2R1Y2VzIGxlc3MgY29kZSBhZnRlciB0cmFuc3BpbGF0aW9uLiAoIzI2KVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gICAgZnVuY3Rpb24gR3JpZChwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9QdXJlQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5faW5zdGFuY2VQcm9wcyA9IGluaXRJbnN0YW5jZVByb3BzKF90aGlzLnByb3BzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICBfdGhpcy5fb3V0ZXJSZWYgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgaW5zdGFuY2U6IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLFxuICAgICAgICBpc1Njcm9sbGluZzogZmFsc2UsXG4gICAgICAgIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICAgICAgc2Nyb2xsTGVmdDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJyA/IF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxMZWZ0IDogMCxcbiAgICAgICAgc2Nyb2xsVG9wOiB0eXBlb2YgX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicgPyBfdGhpcy5wcm9wcy5pbml0aWFsU2Nyb2xsVG9wIDogMCxcbiAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZSxcbiAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246ICdmb3J3YXJkJ1xuICAgICAgfTtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPbkl0ZW1zUmVuZGVyZWQgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LCBvdmVyc2NhblJvd1N0YXJ0SW5kZXgsIG92ZXJzY2FuUm93U3RvcEluZGV4LCB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleCwgdmlzaWJsZUNvbHVtblN0b3BJbmRleCwgdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIHZpc2libGVSb3dTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdGFydEluZGV4OiBvdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5Db2x1bW5TdG9wSW5kZXg6IG92ZXJzY2FuQ29sdW1uU3RvcEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RhcnRJbmRleDogb3ZlcnNjYW5Sb3dTdGFydEluZGV4LFxuICAgICAgICAgIG92ZXJzY2FuUm93U3RvcEluZGV4OiBvdmVyc2NhblJvd1N0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlQ29sdW1uU3RhcnRJbmRleDogdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZUNvbHVtblN0b3BJbmRleDogdmlzaWJsZUNvbHVtblN0b3BJbmRleCxcbiAgICAgICAgICB2aXNpYmxlUm93U3RhcnRJbmRleDogdmlzaWJsZVJvd1N0YXJ0SW5kZXgsXG4gICAgICAgICAgdmlzaWJsZVJvd1N0b3BJbmRleDogdmlzaWJsZVJvd1N0b3BJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25TY3JvbGwgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChzY3JvbGxMZWZ0LCBzY3JvbGxUb3AsIGhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3AsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb246IHZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gdm9pZCAwO1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlID0gZnVuY3Rpb24gKHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNvbHVtbldpZHRoID0gX3RoaXMkcHJvcHMuY29sdW1uV2lkdGgsXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgICAgICByb3dIZWlnaHQgPSBfdGhpcyRwcm9wcy5yb3dIZWlnaHQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgY29sdW1uV2lkdGgsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgZGlyZWN0aW9uLCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIHJvd0hlaWdodCk7XG5cbiAgICAgICAgdmFyIGtleSA9IHJvd0luZGV4ICsgXCI6XCIgKyBjb2x1bW5JbmRleDtcbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgc3R5bGUgPSBpdGVtU3R5bGVDYWNoZVtrZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfb2Zmc2V0ID0gZ2V0Q29sdW1uT2Zmc2V0KF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpO1xuXG4gICAgICAgICAgdmFyIGlzUnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICAgICAgICBpdGVtU3R5bGVDYWNoZVtrZXldID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogX29mZnNldCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IF9vZmZzZXQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6IGdldFJvd09mZnNldChfdGhpcy5wcm9wcywgcm93SW5kZXgsIF90aGlzLl9pbnN0YW5jZVByb3BzKSxcbiAgICAgICAgICAgIGhlaWdodDogZ2V0Um93SGVpZ2h0KF90aGlzLnByb3BzLCByb3dJbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpLFxuICAgICAgICAgICAgd2lkdGg6IGdldENvbHVtbldpZHRoKF90aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKF8sIF9fLCBfX18pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX2V2ZW50JGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgY2xpZW50V2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIHNjcm9sbExlZnQgPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsVG9wID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgc2Nyb2xsV2lkdGggPSBfZXZlbnQkY3VycmVudFRhcmdldC5zY3JvbGxXaWR0aDtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgaWYgKHByZXZTdGF0ZS5zY3JvbGxMZWZ0ID09PSBzY3JvbGxMZWZ0ICYmIHByZXZTdGF0ZS5zY3JvbGxUb3AgPT09IHNjcm9sbFRvcCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uOyAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgLy8gU28gdGhlIHNpbXBsZXN0IHNvbHV0aW9uIGlzIHRvIGRldGVybWluZSB3aGljaCBicm93c2VyIGJlaGF2aW9yIHdlJ3JlIGRlYWxpbmcgd2l0aCwgYW5kIGNvbnZlcnQgYmFzZWQgb24gaXQuXG5cbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkU2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJ3Bvc2l0aXZlLWRlc2NlbmRpbmcnOlxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWRTY3JvbGxMZWZ0ID0gc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBQcmV2ZW50IFNhZmFyaSdzIGVsYXN0aWMgc2Nyb2xsaW5nIGZyb20gY2F1c2luZyB2aXN1YWwgc2hha2luZyB3aGVuIHNjcm9sbGluZyBwYXN0IGJvdW5kcy5cblxuXG4gICAgICAgICAgY2FsY3VsYXRlZFNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjYWxjdWxhdGVkU2Nyb2xsTGVmdCwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCkpO1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkU2Nyb2xsVG9wID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2Nyb2xsVG9wLCBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uOiBwcmV2U3RhdGUuc2Nyb2xsTGVmdCA8IHNjcm9sbExlZnQgPyAnZm9yd2FyZCcgOiAnYmFja3dhcmQnLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdDogY2FsY3VsYXRlZFNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxUb3A6IGNhbGN1bGF0ZWRTY3JvbGxUb3AsXG4gICAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuX291dGVyUmVmU2V0dGVyID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSBfdGhpcy5wcm9wcy5vdXRlclJlZjtcbiAgICAgICAgX3RoaXMuX291dGVyUmVmID0gcmVmO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0ZXJSZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvdXRlclJlZihyZWYpO1xuICAgICAgICB9IGVsc2UgaWYgKG91dGVyUmVmICE9IG51bGwgJiYgdHlwZW9mIG91dGVyUmVmID09PSAnb2JqZWN0JyAmJiBvdXRlclJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgb3V0ZXJSZWYuY3VycmVudCA9IHJlZjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNhbmNlbFRpbWVvdXQoX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSByZXF1ZXN0VGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZywgSVNfU0NST0xMSU5HX0RFQk9VTkNFX0lOVEVSVkFMKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQ2xlYXIgc3R5bGUgY2FjaGUgYWZ0ZXIgc3RhdGUgdXBkYXRlIGhhcyBiZWVuIGNvbW1pdHRlZC5cbiAgICAgICAgICAvLyBUaGlzIHdheSB3ZSBkb24ndCBicmVhayBwdXJlIHNDVSBmb3IgaXRlbXMgdGhhdCBkb24ndCB1c2UgaXNTY3JvbGxpbmcgcGFyYW0uXG4gICAgICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKC0xKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgR3JpZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhbGlkYXRlU2hhcmVkUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBHcmlkLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKF9yZWYzKSB7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IF9yZWYzLnNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3JlZjMuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoc2Nyb2xsTGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAoc2Nyb2xsTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IHByZXZTdGF0ZS5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjcm9sbFRvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Nyb2xsVG9wID0gcHJldlN0YXRlLnNjcm9sbFRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3RhdGUuc2Nyb2xsTGVmdCA9PT0gc2Nyb2xsTGVmdCAmJiBwcmV2U3RhdGUuc2Nyb2xsVG9wID09PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbExlZnQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgICB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbFRvcCA8IHNjcm9sbFRvcCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCdcbiAgICAgICAgfTtcbiAgICAgIH0sIHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdEZWJvdW5jZWQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2Nyb2xsVG9JdGVtID0gZnVuY3Rpb24gc2Nyb2xsVG9JdGVtKF9yZWY0KSB7XG4gICAgICB2YXIgX3JlZjQkYWxpZ24gPSBfcmVmNC5hbGlnbixcbiAgICAgICAgICBhbGlnbiA9IF9yZWY0JGFsaWduID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcmVmNCRhbGlnbixcbiAgICAgICAgICBjb2x1bW5JbmRleCA9IF9yZWY0LmNvbHVtbkluZGV4LFxuICAgICAgICAgIHJvd0luZGV4ID0gX3JlZjQucm93SW5kZXg7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzMi5jb2x1bW5Db3VudCxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczIuaGVpZ2h0LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHMyLnJvd0NvdW50LFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMyLndpZHRoO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcyRzdGF0ZS5zY3JvbGxUb3A7XG4gICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcblxuICAgICAgaWYgKGNvbHVtbkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sdW1uSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5JbmRleCwgY29sdW1uQ291bnQgLSAxKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3dJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJvd0luZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93SW5kZXgsIHJvd0NvdW50IC0gMSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXN0aW1hdGVkVG90YWxIZWlnaHQgPSBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTtcbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFdpZHRoID0gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCh0aGlzLnByb3BzLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gVGhlIHNjcm9sbGJhciBzaXplIHNob3VsZCBiZSBjb25zaWRlcmVkIHdoZW4gc2Nyb2xsaW5nIGFuIGl0ZW0gaW50byB2aWV3LFxuICAgICAgLy8gdG8gZW5zdXJlIGl0J3MgZnVsbHkgdmlzaWJsZS5cbiAgICAgIC8vIEJ1dCB3ZSBvbmx5IG5lZWQgdG8gYWNjb3VudCBmb3IgaXRzIHNpemUgd2hlbiBpdCdzIGFjdHVhbGx5IHZpc2libGUuXG5cbiAgICAgIHZhciBob3Jpem9udGFsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsV2lkdGggPiB3aWR0aCA/IHNjcm9sbGJhclNpemUgOiAwO1xuICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSA9IGVzdGltYXRlZFRvdGFsSGVpZ2h0ID4gaGVpZ2h0ID8gc2Nyb2xsYmFyU2l6ZSA6IDA7XG4gICAgICB0aGlzLnNjcm9sbFRvKHtcbiAgICAgICAgc2Nyb2xsTGVmdDogY29sdW1uSW5kZXggIT09IHVuZGVmaW5lZCA/IGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudCh0aGlzLnByb3BzLCBjb2x1bW5JbmRleCwgYWxpZ24sIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMsIHZlcnRpY2FsU2Nyb2xsYmFyU2l6ZSkgOiBzY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IHJvd0luZGV4ICE9PSB1bmRlZmluZWQgPyBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQodGhpcy5wcm9wcywgcm93SW5kZXgsIGFsaWduLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMsIGhvcml6b250YWxTY3JvbGxiYXJTaXplKSA6IHNjcm9sbFRvcFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbExlZnQgPSBfdGhpcyRwcm9wczMuaW5pdGlhbFNjcm9sbExlZnQsXG4gICAgICAgICAgaW5pdGlhbFNjcm9sbFRvcCA9IF90aGlzJHByb3BzMy5pbml0aWFsU2Nyb2xsVG9wO1xuXG4gICAgICBpZiAodGhpcy5fb3V0ZXJSZWYgIT0gbnVsbCkge1xuICAgICAgICB2YXIgb3V0ZXJSZWYgPSB0aGlzLl9vdXRlclJlZjtcblxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTY3JvbGxMZWZ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBpbml0aWFsU2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFNjcm9sbFRvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlMi5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHN0YXRlMi5zY3JvbGxUb3AsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUyLnNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDtcblxuICAgICAgaWYgKHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgLy8gVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIGFsbCBicm93c2VycyB0aG91Z2ggKGUuZy4gQ2hyb21lIHJlcG9ydHMgdmFsdWVzIGFzIHBvc2l0aXZlLCBtZWFzdXJlZCByZWxhdGl2ZSB0byB0aGUgbGVmdCkuXG4gICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgc3dpdGNoIChnZXRSVExPZmZzZXRUeXBlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YXIgY2xpZW50V2lkdGggPSBvdXRlclJlZi5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCBzY3JvbGxMZWZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHNjcm9sbFRvcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgIGNhbmNlbFRpbWVvdXQodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM0LmNvbHVtbkNvdW50LFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5kaXJlY3Rpb24sXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHM0LmhlaWdodCxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzNC5pbm5lclJlZixcbiAgICAgICAgICBpbm5lckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0LmlubmVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5uZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0LmlubmVyVGFnTmFtZSxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkgOiBfdGhpcyRwcm9wczQkaXRlbUtleSxcbiAgICAgICAgICBvdXRlckVsZW1lbnRUeXBlID0gX3RoaXMkcHJvcHM0Lm91dGVyRWxlbWVudFR5cGUsXG4gICAgICAgICAgb3V0ZXJUYWdOYW1lID0gX3RoaXMkcHJvcHM0Lm91dGVyVGFnTmFtZSxcbiAgICAgICAgICByb3dDb3VudCA9IF90aGlzJHByb3BzNC5yb3dDb3VudCxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzNC5zdHlsZSxcbiAgICAgICAgICB1c2VJc1Njcm9sbGluZyA9IF90aGlzJHByb3BzNC51c2VJc1Njcm9sbGluZyxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzNC53aWR0aDtcbiAgICAgIHZhciBpc1Njcm9sbGluZyA9IHRoaXMuc3RhdGUuaXNTY3JvbGxpbmc7XG5cbiAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIgPSB0aGlzLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpLFxuICAgICAgICAgIGNvbHVtblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0SG9yaXpvbnRhbFJbMF0sXG4gICAgICAgICAgY29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSWzFdO1xuXG4gICAgICB2YXIgX3RoaXMkX2dldFZlcnRpY2FsUmFuID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgcm93U3RhcnRJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhblswXSxcbiAgICAgICAgICByb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW5bMV07XG5cbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50KSB7XG4gICAgICAgIGZvciAodmFyIF9yb3dJbmRleCA9IHJvd1N0YXJ0SW5kZXg7IF9yb3dJbmRleCA8PSByb3dTdG9wSW5kZXg7IF9yb3dJbmRleCsrKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2NvbHVtbkluZGV4ID0gY29sdW1uU3RhcnRJbmRleDsgX2NvbHVtbkluZGV4IDw9IGNvbHVtblN0b3BJbmRleDsgX2NvbHVtbkluZGV4KyspIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goY3JlYXRlRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICAgICAgICBjb2x1bW5JbmRleDogX2NvbHVtbkluZGV4LFxuICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHVzZUlzU2Nyb2xsaW5nID8gaXNTY3JvbGxpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGtleTogaXRlbUtleSh7XG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXg6IF9jb2x1bW5JbmRleCxcbiAgICAgICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICByb3dJbmRleDogX3Jvd0luZGV4LFxuICAgICAgICAgICAgICBzdHlsZTogdGhpcy5fZ2V0SXRlbVN0eWxlKF9yb3dJbmRleCwgX2NvbHVtbkluZGV4KVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIGVzdGltYXRlZFRvdGFsV2lkdGggPSBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoKHRoaXMucHJvcHMsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQob3V0ZXJFbGVtZW50VHlwZSB8fCBvdXRlclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLl9vblNjcm9sbCxcbiAgICAgICAgcmVmOiB0aGlzLl9vdXRlclJlZlNldHRlcixcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgICAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJyxcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICB9LCBzdHlsZSlcbiAgICAgIH0sIGNyZWF0ZUVsZW1lbnQoaW5uZXJFbGVtZW50VHlwZSB8fCBpbm5lclRhZ05hbWUgfHwgJ2RpdicsIHtcbiAgICAgICAgY2hpbGRyZW46IGl0ZW1zLFxuICAgICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGhlaWdodDogZXN0aW1hdGVkVG90YWxIZWlnaHQsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGVzdGltYXRlZFRvdGFsV2lkdGhcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NhbGxQcm9wc0NhbGxiYWNrcyA9IGZ1bmN0aW9uIF9jYWxsUHJvcHNDYWxsYmFja3MoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNS5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvbkl0ZW1zUmVuZGVyZWQgPSBfdGhpcyRwcm9wczUub25JdGVtc1JlbmRlcmVkLFxuICAgICAgICAgIG9uU2Nyb2xsID0gX3RoaXMkcHJvcHM1Lm9uU2Nyb2xsLFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM1LnJvd0NvdW50O1xuXG4gICAgICBpZiAodHlwZW9mIG9uSXRlbXNSZW5kZXJlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoY29sdW1uQ291bnQgPiAwICYmIHJvd0NvdW50ID4gMCkge1xuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0SG9yaXpvbnRhbFIyID0gdGhpcy5fZ2V0SG9yaXpvbnRhbFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICAgICAgX292ZXJzY2FuQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMF0sXG4gICAgICAgICAgICAgIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMV0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RhcnRJbmRleCA9IF90aGlzJF9nZXRIb3Jpem9udGFsUjJbMl0sXG4gICAgICAgICAgICAgIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4ID0gX3RoaXMkX2dldEhvcml6b250YWxSMlszXTtcblxuICAgICAgICAgIHZhciBfdGhpcyRfZ2V0VmVydGljYWxSYW4yID0gdGhpcy5fZ2V0VmVydGljYWxSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5Sb3dTdG9wSW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0VmVydGljYWxSYW4yWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVJvd1N0b3BJbmRleCA9IF90aGlzJF9nZXRWZXJ0aWNhbFJhbjJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhbkNvbHVtblN0YXJ0SW5kZXgsIF9vdmVyc2NhbkNvbHVtblN0b3BJbmRleCwgX292ZXJzY2FuUm93U3RhcnRJbmRleCwgX292ZXJzY2FuUm93U3RvcEluZGV4LCBfdmlzaWJsZUNvbHVtblN0YXJ0SW5kZXgsIF92aXNpYmxlQ29sdW1uU3RvcEluZGV4LCBfdmlzaWJsZVJvd1N0YXJ0SW5kZXgsIF92aXNpYmxlUm93U3RvcEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTMuaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICAgIF9zY3JvbGxMZWZ0ID0gX3RoaXMkc3RhdGUzLnNjcm9sbExlZnQsXG4gICAgICAgICAgICBfc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUzLnNjcm9sbFRvcCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkLFxuICAgICAgICAgICAgX3ZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnZlcnRpY2FsU2Nyb2xsRGlyZWN0aW9uO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsTGVmdCwgX3Njcm9sbFRvcCwgX2hvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sIF92ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiwgX3Njcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZCk7XG4gICAgICB9XG4gICAgfTsgLy8gTGF6aWx5IGNyZWF0ZSBhbmQgY2FjaGUgaXRlbSBzdHlsZXMgd2hpbGUgc2Nyb2xsaW5nLFxuICAgIC8vIFNvIHRoYXQgcHVyZSBjb21wb25lbnQgc0NVIHdpbGwgcHJldmVudCByZS1yZW5kZXJzLlxuICAgIC8vIFdlIG1haW50YWluIHRoaXMgY2FjaGUsIGFuZCBwYXNzIGEgc3R5bGUgcHJvcCByYXRoZXIgdGhhbiBpbmRleCxcbiAgICAvLyBTbyB0aGF0IExpc3QgY2FuIGNsZWFyIGNhY2hlZCBzdHlsZXMgYW5kIGZvcmNlIGl0ZW0gcmUtcmVuZGVyIGlmIG5lY2Vzc2FyeS5cblxuXG4gICAgX3Byb3RvLl9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRIb3Jpem9udGFsUmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbHVtbkNvdW50ID0gX3RoaXMkcHJvcHM2LmNvbHVtbkNvdW50LFxuICAgICAgICAgIG92ZXJzY2FuQ29sdW1uQ291bnQgPSBfdGhpcyRwcm9wczYub3ZlcnNjYW5Db2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvbHVtbnNDb3VudCA9IF90aGlzJHByb3BzNi5vdmVyc2NhbkNvbHVtbnNDb3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM2Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgcm93Q291bnQgPSBfdGhpcyRwcm9wczYucm93Q291bnQ7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGU0Lmhvcml6b250YWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTQuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsTGVmdCA9IF90aGlzJHN0YXRlNC5zY3JvbGxMZWZ0O1xuICAgICAgdmFyIG92ZXJzY2FuQ291bnRSZXNvbHZlZCA9IG92ZXJzY2FuQ29sdW1uQ291bnQgfHwgb3ZlcnNjYW5Db2x1bW5zQ291bnQgfHwgb3ZlcnNjYW5Db3VudCB8fCAxO1xuXG4gICAgICBpZiAoY29sdW1uQ291bnQgPT09IDAgfHwgcm93Q291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0SW5kZXggPSBnZXRDb2x1bW5TdGFydEluZGV4Rm9yT2Zmc2V0KHRoaXMucHJvcHMsIHNjcm9sbExlZnQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsTGVmdCwgdGhpcy5faW5zdGFuY2VQcm9wcyk7IC8vIE92ZXJzY2FuIGJ5IG9uZSBpdGVtIGluIGVhY2ggZGlyZWN0aW9uIHNvIHRoYXQgdGFiL2ZvY3VzIHdvcmtzLlxuICAgICAgLy8gSWYgdGhlcmUgaXNuJ3QgYXQgbGVhc3Qgb25lIGV4dHJhIGl0ZW0sIHRhYiBsb29wcyBiYWNrIGFyb3VuZC5cblxuICAgICAgdmFyIG92ZXJzY2FuQmFja3dhcmQgPSAhaXNTY3JvbGxpbmcgfHwgaG9yaXpvbnRhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBob3Jpem9udGFsU2Nyb2xsRGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50UmVzb2x2ZWQpIDogMTtcbiAgICAgIHJldHVybiBbTWF0aC5tYXgoMCwgc3RhcnRJbmRleCAtIG92ZXJzY2FuQmFja3dhcmQpLCBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFZlcnRpY2FsUmFuZ2VUb1JlbmRlciA9IGZ1bmN0aW9uIF9nZXRWZXJ0aWNhbFJhbmdlVG9SZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5Db3VudCA9IF90aGlzJHByb3BzNy5jb2x1bW5Db3VudCxcbiAgICAgICAgICBvdmVyc2NhbkNvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Sb3dDb3VudCA9IF90aGlzJHByb3BzNy5vdmVyc2NhblJvd0NvdW50LFxuICAgICAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3RoaXMkcHJvcHM3Lm92ZXJzY2FuUm93c0NvdW50LFxuICAgICAgICAgIHJvd0NvdW50ID0gX3RoaXMkcHJvcHM3LnJvd0NvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTUuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgdmVydGljYWxTY3JvbGxEaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZTUudmVydGljYWxTY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGU1LnNjcm9sbFRvcDtcbiAgICAgIHZhciBvdmVyc2NhbkNvdW50UmVzb2x2ZWQgPSBvdmVyc2NhblJvd0NvdW50IHx8IG92ZXJzY2FuUm93c0NvdW50IHx8IG92ZXJzY2FuQ291bnQgfHwgMTtcblxuICAgICAgaWYgKGNvbHVtbkNvdW50ID09PSAwIHx8IHJvd0NvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxUb3AsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsVG9wLCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJyA/IE1hdGgubWF4KDEsIG92ZXJzY2FuQ291bnRSZXNvbHZlZCkgOiAxO1xuICAgICAgdmFyIG92ZXJzY2FuRm9yd2FyZCA9ICFpc1Njcm9sbGluZyB8fCB2ZXJ0aWNhbFNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudFJlc29sdmVkKSA6IDE7XG4gICAgICByZXR1cm4gW01hdGgubWF4KDAsIHN0YXJ0SW5kZXggLSBvdmVyc2NhbkJhY2t3YXJkKSwgTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93Q291bnQgLSAxLCBzdG9wSW5kZXggKyBvdmVyc2NhbkZvcndhcmQpKSwgc3RhcnRJbmRleCwgc3RvcEluZGV4XTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEdyaWQ7XG4gIH0oUHVyZUNvbXBvbmVudCksIF9jbGFzcy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBpdGVtRGF0YTogdW5kZWZpbmVkLFxuICAgIHVzZUlzU2Nyb2xsaW5nOiBmYWxzZVxuICB9LCBfdGVtcDtcbn1cblxudmFyIHZhbGlkYXRlU2hhcmVkUHJvcHMgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWY1LCBfcmVmNikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmNS5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWY1LmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWY1LmhlaWdodCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWY1LmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWY1Lm91dGVyVGFnTmFtZSxcbiAgICAgIG92ZXJzY2FuQ29sdW1uc0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Db2x1bW5zQ291bnQsXG4gICAgICBvdmVyc2NhbkNvdW50ID0gX3JlZjUub3ZlcnNjYW5Db3VudCxcbiAgICAgIG92ZXJzY2FuUm93c0NvdW50ID0gX3JlZjUub3ZlcnNjYW5Sb3dzQ291bnQsXG4gICAgICB3aWR0aCA9IF9yZWY1LndpZHRoO1xuICB2YXIgaW5zdGFuY2UgPSBfcmVmNi5pbnN0YW5jZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygb3ZlcnNjYW5Db3VudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChkZXZXYXJuaW5nc092ZXJzY2FuQ291bnQgJiYgIWRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Db3VudC5hZGQoaW5zdGFuY2UpO1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBvdmVyc2NhbkNvdW50IHByb3AgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdmVyc2NhbkNvbHVtbnNDb3VudCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG92ZXJzY2FuUm93c0NvdW50ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50ICYmICFkZXZXYXJuaW5nc092ZXJzY2FuUm93c0NvbHVtbnNDb3VudC5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgIGRldldhcm5pbmdzT3ZlcnNjYW5Sb3dzQ29sdW1uc0NvdW50LmFkZChpbnN0YW5jZSk7XG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIG92ZXJzY2FuQ29sdW1uc0NvdW50IGFuZCBvdmVyc2NhblJvd3NDb3VudCBwcm9wcyBoYXZlIGJlZW4gZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIHRoZSBvdmVyc2NhbkNvbHVtbkNvdW50IGFuZCBvdmVyc2NhblJvd0NvdW50IHByb3BzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lICYmICFkZXZXYXJuaW5nc1RhZ05hbWUuaGFzKGluc3RhbmNlKSkge1xuICAgICAgICBkZXZXYXJuaW5nc1RhZ05hbWUuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImNoaWxkcmVuXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgUmVhY3QgY29tcG9uZW50LiAnICsgKFwiXFxcIlwiICsgKGNoaWxkcmVuID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNoaWxkcmVuKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIndpZHRoXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnR3JpZHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdHcmlkcyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFID0gNTA7XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCA9IGZ1bmN0aW9uIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0KF9yZWYsIF9yZWYyKSB7XG4gIHZhciByb3dDb3VudCA9IF9yZWYucm93Q291bnQ7XG4gIHZhciByb3dNZXRhZGF0YU1hcCA9IF9yZWYyLnJvd01ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0ID0gX3JlZjIuZXN0aW1hdGVkUm93SGVpZ2h0LFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXggPSBfcmVmMi5sYXN0TWVhc3VyZWRSb3dJbmRleDtcbiAgdmFyIHRvdGFsU2l6ZU9mTWVhc3VyZWRSb3dzID0gMDsgLy8gRWRnZSBjYXNlIGNoZWNrIGZvciB3aGVuIHRoZSBudW1iZXIgb2YgaXRlbXMgZGVjcmVhc2VzIHdoaWxlIGEgc2Nyb2xsIGlzIGluIHByb2dyZXNzLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYnZhdWdobi9yZWFjdC13aW5kb3cvcHVsbC8xMzhcblxuICBpZiAobGFzdE1lYXN1cmVkUm93SW5kZXggPj0gcm93Q291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRSb3dJbmRleCA9IHJvd0NvdW50IC0gMTtcbiAgfVxuXG4gIGlmIChsYXN0TWVhc3VyZWRSb3dJbmRleCA+PSAwKSB7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IHJvd01ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZFJvd0luZGV4XTtcbiAgICB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSByb3dDb3VudCAtIGxhc3RNZWFzdXJlZFJvd0luZGV4IC0gMTtcbiAgdmFyIHRvdGFsU2l6ZU9mVW5tZWFzdXJlZEl0ZW1zID0gbnVtVW5tZWFzdXJlZEl0ZW1zICogZXN0aW1hdGVkUm93SGVpZ2h0O1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRFc3RpbWF0ZWRUb3RhbFdpZHRoID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmMywgX3JlZjQpIHtcbiAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjMuY29sdW1uQ291bnQ7XG4gIHZhciBjb2x1bW5NZXRhZGF0YU1hcCA9IF9yZWY0LmNvbHVtbk1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkQ29sdW1uV2lkdGggPSBfcmVmNC5lc3RpbWF0ZWRDb2x1bW5XaWR0aCxcbiAgICAgIGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gX3JlZjQubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkUm93cyA9IDA7IC8vIEVkZ2UgY2FzZSBjaGVjayBmb3Igd2hlbiB0aGUgbnVtYmVyIG9mIGl0ZW1zIGRlY3JlYXNlcyB3aGlsZSBhIHNjcm9sbCBpcyBpbiBwcm9ncmVzcy5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2J2YXVnaG4vcmVhY3Qtd2luZG93L3B1bGwvMTM4XG5cbiAgaWYgKGxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID49IGNvbHVtbkNvdW50KSB7XG4gICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPSBjb2x1bW5Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkQ29sdW1uSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBjb2x1bW5NZXRhZGF0YU1hcFtsYXN0TWVhc3VyZWRDb2x1bW5JbmRleF07XG4gICAgdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgPSBpdGVtTWV0YWRhdGEub2Zmc2V0ICsgaXRlbU1ldGFkYXRhLnNpemU7XG4gIH1cblxuICB2YXIgbnVtVW5tZWFzdXJlZEl0ZW1zID0gY29sdW1uQ291bnQgLSBsYXN0TWVhc3VyZWRDb2x1bW5JbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZENvbHVtbldpZHRoO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZFJvd3MgKyB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcztcbn07XG5cbnZhciBnZXRJdGVtTWV0YWRhdGEgPSBmdW5jdGlvbiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwLCBpdGVtU2l6ZSwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgaXRlbVNpemUgPSBwcm9wcy5jb2x1bW5XaWR0aDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcDtcbiAgICBpdGVtU2l6ZSA9IHByb3BzLnJvd0hlaWdodDtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXg7XG4gIH1cblxuICBpZiAoaW5kZXggPiBsYXN0TWVhc3VyZWRJbmRleCkge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuXG4gICAgaWYgKGxhc3RNZWFzdXJlZEluZGV4ID49IDApIHtcbiAgICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgICAgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSBsYXN0TWVhc3VyZWRJbmRleCArIDE7IGkgPD0gaW5kZXg7IGkrKykge1xuICAgICAgdmFyIHNpemUgPSBpdGVtU2l6ZShpKTtcbiAgICAgIGl0ZW1NZXRhZGF0YU1hcFtpXSA9IHtcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHNpemU6IHNpemVcbiAgICAgIH07XG4gICAgICBvZmZzZXQgKz0gc2l6ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbVR5cGUgPT09ICdjb2x1bW4nKSB7XG4gICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlbU1ldGFkYXRhTWFwW2luZGV4XTtcbn07XG5cbnZhciBmaW5kTmVhcmVzdEl0ZW0gPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0oaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpIHtcbiAgdmFyIGl0ZW1NZXRhZGF0YU1hcCwgbGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGl0ZW1UeXBlID09PSAnY29sdW1uJykge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4O1xuICB9IGVsc2Uge1xuICAgIGl0ZW1NZXRhZGF0YU1hcCA9IGluc3RhbmNlUHJvcHMucm93TWV0YWRhdGFNYXA7XG4gICAgbGFzdE1lYXN1cmVkSW5kZXggPSBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZFJvd0luZGV4O1xuICB9XG5cbiAgdmFyIGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPSBsYXN0TWVhc3VyZWRJbmRleCA+IDAgPyBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdLm9mZnNldCA6IDA7XG5cbiAgaWYgKGxhc3RNZWFzdXJlZEl0ZW1PZmZzZXQgPj0gb2Zmc2V0KSB7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBtZWFzdXJlZCBpdGVtcyB3aXRoaW4gdGhpcyByYW5nZSBqdXN0IHVzZSBhIGJpbmFyeSBzZWFyY2ggYXMgaXQncyBmYXN0ZXIuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUJpbmFyeVNlYXJjaChpdGVtVHlwZSwgcHJvcHMsIGluc3RhbmNlUHJvcHMsIGxhc3RNZWFzdXJlZEluZGV4LCAwLCBvZmZzZXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHdlIGhhdmVuJ3QgeWV0IG1lYXN1cmVkIHRoaXMgaGlnaCwgZmFsbGJhY2sgdG8gYW4gZXhwb25lbnRpYWwgc2VhcmNoIHdpdGggYW4gaW5uZXIgYmluYXJ5IHNlYXJjaC5cbiAgICAvLyBUaGUgZXhwb25lbnRpYWwgc2VhcmNoIGF2b2lkcyBwcmUtY29tcHV0aW5nIHNpemVzIGZvciB0aGUgZnVsbCBzZXQgb2YgaXRlbXMgYXMgYSBiaW5hcnkgc2VhcmNoIHdvdWxkLlxuICAgIC8vIFRoZSBvdmVyYWxsIGNvbXBsZXhpdHkgZm9yIHRoaXMgYXBwcm9hY2ggaXMgTyhsb2cgbikuXG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoKGl0ZW1UeXBlLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgaGlnaCwgbG93LCBvZmZzZXQpIHtcbiAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgdmFyIG1pZGRsZSA9IGxvdyArIE1hdGguZmxvb3IoKGhpZ2ggLSBsb3cpIC8gMik7XG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBtaWRkbGUsIGluc3RhbmNlUHJvcHMpLm9mZnNldDtcblxuICAgIGlmIChjdXJyZW50T2Zmc2V0ID09PSBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBtaWRkbGU7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgICBsb3cgPSBtaWRkbGUgKyAxO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudE9mZnNldCA+IG9mZnNldCkge1xuICAgICAgaGlnaCA9IG1pZGRsZSAtIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGxvdyA+IDApIHtcbiAgICByZXR1cm4gbG93IC0gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxudmFyIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoID0gZnVuY3Rpb24gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy5jb2x1bW5Db3VudCA6IHByb3BzLnJvd0NvdW50O1xuICB2YXIgaW50ZXJ2YWwgPSAxO1xuXG4gIHdoaWxlIChpbmRleCA8IGl0ZW1Db3VudCAmJiBnZXRJdGVtTWV0YWRhdGEoaXRlbVR5cGUsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2goaXRlbVR5cGUsIHByb3BzLCBpbnN0YW5jZVByb3BzLCBNYXRoLm1pbihpbmRleCwgaXRlbUNvdW50IC0gMSksIE1hdGguZmxvb3IoaW5kZXggLyAyKSwgb2Zmc2V0KTtcbn07XG5cbnZhciBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KGl0ZW1UeXBlLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgdmFyIHNpemUgPSBpdGVtVHlwZSA9PT0gJ2NvbHVtbicgPyBwcm9wcy53aWR0aCA6IHByb3BzLmhlaWdodDtcbiAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YShpdGVtVHlwZSwgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKTsgLy8gR2V0IGVzdGltYXRlZCB0b3RhbCBzaXplIGFmdGVyIEl0ZW1NZXRhZGF0YSBpcyBjb21wdXRlZCxcbiAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICB2YXIgZXN0aW1hdGVkVG90YWxTaXplID0gaXRlbVR5cGUgPT09ICdjb2x1bW4nID8gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChwcm9wcywgaW5zdGFuY2VQcm9wcykgOiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodChwcm9wcywgaW5zdGFuY2VQcm9wcyk7XG4gIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpdGVtTWV0YWRhdGEub2Zmc2V0IC0gc2l6ZSArIHNjcm9sbGJhclNpemUgKyBpdGVtTWV0YWRhdGEuc2l6ZSk7XG5cbiAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgY2FzZSAnc3RhcnQnOlxuICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgIGNhc2UgJ2VuZCc6XG4gICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsT2Zmc2V0O1xuICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgLy8gQmVjYXVzZSB3ZSBvbmx5IHRha2UgaW50byBhY2NvdW50IHRoZSBzY3JvbGxiYXIgc2l6ZSB3aGVuIGNhbGN1bGF0aW5nIG1pbk9mZnNldFxuICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcbiAgICAgIH1cblxuICB9XG59O1xuXG52YXIgVmFyaWFibGVTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQocHJvcHMsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtKCdjb2x1bW4nLCBwcm9wcywgaW5zdGFuY2VQcm9wcywgc2Nyb2xsTGVmdCk7XG4gIH0sXG4gIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldENvbHVtblN0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBwcm9wcy5jb2x1bW5Db3VudCxcbiAgICAgICAgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICB2YXIgaXRlbU1ldGFkYXRhID0gZ2V0SXRlbU1ldGFkYXRhKCdjb2x1bW4nLCBwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbExlZnQgKyB3aWR0aDtcbiAgICB2YXIgb2Zmc2V0ID0gaXRlbU1ldGFkYXRhLm9mZnNldCArIGl0ZW1NZXRhZGF0YS5zaXplO1xuICAgIHZhciBzdG9wSW5kZXggPSBzdGFydEluZGV4O1xuXG4gICAgd2hpbGUgKHN0b3BJbmRleCA8IGNvbHVtbkNvdW50IC0gMSAmJiBvZmZzZXQgPCBtYXhPZmZzZXQpIHtcbiAgICAgIHN0b3BJbmRleCsrO1xuICAgICAgb2Zmc2V0ICs9IGdldEl0ZW1NZXRhZGF0YSgnY29sdW1uJywgcHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHMuY29sdW1uTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsSGVpZ2h0OiBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodCxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZ2V0RXN0aW1hdGVkVG90YWxXaWR0aCxcbiAgZ2V0T2Zmc2V0Rm9yQ29sdW1uQW5kQWxpZ25tZW50OiBmdW5jdGlvbiBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KCdjb2x1bW4nLCBwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpO1xuICB9LFxuICBnZXRPZmZzZXRGb3JSb3dBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudChwcm9wcywgaW5kZXgsIGFsaWduLCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMsIHNjcm9sbGJhclNpemUpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQoJ3JvdycsIHByb3BzLCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSk7XG4gIH0sXG4gIGdldFJvd09mZnNldDogZnVuY3Rpb24gZ2V0Um93T2Zmc2V0KHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHJldHVybiBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuICB9LFxuICBnZXRSb3dIZWlnaHQ6IGZ1bmN0aW9uIGdldFJvd0hlaWdodChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5yb3dNZXRhZGF0YU1hcFtpbmRleF0uc2l6ZTtcbiAgfSxcbiAgZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0Um93U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgc2Nyb2xsVG9wLCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSgncm93JywgcHJvcHMsIGluc3RhbmNlUHJvcHMsIHNjcm9sbFRvcCk7XG4gIH0sXG4gIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFJvd1N0b3BJbmRleEZvclN0YXJ0SW5kZXgocHJvcHMsIHN0YXJ0SW5kZXgsIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcykge1xuICAgIHZhciByb3dDb3VudCA9IHByb3BzLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSgncm93JywgcHJvcHMsIHN0YXJ0SW5kZXgsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBzY3JvbGxUb3AgKyBoZWlnaHQ7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCByb3dDb3VudCAtIDEgJiYgb2Zmc2V0IDwgbWF4T2Zmc2V0KSB7XG4gICAgICBzdG9wSW5kZXgrKztcbiAgICAgIG9mZnNldCArPSBnZXRJdGVtTWV0YWRhdGEoJ3JvdycsIHByb3BzLCBzdG9wSW5kZXgsIGluc3RhbmNlUHJvcHMpLnNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3BJbmRleDtcbiAgfSxcbiAgaW5pdEluc3RhbmNlUHJvcHM6IGZ1bmN0aW9uIGluaXRJbnN0YW5jZVByb3BzKHByb3BzLCBpbnN0YW5jZSkge1xuICAgIHZhciBfcmVmNSA9IHByb3BzLFxuICAgICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aCA9IF9yZWY1LmVzdGltYXRlZENvbHVtbldpZHRoLFxuICAgICAgICBlc3RpbWF0ZWRSb3dIZWlnaHQgPSBfcmVmNS5lc3RpbWF0ZWRSb3dIZWlnaHQ7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBjb2x1bW5NZXRhZGF0YU1hcDoge30sXG4gICAgICBlc3RpbWF0ZWRDb2x1bW5XaWR0aDogZXN0aW1hdGVkQ29sdW1uV2lkdGggfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgZXN0aW1hdGVkUm93SGVpZ2h0OiBlc3RpbWF0ZWRSb3dIZWlnaHQgfHwgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFLFxuICAgICAgbGFzdE1lYXN1cmVkQ29sdW1uSW5kZXg6IC0xLFxuICAgICAgbGFzdE1lYXN1cmVkUm93SW5kZXg6IC0xLFxuICAgICAgcm93TWV0YWRhdGFNYXA6IHt9XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJDb2x1bW5JbmRleCA9IGZ1bmN0aW9uIChjb2x1bW5JbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICBjb2x1bW5JbmRleDogY29sdW1uSW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJSb3dJbmRleCA9IGZ1bmN0aW9uIChyb3dJbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucmVzZXRBZnRlckluZGljZXMoe1xuICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlOiBzaG91bGRGb3JjZVVwZGF0ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRpY2VzID0gZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgY29sdW1uSW5kZXggPSBfcmVmNi5jb2x1bW5JbmRleCxcbiAgICAgICAgICByb3dJbmRleCA9IF9yZWY2LnJvd0luZGV4LFxuICAgICAgICAgIF9yZWY2JHNob3VsZEZvcmNlVXBkYSA9IF9yZWY2LnNob3VsZEZvcmNlVXBkYXRlLFxuICAgICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gX3JlZjYkc2hvdWxkRm9yY2VVcGRhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkc2hvdWxkRm9yY2VVcGRhO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbHVtbkluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpbnN0YW5jZVByb3BzLmxhc3RNZWFzdXJlZENvbHVtbkluZGV4ID0gTWF0aC5taW4oaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRDb2x1bW5JbmRleCwgY29sdW1uSW5kZXggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiByb3dJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRSb3dJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkUm93SW5kZXgsIHJvd0luZGV4IC0gMSk7XG4gICAgICB9IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG5cbiAgICAgIGluc3RhbmNlLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSk7XG5cbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSkge1xuICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcztcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogZmFsc2UsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmNy5jb2x1bW5XaWR0aCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjcucm93SGVpZ2h0O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgY29sdW1uV2lkdGggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIGZ1bmN0aW9uLiAnICsgKFwiXFxcIlwiICsgKGNvbHVtbldpZHRoID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNvbHVtbldpZHRoKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3dIZWlnaHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBmdW5jdGlvbi4gJyArIChcIlxcXCJcIiArIChyb3dIZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygcm93SGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIElTX1NDUk9MTElOR19ERUJPVU5DRV9JTlRFUlZBTCQxID0gMTUwO1xuXG52YXIgZGVmYXVsdEl0ZW1LZXkkMSA9IGZ1bmN0aW9uIGRlZmF1bHRJdGVtS2V5KGluZGV4LCBkYXRhKSB7XG4gIHJldHVybiBpbmRleDtcbn07IC8vIEluIERFViBtb2RlLCB0aGlzIFNldCBoZWxwcyB1cyBvbmx5IGxvZyBhIHdhcm5pbmcgb25jZSBwZXIgY29tcG9uZW50IGluc3RhbmNlLlxuLy8gVGhpcyBhdm9pZHMgc3BhbW1pbmcgdGhlIGNvbnNvbGUgZXZlcnkgdGltZSBhIHJlbmRlciBoYXBwZW5zLlxuXG5cbnZhciBkZXZXYXJuaW5nc0RpcmVjdGlvbiA9IG51bGw7XG52YXIgZGV2V2FybmluZ3NUYWdOYW1lJDEgPSBudWxsO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5XZWFrU2V0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRldldhcm5pbmdzRGlyZWN0aW9uID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgbmV3IFdlYWtTZXQoKTtcbiAgICBkZXZXYXJuaW5nc1RhZ05hbWUkMSA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIG5ldyBXZWFrU2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlzdENvbXBvbmVudChfcmVmKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBnZXRJdGVtT2Zmc2V0ID0gX3JlZi5nZXRJdGVtT2Zmc2V0LFxuICAgICAgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gX3JlZi5nZXRFc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICBnZXRJdGVtU2l6ZSA9IF9yZWYuZ2V0SXRlbVNpemUsXG4gICAgICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudCA9IF9yZWYuZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQsXG4gICAgICBnZXRTdGFydEluZGV4Rm9yT2Zmc2V0ID0gX3JlZi5nZXRTdGFydEluZGV4Rm9yT2Zmc2V0LFxuICAgICAgZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCA9IF9yZWYuZ2V0U3RvcEluZGV4Rm9yU3RhcnRJbmRleCxcbiAgICAgIGluaXRJbnN0YW5jZVByb3BzID0gX3JlZi5pbml0SW5zdGFuY2VQcm9wcyxcbiAgICAgIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgPSBfcmVmLnNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UsXG4gICAgICB2YWxpZGF0ZVByb3BzID0gX3JlZi52YWxpZGF0ZVByb3BzO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKExpc3QsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIC8vIEFsd2F5cyB1c2UgZXhwbGljaXQgY29uc3RydWN0b3IgZm9yIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgLy8gSXQgcHJvZHVjZXMgbGVzcyBjb2RlIGFmdGVyIHRyYW5zcGlsYXRpb24uICgjMjYpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1B1cmVDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgIF90aGlzLl9pbnN0YW5jZVByb3BzID0gaW5pdEluc3RhbmNlUHJvcHMoX3RoaXMucHJvcHMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgIF90aGlzLl9vdXRlclJlZiA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBpbnN0YW5jZTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICAgIGlzU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgc2Nyb2xsRGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gICAgICAgIHNjcm9sbE9mZnNldDogdHlwZW9mIF90aGlzLnByb3BzLmluaXRpYWxTY3JvbGxPZmZzZXQgPT09ICdudW1iZXInID8gX3RoaXMucHJvcHMuaW5pdGlhbFNjcm9sbE9mZnNldCA6IDAsXG4gICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBfdGhpcy5fY2FsbE9uSXRlbXNSZW5kZXJlZCA9IHZvaWQgMDtcbiAgICAgIF90aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAob3ZlcnNjYW5TdGFydEluZGV4LCBvdmVyc2NhblN0b3BJbmRleCwgdmlzaWJsZVN0YXJ0SW5kZXgsIHZpc2libGVTdG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uSXRlbXNSZW5kZXJlZCh7XG4gICAgICAgICAgb3ZlcnNjYW5TdGFydEluZGV4OiBvdmVyc2NhblN0YXJ0SW5kZXgsXG4gICAgICAgICAgb3ZlcnNjYW5TdG9wSW5kZXg6IG92ZXJzY2FuU3RvcEluZGV4LFxuICAgICAgICAgIHZpc2libGVTdGFydEluZGV4OiB2aXNpYmxlU3RhcnRJbmRleCxcbiAgICAgICAgICB2aXNpYmxlU3RvcEluZGV4OiB2aXNpYmxlU3RvcEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fY2FsbE9uU2Nyb2xsID0gdm9pZCAwO1xuICAgICAgX3RoaXMuX2NhbGxPblNjcm9sbCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHNjcm9sbERpcmVjdGlvbiwgc2Nyb2xsT2Zmc2V0LCBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm9uU2Nyb2xsKHtcbiAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICBzY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQ6IHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IHZvaWQgMDtcblxuICAgICAgX3RoaXMuX2dldEl0ZW1TdHlsZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICAgIGl0ZW1TaXplID0gX3RoaXMkcHJvcHMuaXRlbVNpemUsXG4gICAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wcy5sYXlvdXQ7XG5cbiAgICAgICAgdmFyIGl0ZW1TdHlsZUNhY2hlID0gX3RoaXMuX2dldEl0ZW1TdHlsZUNhY2hlKHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgaXRlbVNpemUsIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2UgJiYgbGF5b3V0LCBzaG91bGRSZXNldFN0eWxlQ2FjaGVPbkl0ZW1TaXplQ2hhbmdlICYmIGRpcmVjdGlvbik7XG5cbiAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgIGlmIChpdGVtU3R5bGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICBzdHlsZSA9IGl0ZW1TdHlsZUNhY2hlW2luZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgX29mZnNldCA9IGdldEl0ZW1PZmZzZXQoX3RoaXMucHJvcHMsIGluZGV4LCBfdGhpcy5faW5zdGFuY2VQcm9wcyk7XG5cbiAgICAgICAgICB2YXIgc2l6ZSA9IGdldEl0ZW1TaXplKF90aGlzLnByb3BzLCBpbmRleCwgX3RoaXMuX2luc3RhbmNlUHJvcHMpOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgICB2YXIgaXNSdGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgICAgICAgIHZhciBvZmZzZXRIb3Jpem9udGFsID0gaXNIb3Jpem9udGFsID8gX29mZnNldCA6IDA7XG4gICAgICAgICAgaXRlbVN0eWxlQ2FjaGVbaW5kZXhdID0gc3R5bGUgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIGxlZnQ6IGlzUnRsID8gdW5kZWZpbmVkIDogb2Zmc2V0SG9yaXpvbnRhbCxcbiAgICAgICAgICAgIHJpZ2h0OiBpc1J0bCA/IG9mZnNldEhvcml6b250YWwgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0b3A6ICFpc0hvcml6b250YWwgPyBfb2Zmc2V0IDogMCxcbiAgICAgICAgICAgIGhlaWdodDogIWlzSG9yaXpvbnRhbCA/IHNpemUgOiAnMTAwJScsXG4gICAgICAgICAgICB3aWR0aDogaXNIb3Jpem9udGFsID8gc2l6ZSA6ICcxMDAlJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSB2b2lkIDA7XG4gICAgICBfdGhpcy5fZ2V0SXRlbVN0eWxlQ2FjaGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChfLCBfXywgX19fKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgICBjbGllbnRXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0LnNjcm9sbFdpZHRoO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsTGVmdCkge1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHBvc2l0aW9uIG1heSBoYXZlIGJlZW4gdXBkYXRlZCBieSBjRE0vY0RVLFxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB3ZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW5vdGhlciByZW5kZXIsXG4gICAgICAgICAgICAvLyBBbmQgd2UgZG9uJ3Qgd2FudCB0byB1cGRhdGUgc3RhdGUuaXNTY3JvbGxpbmcuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gX3RoaXMucHJvcHMuZGlyZWN0aW9uO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIC8vIFRSSUNLWSBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNjcm9sbExlZnQgc2hvdWxkIGJlIG5lZ2F0aXZlIGZvciBSVEwgYWxpZ25lZCBlbGVtZW50cy5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IHRoZSBjYXNlIGZvciBhbGwgYnJvd3NlcnMgdGhvdWdoIChlLmcuIENocm9tZSByZXBvcnRzIHZhbHVlcyBhcyBwb3NpdGl2ZSwgbWVhc3VyZWQgcmVsYXRpdmUgdG8gdGhlIGxlZnQpLlxuICAgICAgICAgICAgLy8gSXQncyBhbHNvIGVhc2llciBmb3IgdGhpcyBjb21wb25lbnQgaWYgd2UgY29udmVydCBvZmZzZXRzIHRvIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGV5IHdvdWxkIGJlIGluIGZvciBsdHIuXG4gICAgICAgICAgICAvLyBTbyB0aGUgc2ltcGxlc3Qgc29sdXRpb24gaXMgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgY29udmVydCBiYXNlZCBvbiBpdC5cbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UlRMT2Zmc2V0VHlwZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSAtc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdwb3NpdGl2ZS1kZXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFByZXZlbnQgU2FmYXJpJ3MgZWxhc3RpYyBzY3JvbGxpbmcgZnJvbSBjYXVzaW5nIHZpc3VhbCBzaGFraW5nIHdoZW4gc2Nyb2xsaW5nIHBhc3QgYm91bmRzLlxuXG5cbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxPZmZzZXQsIHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGgpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTY3JvbGxpbmc6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IHByZXZTdGF0ZS5zY3JvbGxPZmZzZXQgPCBzY3JvbGxMZWZ0ID8gJ2ZvcndhcmQnIDogJ2JhY2t3YXJkJyxcbiAgICAgICAgICAgIHNjcm9sbE9mZnNldDogc2Nyb2xsT2Zmc2V0LFxuICAgICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0sIF90aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9vblNjcm9sbFZlcnRpY2FsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZXZlbnQkY3VycmVudFRhcmdldDIgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0ID0gX2V2ZW50JGN1cnJlbnRUYXJnZXQyLmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgIHNjcm9sbEhlaWdodCA9IF9ldmVudCRjdXJyZW50VGFyZ2V0Mi5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBfZXZlbnQkY3VycmVudFRhcmdldDIuc2Nyb2xsVG9wO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAvLyBTY3JvbGwgcG9zaXRpb24gbWF5IGhhdmUgYmVlbiB1cGRhdGVkIGJ5IGNETS9jRFUsXG4gICAgICAgICAgICAvLyBJbiB3aGljaCBjYXNlIHdlIGRvbid0IG5lZWQgdG8gdHJpZ2dlciBhbm90aGVyIHJlbmRlcixcbiAgICAgICAgICAgIC8vIEFuZCB3ZSBkb24ndCB3YW50IHRvIHVwZGF0ZSBzdGF0ZS5pc1Njcm9sbGluZy5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gLy8gUHJldmVudCBTYWZhcmkncyBlbGFzdGljIHNjcm9sbGluZyBmcm9tIGNhdXNpbmcgdmlzdWFsIHNoYWtpbmcgd2hlbiBzY3JvbGxpbmcgcGFzdCBib3VuZHMuXG5cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxUb3AsIHNjcm9sbEhlaWdodCAtIGNsaWVudEhlaWdodCkpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgICBzY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIHNjcm9sbFVwZGF0ZVdhc1JlcXVlc3RlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fb3V0ZXJSZWZTZXR0ZXIgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IF90aGlzLnByb3BzLm91dGVyUmVmO1xuICAgICAgICBfdGhpcy5fb3V0ZXJSZWYgPSByZWY7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvdXRlclJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG91dGVyUmVmKHJlZik7XG4gICAgICAgIH0gZWxzZSBpZiAob3V0ZXJSZWYgIT0gbnVsbCAmJiB0eXBlb2Ygb3V0ZXJSZWYgPT09ICdvYmplY3QnICYmIG91dGVyUmVmLmhhc093blByb3BlcnR5KCdjdXJyZW50JykpIHtcbiAgICAgICAgICBvdXRlclJlZi5jdXJyZW50ID0gcmVmO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ0RlYm91bmNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLl9yZXNldElzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgY2FuY2VsVGltZW91dChfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCA9IHJlcXVlc3RUaW1lb3V0KF90aGlzLl9yZXNldElzU2Nyb2xsaW5nLCBJU19TQ1JPTExJTkdfREVCT1VOQ0VfSU5URVJWQUwkMSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fcmVzZXRJc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1Njcm9sbGluZzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIENsZWFyIHN0eWxlIGNhY2hlIGFmdGVyIHN0YXRlIHVwZGF0ZSBoYXMgYmVlbiBjb21taXR0ZWQuXG4gICAgICAgICAgLy8gVGhpcyB3YXkgd2UgZG9uJ3QgYnJlYWsgcHVyZSBzQ1UgZm9yIGl0ZW1zIHRoYXQgZG9uJ3QgdXNlIGlzU2Nyb2xsaW5nIHBhcmFtLlxuICAgICAgICAgIF90aGlzLl9nZXRJdGVtU3R5bGVDYWNoZSgtMSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIExpc3QuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YWxpZGF0ZVNoYXJlZFByb3BzJDEobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgICAgdmFsaWRhdGVQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBMaXN0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zY3JvbGxUbyA9IGZ1bmN0aW9uIHNjcm9sbFRvKHNjcm9sbE9mZnNldCkge1xuICAgICAgc2Nyb2xsT2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2Nyb2xsT2Zmc2V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAocHJldlN0YXRlLnNjcm9sbE9mZnNldCA9PT0gc2Nyb2xsT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbERpcmVjdGlvbjogcHJldlN0YXRlLnNjcm9sbE9mZnNldCA8IHNjcm9sbE9mZnNldCA/ICdmb3J3YXJkJyA6ICdiYWNrd2FyZCcsXG4gICAgICAgICAgc2Nyb2xsT2Zmc2V0OiBzY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9LCB0aGlzLl9yZXNldElzU2Nyb2xsaW5nRGVib3VuY2VkKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNjcm9sbFRvSXRlbSA9IGZ1bmN0aW9uIHNjcm9sbFRvSXRlbShpbmRleCwgYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbUNvdW50ID0gdGhpcy5wcm9wcy5pdGVtQ291bnQ7XG4gICAgICB2YXIgc2Nyb2xsT2Zmc2V0ID0gdGhpcy5zdGF0ZS5zY3JvbGxPZmZzZXQ7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBpdGVtQ291bnQgLSAxKSk7XG4gICAgICB0aGlzLnNjcm9sbFRvKGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KHRoaXMucHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMyLmRpcmVjdGlvbixcbiAgICAgICAgICBpbml0aWFsU2Nyb2xsT2Zmc2V0ID0gX3RoaXMkcHJvcHMyLmluaXRpYWxTY3JvbGxPZmZzZXQsXG4gICAgICAgICAgbGF5b3V0ID0gX3RoaXMkcHJvcHMyLmxheW91dDtcblxuICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU2Nyb2xsT2Zmc2V0ID09PSAnbnVtYmVyJyAmJiB0aGlzLl9vdXRlclJlZiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBvdXRlclJlZiA9IHRoaXMuX291dGVyUmVmOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgfHwgbGF5b3V0ID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gaW5pdGlhbFNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRlclJlZi5zY3JvbGxUb3AgPSBpbml0aWFsU2Nyb2xsT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NhbGxQcm9wc0NhbGxiYWNrcygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMzLmRpcmVjdGlvbixcbiAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wczMubGF5b3V0O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZS5zY3JvbGxPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkID0gX3RoaXMkc3RhdGUuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICBpZiAoc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkICYmIHRoaXMuX291dGVyUmVmICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG91dGVyUmVmID0gdGhpcy5fb3V0ZXJSZWY7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICAvLyBUUklDS1kgQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzY3JvbGxMZWZ0IHNob3VsZCBiZSBuZWdhdGl2ZSBmb3IgUlRMIGFsaWduZWQgZWxlbWVudHMuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCB0aGUgY2FzZSBmb3IgYWxsIGJyb3dzZXJzIHRob3VnaCAoZS5nLiBDaHJvbWUgcmVwb3J0cyB2YWx1ZXMgYXMgcG9zaXRpdmUsIG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSBsZWZ0KS5cbiAgICAgICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGJyb3dzZXIgYmVoYXZpb3Igd2UncmUgZGVhbGluZyB3aXRoLCBhbmQgbWltaWMgaXQuXG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJUTE9mZnNldFR5cGUoKSkge1xuICAgICAgICAgICAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IC1zY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUtYXNjZW5kaW5nJzpcbiAgICAgICAgICAgICAgICBvdXRlclJlZi5zY3JvbGxMZWZ0ID0gc2Nyb2xsT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudFdpZHRoID0gb3V0ZXJSZWYuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gb3V0ZXJSZWYuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgb3V0ZXJSZWYuc2Nyb2xsTGVmdCA9IHNjcm9sbFdpZHRoIC0gY2xpZW50V2lkdGggLSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dGVyUmVmLnNjcm9sbExlZnQgPSBzY3JvbGxPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGVyUmVmLnNjcm9sbFRvcCA9IHNjcm9sbE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWxsUHJvcHNDYWxsYmFja3MoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5fcmVzZXRJc1Njcm9sbGluZ1RpbWVvdXRJZCAhPT0gbnVsbCkge1xuICAgICAgICBjYW5jZWxUaW1lb3V0KHRoaXMuX3Jlc2V0SXNTY3JvbGxpbmdUaW1lb3V0SWQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wczQuZGlyZWN0aW9uLFxuICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzNC5oZWlnaHQsXG4gICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczQuaW5uZXJSZWYsXG4gICAgICAgICAgaW5uZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5pbm5lckVsZW1lbnRUeXBlLFxuICAgICAgICAgIGlubmVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5pbm5lclRhZ05hbWUsXG4gICAgICAgICAgaXRlbUNvdW50ID0gX3RoaXMkcHJvcHM0Lml0ZW1Db3VudCxcbiAgICAgICAgICBpdGVtRGF0YSA9IF90aGlzJHByb3BzNC5pdGVtRGF0YSxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkaXRlbUtleSA9IF90aGlzJHByb3BzNC5pdGVtS2V5LFxuICAgICAgICAgIGl0ZW1LZXkgPSBfdGhpcyRwcm9wczQkaXRlbUtleSA9PT0gdm9pZCAwID8gZGVmYXVsdEl0ZW1LZXkkMSA6IF90aGlzJHByb3BzNCRpdGVtS2V5LFxuICAgICAgICAgIGxheW91dCA9IF90aGlzJHByb3BzNC5sYXlvdXQsXG4gICAgICAgICAgb3V0ZXJFbGVtZW50VHlwZSA9IF90aGlzJHByb3BzNC5vdXRlckVsZW1lbnRUeXBlLFxuICAgICAgICAgIG91dGVyVGFnTmFtZSA9IF90aGlzJHByb3BzNC5vdXRlclRhZ05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczQuc3R5bGUsXG4gICAgICAgICAgdXNlSXNTY3JvbGxpbmcgPSBfdGhpcyRwcm9wczQudXNlSXNTY3JvbGxpbmcsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczQud2lkdGg7XG4gICAgICB2YXIgaXNTY3JvbGxpbmcgPSB0aGlzLnN0YXRlLmlzU2Nyb2xsaW5nOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIG9uU2Nyb2xsID0gaXNIb3Jpem9udGFsID8gdGhpcy5fb25TY3JvbGxIb3Jpem9udGFsIDogdGhpcy5fb25TY3JvbGxWZXJ0aWNhbDtcblxuICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZCA9IHRoaXMuX2dldFJhbmdlVG9SZW5kZXIoKSxcbiAgICAgICAgICBzdGFydEluZGV4ID0gX3RoaXMkX2dldFJhbmdlVG9SZW5kWzBdLFxuICAgICAgICAgIHN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZFsxXTtcblxuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgIGZvciAodmFyIF9pbmRleCA9IHN0YXJ0SW5kZXg7IF9pbmRleCA8PSBzdG9wSW5kZXg7IF9pbmRleCsrKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChjcmVhdGVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgICBkYXRhOiBpdGVtRGF0YSxcbiAgICAgICAgICAgIGtleTogaXRlbUtleShfaW5kZXgsIGl0ZW1EYXRhKSxcbiAgICAgICAgICAgIGluZGV4OiBfaW5kZXgsXG4gICAgICAgICAgICBpc1Njcm9sbGluZzogdXNlSXNTY3JvbGxpbmcgPyBpc1Njcm9sbGluZyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLl9nZXRJdGVtU3R5bGUoX2luZGV4KVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWFkIHRoaXMgdmFsdWUgQUZURVIgaXRlbXMgaGF2ZSBiZWVuIGNyZWF0ZWQsXG4gICAgICAvLyBTbyB0aGVpciBhY3R1YWwgc2l6ZXMgKGlmIHZhcmlhYmxlKSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uLlxuXG5cbiAgICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUodGhpcy5wcm9wcywgdGhpcy5faW5zdGFuY2VQcm9wcyk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChvdXRlckVsZW1lbnRUeXBlIHx8IG91dGVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25TY3JvbGw6IG9uU2Nyb2xsLFxuICAgICAgICByZWY6IHRoaXMuX291dGVyUmVmU2V0dGVyLFxuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgICAgIHdpbGxDaGFuZ2U6ICd0cmFuc2Zvcm0nLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgIH0sIHN0eWxlKVxuICAgICAgfSwgY3JlYXRlRWxlbWVudChpbm5lckVsZW1lbnRUeXBlIHx8IGlubmVyVGFnTmFtZSB8fCAnZGl2Jywge1xuICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgaGVpZ2h0OiBpc0hvcml6b250YWwgPyAnMTAwJScgOiBlc3RpbWF0ZWRUb3RhbFNpemUsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogaXNTY3JvbGxpbmcgPyAnbm9uZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IGlzSG9yaXpvbnRhbCA/IGVzdGltYXRlZFRvdGFsU2l6ZSA6ICcxMDAlJ1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2FsbFByb3BzQ2FsbGJhY2tzID0gZnVuY3Rpb24gX2NhbGxQcm9wc0NhbGxiYWNrcygpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkl0ZW1zUmVuZGVyZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHRoaXMucHJvcHMuaXRlbUNvdW50O1xuXG4gICAgICAgIGlmIChpdGVtQ291bnQgPiAwKSB7XG4gICAgICAgICAgdmFyIF90aGlzJF9nZXRSYW5nZVRvUmVuZDIgPSB0aGlzLl9nZXRSYW5nZVRvUmVuZGVyKCksXG4gICAgICAgICAgICAgIF9vdmVyc2NhblN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzBdLFxuICAgICAgICAgICAgICBfb3ZlcnNjYW5TdG9wSW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzFdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0YXJ0SW5kZXggPSBfdGhpcyRfZ2V0UmFuZ2VUb1JlbmQyWzJdLFxuICAgICAgICAgICAgICBfdmlzaWJsZVN0b3BJbmRleCA9IF90aGlzJF9nZXRSYW5nZVRvUmVuZDJbM107XG5cbiAgICAgICAgICB0aGlzLl9jYWxsT25JdGVtc1JlbmRlcmVkKF9vdmVyc2NhblN0YXJ0SW5kZXgsIF9vdmVyc2NhblN0b3BJbmRleCwgX3Zpc2libGVTdGFydEluZGV4LCBfdmlzaWJsZVN0b3BJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgX3Njcm9sbERpcmVjdGlvbiA9IF90aGlzJHN0YXRlMi5zY3JvbGxEaXJlY3Rpb24sXG4gICAgICAgICAgICBfc2Nyb2xsT2Zmc2V0ID0gX3RoaXMkc3RhdGUyLnNjcm9sbE9mZnNldCxcbiAgICAgICAgICAgIF9zY3JvbGxVcGRhdGVXYXNSZXF1ZXN0ZWQgPSBfdGhpcyRzdGF0ZTIuc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkO1xuXG4gICAgICAgIHRoaXMuX2NhbGxPblNjcm9sbChfc2Nyb2xsRGlyZWN0aW9uLCBfc2Nyb2xsT2Zmc2V0LCBfc2Nyb2xsVXBkYXRlV2FzUmVxdWVzdGVkKTtcbiAgICAgIH1cbiAgICB9OyAvLyBMYXppbHkgY3JlYXRlIGFuZCBjYWNoZSBpdGVtIHN0eWxlcyB3aGlsZSBzY3JvbGxpbmcsXG4gICAgLy8gU28gdGhhdCBwdXJlIGNvbXBvbmVudCBzQ1Ugd2lsbCBwcmV2ZW50IHJlLXJlbmRlcnMuXG4gICAgLy8gV2UgbWFpbnRhaW4gdGhpcyBjYWNoZSwgYW5kIHBhc3MgYSBzdHlsZSBwcm9wIHJhdGhlciB0aGFuIGluZGV4LFxuICAgIC8vIFNvIHRoYXQgTGlzdCBjYW4gY2xlYXIgY2FjaGVkIHN0eWxlcyBhbmQgZm9yY2UgaXRlbSByZS1yZW5kZXIgaWYgbmVjZXNzYXJ5LlxuXG5cbiAgICBfcHJvdG8uX2dldFJhbmdlVG9SZW5kZXIgPSBmdW5jdGlvbiBfZ2V0UmFuZ2VUb1JlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGl0ZW1Db3VudCA9IF90aGlzJHByb3BzNS5pdGVtQ291bnQsXG4gICAgICAgICAgb3ZlcnNjYW5Db3VudCA9IF90aGlzJHByb3BzNS5vdmVyc2NhbkNvdW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaXNTY3JvbGxpbmcgPSBfdGhpcyRzdGF0ZTMuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgc2Nyb2xsRGlyZWN0aW9uID0gX3RoaXMkc3RhdGUzLnNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBfdGhpcyRzdGF0ZTMuc2Nyb2xsT2Zmc2V0O1xuXG4gICAgICBpZiAoaXRlbUNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEluZGV4ID0gZ2V0U3RhcnRJbmRleEZvck9mZnNldCh0aGlzLnByb3BzLCBzY3JvbGxPZmZzZXQsIHRoaXMuX2luc3RhbmNlUHJvcHMpO1xuICAgICAgdmFyIHN0b3BJbmRleCA9IGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgodGhpcy5wcm9wcywgc3RhcnRJbmRleCwgc2Nyb2xsT2Zmc2V0LCB0aGlzLl9pbnN0YW5jZVByb3BzKTsgLy8gT3ZlcnNjYW4gYnkgb25lIGl0ZW0gaW4gZWFjaCBkaXJlY3Rpb24gc28gdGhhdCB0YWIvZm9jdXMgd29ya3MuXG4gICAgICAvLyBJZiB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZXh0cmEgaXRlbSwgdGFiIGxvb3BzIGJhY2sgYXJvdW5kLlxuXG4gICAgICB2YXIgb3ZlcnNjYW5CYWNrd2FyZCA9ICFpc1Njcm9sbGluZyB8fCBzY3JvbGxEaXJlY3Rpb24gPT09ICdiYWNrd2FyZCcgPyBNYXRoLm1heCgxLCBvdmVyc2NhbkNvdW50KSA6IDE7XG4gICAgICB2YXIgb3ZlcnNjYW5Gb3J3YXJkID0gIWlzU2Nyb2xsaW5nIHx8IHNjcm9sbERpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gTWF0aC5tYXgoMSwgb3ZlcnNjYW5Db3VudCkgOiAxO1xuICAgICAgcmV0dXJuIFtNYXRoLm1heCgwLCBzdGFydEluZGV4IC0gb3ZlcnNjYW5CYWNrd2FyZCksIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIHN0b3BJbmRleCArIG92ZXJzY2FuRm9yd2FyZCkpLCBzdGFydEluZGV4LCBzdG9wSW5kZXhdO1xuICAgIH07XG5cbiAgICByZXR1cm4gTGlzdDtcbiAgfShQdXJlQ29tcG9uZW50KSwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGl0ZW1EYXRhOiB1bmRlZmluZWQsXG4gICAgbGF5b3V0OiAndmVydGljYWwnLFxuICAgIG92ZXJzY2FuQ291bnQ6IDIsXG4gICAgdXNlSXNTY3JvbGxpbmc6IGZhbHNlXG4gIH0sIF90ZW1wO1xufSAvLyBOT1RFOiBJIGNvbnNpZGVyZWQgZnVydGhlciB3cmFwcGluZyBpbmRpdmlkdWFsIGl0ZW1zIHdpdGggYSBwdXJlIExpc3RJdGVtIGNvbXBvbmVudC5cbi8vIFRoaXMgd291bGQgYXZvaWQgZXZlciBjYWxsaW5nIHRoZSByZW5kZXIgZnVuY3Rpb24gZm9yIHRoZSBzYW1lIGluZGV4IG1vcmUgdGhhbiBvbmNlLFxuLy8gQnV0IGl0IHdvdWxkIGFsc28gYWRkIHRoZSBvdmVyaGVhZCBvZiBhIGxvdCBvZiBjb21wb25lbnRzL2ZpYmVycy5cbi8vIEkgYXNzdW1lIHBlb3BsZSBhbHJlYWR5IGRvIHRoaXMgKHJlbmRlciBmdW5jdGlvbiByZXR1cm5pbmcgYSBjbGFzcyBjb21wb25lbnQpLFxuLy8gU28gbXkgZG9pbmcgaXQgd291bGQganVzdCB1bm5lY2Vzc2FyaWx5IGRvdWJsZSB0aGUgd3JhcHBlcnMuXG5cbnZhciB2YWxpZGF0ZVNoYXJlZFByb3BzJDEgPSBmdW5jdGlvbiB2YWxpZGF0ZVNoYXJlZFByb3BzKF9yZWYyLCBfcmVmMykge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYyLmRpcmVjdGlvbixcbiAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodCxcbiAgICAgIGxheW91dCA9IF9yZWYyLmxheW91dCxcbiAgICAgIGlubmVyVGFnTmFtZSA9IF9yZWYyLmlubmVyVGFnTmFtZSxcbiAgICAgIG91dGVyVGFnTmFtZSA9IF9yZWYyLm91dGVyVGFnTmFtZSxcbiAgICAgIHdpZHRoID0gX3JlZjIud2lkdGg7XG4gIHZhciBpbnN0YW5jZSA9IF9yZWYzLmluc3RhbmNlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGlubmVyVGFnTmFtZSAhPSBudWxsIHx8IG91dGVyVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZGV2V2FybmluZ3NUYWdOYW1lJDEgJiYgIWRldldhcm5pbmdzVGFnTmFtZSQxLmhhcyhpbnN0YW5jZSkpIHtcbiAgICAgICAgZGV2V2FybmluZ3NUYWdOYW1lJDEuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgaW5uZXJUYWdOYW1lIGFuZCBvdXRlclRhZ05hbWUgcHJvcHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSB0aGUgaW5uZXJFbGVtZW50VHlwZSBhbmQgb3V0ZXJFbGVtZW50VHlwZSBwcm9wcyBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH0gLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG5cblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcblxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgaWYgKGRldldhcm5pbmdzRGlyZWN0aW9uICYmICFkZXZXYXJuaW5nc0RpcmVjdGlvbi5oYXMoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgZGV2V2FybmluZ3NEaXJlY3Rpb24uYWRkKGluc3RhbmNlKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkaXJlY3Rpb24gcHJvcCBzaG91bGQgYmUgZWl0aGVyIFwibHRyXCIgKGRlZmF1bHQpIG9yIFwicnRsXCIuICcgKyAnUGxlYXNlIHVzZSB0aGUgbGF5b3V0IHByb3AgdG8gc3BlY2lmeSBcInZlcnRpY2FsXCIgKGRlZmF1bHQpIG9yIFwiaG9yaXpvbnRhbFwiIG9yaWVudGF0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2x0cic6XG4gICAgICBjYXNlICdydGwnOlxuICAgICAgICAvLyBWYWxpZCB2YWx1ZXNcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdBbiBpbnZhbGlkIFwiZGlyZWN0aW9uXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGVpdGhlciBcImx0clwiIG9yIFwicnRsXCIuICcgKyAoXCJcXFwiXCIgKyBkaXJlY3Rpb24gKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIHN3aXRjaCAobGF5b3V0KSB7XG4gICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzpcbiAgICAgICAgLy8gVmFsaWQgdmFsdWVzXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcImxheW91dFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBlaXRoZXIgXCJob3Jpem9udGFsXCIgb3IgXCJ2ZXJ0aWNhbFwiLiAnICsgKFwiXFxcIlwiICsgbGF5b3V0ICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjaGlsZHJlblwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIFJlYWN0IGNvbXBvbmVudC4gJyArIChcIlxcXCJcIiArIChjaGlsZHJlbiA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjaGlsZHJlbikgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH1cblxuICAgIGlmIChpc0hvcml6b250YWwgJiYgdHlwZW9mIHdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJ3aWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ0hvcml6b250YWwgbGlzdHMgbXVzdCBzcGVjaWZ5IGEgbnVtYmVyIGZvciB3aWR0aC4gJyArIChcIlxcXCJcIiArICh3aWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB3aWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCAmJiB0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJoZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWZXJ0aWNhbCBsaXN0cyBtdXN0IHNwZWNpZnkgYSBudW1iZXIgZm9yIGhlaWdodC4gJyArIChcIlxcXCJcIiArIChoZWlnaHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaGVpZ2h0KSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgREVGQVVMVF9FU1RJTUFURURfSVRFTV9TSVpFJDEgPSA1MDtcblxudmFyIGdldEl0ZW1NZXRhZGF0YSQxID0gZnVuY3Rpb24gZ2V0SXRlbU1ldGFkYXRhKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykge1xuICB2YXIgX3JlZiA9IHByb3BzLFxuICAgICAgaXRlbVNpemUgPSBfcmVmLml0ZW1TaXplO1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG5cbiAgaWYgKGluZGV4ID4gbGFzdE1lYXN1cmVkSW5kZXgpIHtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSAwKSB7XG4gICAgICB2YXIgaXRlbU1ldGFkYXRhID0gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XTtcbiAgICAgIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gbGFzdE1lYXN1cmVkSW5kZXggKyAxOyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgIHZhciBzaXplID0gaXRlbVNpemUoaSk7XG4gICAgICBpdGVtTWV0YWRhdGFNYXBbaV0gPSB7XG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBzaXplOiBzaXplXG4gICAgICB9O1xuICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgfVxuXG4gICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGl0ZW1NZXRhZGF0YU1hcFtpbmRleF07XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW0ocHJvcHMsIGluc3RhbmNlUHJvcHMsIG9mZnNldCkge1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXAsXG4gICAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciBsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID0gbGFzdE1lYXN1cmVkSW5kZXggPiAwID8gaXRlbU1ldGFkYXRhTWFwW2xhc3RNZWFzdXJlZEluZGV4XS5vZmZzZXQgOiAwO1xuXG4gIGlmIChsYXN0TWVhc3VyZWRJdGVtT2Zmc2V0ID49IG9mZnNldCkge1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgbWVhc3VyZWQgaXRlbXMgd2l0aGluIHRoaXMgcmFuZ2UganVzdCB1c2UgYSBiaW5hcnkgc2VhcmNoIGFzIGl0J3MgZmFzdGVyLlxuICAgIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgbGFzdE1lYXN1cmVkSW5kZXgsIDAsIG9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCB5ZXQgbWVhc3VyZWQgdGhpcyBoaWdoLCBmYWxsYmFjayB0byBhbiBleHBvbmVudGlhbCBzZWFyY2ggd2l0aCBhbiBpbm5lciBiaW5hcnkgc2VhcmNoLlxuICAgIC8vIFRoZSBleHBvbmVudGlhbCBzZWFyY2ggYXZvaWRzIHByZS1jb21wdXRpbmcgc2l6ZXMgZm9yIHRoZSBmdWxsIHNldCBvZiBpdGVtcyBhcyBhIGJpbmFyeSBzZWFyY2ggd291bGQuXG4gICAgLy8gVGhlIG92ZXJhbGwgY29tcGxleGl0eSBmb3IgdGhpcyBhcHByb2FjaCBpcyBPKGxvZyBuKS5cbiAgICByZXR1cm4gZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5tYXgoMCwgbGFzdE1lYXN1cmVkSW5kZXgpLCBvZmZzZXQpO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtQmluYXJ5U2VhcmNoJDEgPSBmdW5jdGlvbiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gocHJvcHMsIGluc3RhbmNlUHJvcHMsIGhpZ2gsIGxvdywgb2Zmc2V0KSB7XG4gIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgIHZhciBtaWRkbGUgPSBsb3cgKyBNYXRoLmZsb29yKChoaWdoIC0gbG93KSAvIDIpO1xuICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIG1pZGRsZSwgaW5zdGFuY2VQcm9wcykub2Zmc2V0O1xuXG4gICAgaWYgKGN1cnJlbnRPZmZzZXQgPT09IG9mZnNldCkge1xuICAgICAgcmV0dXJuIG1pZGRsZTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgIGxvdyA9IG1pZGRsZSArIDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50T2Zmc2V0ID4gb2Zmc2V0KSB7XG4gICAgICBoaWdoID0gbWlkZGxlIC0gMTtcbiAgICB9XG4gIH1cblxuICBpZiAobG93ID4gMCkge1xuICAgIHJldHVybiBsb3cgLSAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG52YXIgZmluZE5lYXJlc3RJdGVtRXhwb25lbnRpYWxTZWFyY2gkMSA9IGZ1bmN0aW9uIGZpbmROZWFyZXN0SXRlbUV4cG9uZW50aWFsU2VhcmNoKHByb3BzLCBpbnN0YW5jZVByb3BzLCBpbmRleCwgb2Zmc2V0KSB7XG4gIHZhciBpdGVtQ291bnQgPSBwcm9wcy5pdGVtQ291bnQ7XG4gIHZhciBpbnRlcnZhbCA9IDE7XG5cbiAgd2hpbGUgKGluZGV4IDwgaXRlbUNvdW50ICYmIGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcykub2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgaW5kZXggKz0gaW50ZXJ2YWw7XG4gICAgaW50ZXJ2YWwgKj0gMjtcbiAgfVxuXG4gIHJldHVybiBmaW5kTmVhcmVzdEl0ZW1CaW5hcnlTZWFyY2gkMShwcm9wcywgaW5zdGFuY2VQcm9wcywgTWF0aC5taW4oaW5kZXgsIGl0ZW1Db3VudCAtIDEpLCBNYXRoLmZsb29yKGluZGV4IC8gMiksIG9mZnNldCk7XG59O1xuXG52YXIgZ2V0RXN0aW1hdGVkVG90YWxTaXplID0gZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxTaXplKF9yZWYyLCBfcmVmMykge1xuICB2YXIgaXRlbUNvdW50ID0gX3JlZjIuaXRlbUNvdW50O1xuICB2YXIgaXRlbU1ldGFkYXRhTWFwID0gX3JlZjMuaXRlbU1ldGFkYXRhTWFwLFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemUgPSBfcmVmMy5lc3RpbWF0ZWRJdGVtU2l6ZSxcbiAgICAgIGxhc3RNZWFzdXJlZEluZGV4ID0gX3JlZjMubGFzdE1lYXN1cmVkSW5kZXg7XG4gIHZhciB0b3RhbFNpemVPZk1lYXN1cmVkSXRlbXMgPSAwOyAvLyBFZGdlIGNhc2UgY2hlY2sgZm9yIHdoZW4gdGhlIG51bWJlciBvZiBpdGVtcyBkZWNyZWFzZXMgd2hpbGUgYSBzY3JvbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9idmF1Z2huL3JlYWN0LXdpbmRvdy9wdWxsLzEzOFxuXG4gIGlmIChsYXN0TWVhc3VyZWRJbmRleCA+PSBpdGVtQ291bnQpIHtcbiAgICBsYXN0TWVhc3VyZWRJbmRleCA9IGl0ZW1Db3VudCAtIDE7XG4gIH1cblxuICBpZiAobGFzdE1lYXN1cmVkSW5kZXggPj0gMCkge1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBpdGVtTWV0YWRhdGFNYXBbbGFzdE1lYXN1cmVkSW5kZXhdO1xuICAgIHRvdGFsU2l6ZU9mTWVhc3VyZWRJdGVtcyA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgfVxuXG4gIHZhciBudW1Vbm1lYXN1cmVkSXRlbXMgPSBpdGVtQ291bnQgLSBsYXN0TWVhc3VyZWRJbmRleCAtIDE7XG4gIHZhciB0b3RhbFNpemVPZlVubWVhc3VyZWRJdGVtcyA9IG51bVVubWVhc3VyZWRJdGVtcyAqIGVzdGltYXRlZEl0ZW1TaXplO1xuICByZXR1cm4gdG90YWxTaXplT2ZNZWFzdXJlZEl0ZW1zICsgdG90YWxTaXplT2ZVbm1lYXN1cmVkSXRlbXM7XG59O1xuXG52YXIgVmFyaWFibGVTaXplTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVMaXN0Q29tcG9uZW50KHtcbiAgZ2V0SXRlbU9mZnNldDogZnVuY3Rpb24gZ2V0SXRlbU9mZnNldChwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIGluZGV4LCBpbnN0YW5jZVByb3BzKS5vZmZzZXQ7XG4gIH0sXG4gIGdldEl0ZW1TaXplOiBmdW5jdGlvbiBnZXRJdGVtU2l6ZShwcm9wcywgaW5kZXgsIGluc3RhbmNlUHJvcHMpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VQcm9wcy5pdGVtTWV0YWRhdGFNYXBbaW5kZXhdLnNpemU7XG4gIH0sXG4gIGdldEVzdGltYXRlZFRvdGFsU2l6ZTogZ2V0RXN0aW1hdGVkVG90YWxTaXplLFxuICBnZXRPZmZzZXRGb3JJbmRleEFuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQocHJvcHMsIGluZGV4LCBhbGlnbiwgc2Nyb2xsT2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgICBsYXlvdXQgPSBwcm9wcy5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7IC8vIFRPRE8gRGVwcmVjYXRlIGRpcmVjdGlvbiBcImhvcml6b250YWxcIlxuXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGl0ZW1NZXRhZGF0YSA9IGdldEl0ZW1NZXRhZGF0YSQxKHByb3BzLCBpbmRleCwgaW5zdGFuY2VQcm9wcyk7IC8vIEdldCBlc3RpbWF0ZWQgdG90YWwgc2l6ZSBhZnRlciBJdGVtTWV0YWRhdGEgaXMgY29tcHV0ZWQsXG4gICAgLy8gVG8gZW5zdXJlIGl0IHJlZmxlY3RzIGFjdHVhbCBtZWFzdXJlbWVudHMgaW5zdGVhZCBvZiBqdXN0IGVzdGltYXRlcy5cblxuICAgIHZhciBlc3RpbWF0ZWRUb3RhbFNpemUgPSBnZXRFc3RpbWF0ZWRUb3RhbFNpemUocHJvcHMsIGluc3RhbmNlUHJvcHMpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihlc3RpbWF0ZWRUb3RhbFNpemUgLSBzaXplLCBpdGVtTWV0YWRhdGEub2Zmc2V0KSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IE1hdGgubWF4KDAsIGl0ZW1NZXRhZGF0YS5vZmZzZXQgLSBzaXplICsgaXRlbU1ldGFkYXRhLnNpemUpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAtIHNpemUgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCArIHNpemUpIHtcbiAgICAgICAgYWxpZ24gPSAnYXV0byc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgcmV0dXJuIG1heE9mZnNldDtcblxuICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcblxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsT2Zmc2V0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxPZmZzZXQgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbE9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgIH1cbiAgfSxcbiAgZ2V0U3RhcnRJbmRleEZvck9mZnNldDogZnVuY3Rpb24gZ2V0U3RhcnRJbmRleEZvck9mZnNldChwcm9wcywgb2Zmc2V0LCBpbnN0YW5jZVByb3BzKSB7XG4gICAgcmV0dXJuIGZpbmROZWFyZXN0SXRlbSQxKHByb3BzLCBpbnN0YW5jZVByb3BzLCBvZmZzZXQpO1xuICB9LFxuICBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRTdG9wSW5kZXhGb3JTdGFydEluZGV4KHByb3BzLCBzdGFydEluZGV4LCBzY3JvbGxPZmZzZXQsIGluc3RhbmNlUHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBoZWlnaHQgPSBwcm9wcy5oZWlnaHQsXG4gICAgICAgIGl0ZW1Db3VudCA9IHByb3BzLml0ZW1Db3VudCxcbiAgICAgICAgbGF5b3V0ID0gcHJvcHMubGF5b3V0LFxuICAgICAgICB3aWR0aCA9IHByb3BzLndpZHRoOyAvLyBUT0RPIERlcHJlY2F0ZSBkaXJlY3Rpb24gXCJob3Jpem9udGFsXCJcblxuICAgIHZhciBpc0hvcml6b250YWwgPSBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyB8fCBsYXlvdXQgPT09ICdob3Jpem9udGFsJztcbiAgICB2YXIgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/IHdpZHRoIDogaGVpZ2h0O1xuICAgIHZhciBpdGVtTWV0YWRhdGEgPSBnZXRJdGVtTWV0YWRhdGEkMShwcm9wcywgc3RhcnRJbmRleCwgaW5zdGFuY2VQcm9wcyk7XG4gICAgdmFyIG1heE9mZnNldCA9IHNjcm9sbE9mZnNldCArIHNpemU7XG4gICAgdmFyIG9mZnNldCA9IGl0ZW1NZXRhZGF0YS5vZmZzZXQgKyBpdGVtTWV0YWRhdGEuc2l6ZTtcbiAgICB2YXIgc3RvcEluZGV4ID0gc3RhcnRJbmRleDtcblxuICAgIHdoaWxlIChzdG9wSW5kZXggPCBpdGVtQ291bnQgLSAxICYmIG9mZnNldCA8IG1heE9mZnNldCkge1xuICAgICAgc3RvcEluZGV4Kys7XG4gICAgICBvZmZzZXQgKz0gZ2V0SXRlbU1ldGFkYXRhJDEocHJvcHMsIHN0b3BJbmRleCwgaW5zdGFuY2VQcm9wcykuc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcEluZGV4O1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMsIGluc3RhbmNlKSB7XG4gICAgdmFyIF9yZWY0ID0gcHJvcHMsXG4gICAgICAgIGVzdGltYXRlZEl0ZW1TaXplID0gX3JlZjQuZXN0aW1hdGVkSXRlbVNpemU7XG4gICAgdmFyIGluc3RhbmNlUHJvcHMgPSB7XG4gICAgICBpdGVtTWV0YWRhdGFNYXA6IHt9LFxuICAgICAgZXN0aW1hdGVkSXRlbVNpemU6IGVzdGltYXRlZEl0ZW1TaXplIHx8IERFRkFVTFRfRVNUSU1BVEVEX0lURU1fU0laRSQxLFxuICAgICAgbGFzdE1lYXN1cmVkSW5kZXg6IC0xXG4gICAgfTtcblxuICAgIGluc3RhbmNlLnJlc2V0QWZ0ZXJJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChzaG91bGRGb3JjZVVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNob3VsZEZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2VQcm9wcy5sYXN0TWVhc3VyZWRJbmRleCA9IE1hdGgubWluKGluc3RhbmNlUHJvcHMubGFzdE1lYXN1cmVkSW5kZXgsIGluZGV4IC0gMSk7IC8vIFdlIGNvdWxkIHBvdGVudGlhbGx5IG9wdGltaXplIGZ1cnRoZXIgYnkgb25seSBldmljdGluZyBzdHlsZXMgYWZ0ZXIgdGhpcyBpbmRleCxcbiAgICAgIC8vIEJ1dCBzaW5jZSBzdHlsZXMgYXJlIG9ubHkgY2FjaGVkIHdoaWxlIHNjcm9sbGluZyBpcyBpbiBwcm9ncmVzcy1cbiAgICAgIC8vIEl0IHNlZW1zIGFuIHVubmVjZXNzYXJ5IG9wdGltaXphdGlvbi5cbiAgICAgIC8vIEl0J3MgdW5saWtlbHkgdGhhdCByZXNldEFmdGVySW5kZXgoKSB3aWxsIGJlIGNhbGxlZCB3aGlsZSBhIHVzZXIgaXMgc2Nyb2xsaW5nLlxuXG4gICAgICBpbnN0YW5jZS5fZ2V0SXRlbVN0eWxlQ2FjaGUoLTEpO1xuXG4gICAgICBpZiAoc2hvdWxkRm9yY2VVcGRhdGUpIHtcbiAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGluc3RhbmNlUHJvcHM7XG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IGZhbHNlLFxuICB2YWxpZGF0ZVByb3BzOiBmdW5jdGlvbiB2YWxpZGF0ZVByb3BzKF9yZWY1KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtU2l6ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgZnVuY3Rpb24uICcgKyAoXCJcXFwiXCIgKyAoaXRlbVNpemUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgaXRlbVNpemUpICsgXCJcXFwiIHdhcyBzcGVjaWZpZWQuXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgRml4ZWRTaXplR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVHcmlkQ29tcG9uZW50KHtcbiAgZ2V0Q29sdW1uT2Zmc2V0OiBmdW5jdGlvbiBnZXRDb2x1bW5PZmZzZXQoX3JlZiwgaW5kZXgpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmLmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBpbmRleCAqIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRDb2x1bW5XaWR0aDogZnVuY3Rpb24gZ2V0Q29sdW1uV2lkdGgoX3JlZjIsIGluZGV4KSB7XG4gICAgdmFyIGNvbHVtbldpZHRoID0gX3JlZjIuY29sdW1uV2lkdGg7XG4gICAgcmV0dXJuIGNvbHVtbldpZHRoO1xuICB9LFxuICBnZXRSb3dPZmZzZXQ6IGZ1bmN0aW9uIGdldFJvd09mZnNldChfcmVmMywgaW5kZXgpIHtcbiAgICB2YXIgcm93SGVpZ2h0ID0gX3JlZjMucm93SGVpZ2h0O1xuICAgIHJldHVybiBpbmRleCAqIHJvd0hlaWdodDtcbiAgfSxcbiAgZ2V0Um93SGVpZ2h0OiBmdW5jdGlvbiBnZXRSb3dIZWlnaHQoX3JlZjQsIGluZGV4KSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWY0LnJvd0hlaWdodDtcbiAgICByZXR1cm4gcm93SGVpZ2h0O1xuICB9LFxuICBnZXRFc3RpbWF0ZWRUb3RhbEhlaWdodDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxIZWlnaHQoX3JlZjUpIHtcbiAgICB2YXIgcm93Q291bnQgPSBfcmVmNS5yb3dDb3VudCxcbiAgICAgICAgcm93SGVpZ2h0ID0gX3JlZjUucm93SGVpZ2h0O1xuICAgIHJldHVybiByb3dIZWlnaHQgKiByb3dDb3VudDtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxXaWR0aDogZnVuY3Rpb24gZ2V0RXN0aW1hdGVkVG90YWxXaWR0aChfcmVmNikge1xuICAgIHZhciBjb2x1bW5Db3VudCA9IF9yZWY2LmNvbHVtbkNvdW50LFxuICAgICAgICBjb2x1bW5XaWR0aCA9IF9yZWY2LmNvbHVtbldpZHRoO1xuICAgIHJldHVybiBjb2x1bW5XaWR0aCAqIGNvbHVtbkNvdW50O1xuICB9LFxuICBnZXRPZmZzZXRGb3JDb2x1bW5BbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckNvbHVtbkFuZEFsaWdubWVudChfcmVmNywgY29sdW1uSW5kZXgsIGFsaWduLCBzY3JvbGxMZWZ0LCBpbnN0YW5jZVByb3BzLCBzY3JvbGxiYXJTaXplKSB7XG4gICAgdmFyIGNvbHVtbkNvdW50ID0gX3JlZjcuY29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbldpZHRoID0gX3JlZjcuY29sdW1uV2lkdGgsXG4gICAgICAgIHdpZHRoID0gX3JlZjcud2lkdGg7XG4gICAgdmFyIGxhc3RDb2x1bW5PZmZzZXQgPSBNYXRoLm1heCgwLCBjb2x1bW5Db3VudCAqIGNvbHVtbldpZHRoIC0gd2lkdGgpO1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1pbihsYXN0Q29sdW1uT2Zmc2V0LCBjb2x1bW5JbmRleCAqIGNvbHVtbldpZHRoKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gTWF0aC5tYXgoMCwgY29sdW1uSW5kZXggKiBjb2x1bW5XaWR0aCAtIHdpZHRoICsgc2Nyb2xsYmFyU2l6ZSArIGNvbHVtbldpZHRoKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbExlZnQgPj0gbWluT2Zmc2V0IC0gd2lkdGggJiYgc2Nyb2xsTGVmdCA8PSBtYXhPZmZzZXQgKyB3aWR0aCkge1xuICAgICAgICBhbGlnbiA9ICdhdXRvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduID0gJ2NlbnRlcic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuXG4gICAgICBjYXNlICdlbmQnOlxuICAgICAgICByZXR1cm4gbWluT2Zmc2V0O1xuXG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAvLyBCdXQgbmVhciB0aGUgZWRnZXMgb2YgdGhlIGxpc3QsIHRoaXMgZG9lc24ndCBob2xkIHRydWUuXG4gICAgICAgIHZhciBtaWRkbGVPZmZzZXQgPSBNYXRoLnJvdW5kKG1pbk9mZnNldCArIChtYXhPZmZzZXQgLSBtaW5PZmZzZXQpIC8gMik7XG5cbiAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbCh3aWR0aCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RDb2x1bW5PZmZzZXQgKyBNYXRoLmZsb29yKHdpZHRoIC8gMikpIHtcbiAgICAgICAgICByZXR1cm4gbGFzdENvbHVtbk9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG1pZGRsZU9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdhdXRvJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzY3JvbGxMZWZ0ID49IG1pbk9mZnNldCAmJiBzY3JvbGxMZWZ0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKG1pbk9mZnNldCA+IG1heE9mZnNldCkge1xuICAgICAgICAgIC8vIEJlY2F1c2Ugd2Ugb25seSB0YWtlIGludG8gYWNjb3VudCB0aGUgc2Nyb2xsYmFyIHNpemUgd2hlbiBjYWxjdWxhdGluZyBtaW5PZmZzZXRcbiAgICAgICAgICAvLyB0aGlzIHZhbHVlIGNhbiBiZSBsYXJnZXIgdGhhbiBtYXhPZmZzZXQgd2hlbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChzY3JvbGxMZWZ0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldE9mZnNldEZvclJvd0FuZEFsaWdubWVudDogZnVuY3Rpb24gZ2V0T2Zmc2V0Rm9yUm93QW5kQWxpZ25tZW50KF9yZWY4LCByb3dJbmRleCwgYWxpZ24sIHNjcm9sbFRvcCwgaW5zdGFuY2VQcm9wcywgc2Nyb2xsYmFyU2l6ZSkge1xuICAgIHZhciByb3dIZWlnaHQgPSBfcmVmOC5yb3dIZWlnaHQsXG4gICAgICAgIGhlaWdodCA9IF9yZWY4LmhlaWdodCxcbiAgICAgICAgcm93Q291bnQgPSBfcmVmOC5yb3dDb3VudDtcbiAgICB2YXIgbGFzdFJvd09mZnNldCA9IE1hdGgubWF4KDAsIHJvd0NvdW50ICogcm93SGVpZ2h0IC0gaGVpZ2h0KTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdFJvd09mZnNldCwgcm93SW5kZXggKiByb3dIZWlnaHQpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCByb3dJbmRleCAqIHJvd0hlaWdodCAtIGhlaWdodCArIHNjcm9sbGJhclNpemUgKyByb3dIZWlnaHQpO1xuXG4gICAgaWYgKGFsaWduID09PSAnc21hcnQnKSB7XG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAtIGhlaWdodCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0ICsgaGVpZ2h0KSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIC8vIFwiQ2VudGVyZWRcIiBvZmZzZXQgaXMgdXN1YWxseSB0aGUgYXZlcmFnZSBvZiB0aGUgbWluIGFuZCBtYXguXG4gICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgdmFyIG1pZGRsZU9mZnNldCA9IE1hdGgucm91bmQobWluT2Zmc2V0ICsgKG1heE9mZnNldCAtIG1pbk9mZnNldCkgLyAyKTtcblxuICAgICAgICBpZiAobWlkZGxlT2Zmc2V0IDwgTWF0aC5jZWlsKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIG5lYXIgdGhlIGJlZ2lubmluZ1xuICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RSb3dPZmZzZXQgKyBNYXRoLmZsb29yKGhlaWdodCAvIDIpKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RSb3dPZmZzZXQ7IC8vIG5lYXIgdGhlIGVuZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1pbk9mZnNldCAmJiBzY3JvbGxUb3AgPD0gbWF4T2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNjcm9sbFRvcDtcbiAgICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPiBtYXhPZmZzZXQpIHtcbiAgICAgICAgICAvLyBCZWNhdXNlIHdlIG9ubHkgdGFrZSBpbnRvIGFjY291bnQgdGhlIHNjcm9sbGJhciBzaXplIHdoZW4gY2FsY3VsYXRpbmcgbWluT2Zmc2V0XG4gICAgICAgICAgLy8gdGhpcyB2YWx1ZSBjYW4gYmUgbGFyZ2VyIHRoYW4gbWF4T2Zmc2V0IHdoZW4gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wIDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldENvbHVtblN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjksIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmOS5jb2x1bW5XaWR0aCxcbiAgICAgICAgY29sdW1uQ291bnQgPSBfcmVmOS5jb2x1bW5Db3VudDtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oY29sdW1uQ291bnQgLSAxLCBNYXRoLmZsb29yKHNjcm9sbExlZnQgLyBjb2x1bW5XaWR0aCkpKTtcbiAgfSxcbiAgZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleDogZnVuY3Rpb24gZ2V0Q29sdW1uU3RvcEluZGV4Rm9yU3RhcnRJbmRleChfcmVmMTAsIHN0YXJ0SW5kZXgsIHNjcm9sbExlZnQpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTAuY29sdW1uV2lkdGgsXG4gICAgICAgIGNvbHVtbkNvdW50ID0gX3JlZjEwLmNvbHVtbkNvdW50LFxuICAgICAgICB3aWR0aCA9IF9yZWYxMC53aWR0aDtcbiAgICB2YXIgbGVmdCA9IHN0YXJ0SW5kZXggKiBjb2x1bW5XaWR0aDtcbiAgICB2YXIgbnVtVmlzaWJsZUNvbHVtbnMgPSBNYXRoLmNlaWwoKHdpZHRoICsgc2Nyb2xsTGVmdCAtIGxlZnQpIC8gY29sdW1uV2lkdGgpO1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW5Db3VudCAtIDEsIHN0YXJ0SW5kZXggKyBudW1WaXNpYmxlQ29sdW1ucyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0OiBmdW5jdGlvbiBnZXRSb3dTdGFydEluZGV4Rm9yT2Zmc2V0KF9yZWYxMSwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMS5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjExLnJvd0NvdW50O1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihyb3dDb3VudCAtIDEsIE1hdGguZmxvb3Ioc2Nyb2xsVG9wIC8gcm93SGVpZ2h0KSkpO1xuICB9LFxuICBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4OiBmdW5jdGlvbiBnZXRSb3dTdG9wSW5kZXhGb3JTdGFydEluZGV4KF9yZWYxMiwgc3RhcnRJbmRleCwgc2Nyb2xsVG9wKSB7XG4gICAgdmFyIHJvd0hlaWdodCA9IF9yZWYxMi5yb3dIZWlnaHQsXG4gICAgICAgIHJvd0NvdW50ID0gX3JlZjEyLnJvd0NvdW50LFxuICAgICAgICBoZWlnaHQgPSBfcmVmMTIuaGVpZ2h0O1xuICAgIHZhciB0b3AgPSBzdGFydEluZGV4ICogcm93SGVpZ2h0O1xuICAgIHZhciBudW1WaXNpYmxlUm93cyA9IE1hdGguY2VpbCgoaGVpZ2h0ICsgc2Nyb2xsVG9wIC0gdG9wKSAvIHJvd0hlaWdodCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHJvd0NvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVSb3dzIC0gMSAvLyAtMSBpcyBiZWNhdXNlIHN0b3AgaW5kZXggaXMgaW5jbHVzaXZlXG4gICAgKSk7XG4gIH0sXG4gIGluaXRJbnN0YW5jZVByb3BzOiBmdW5jdGlvbiBpbml0SW5zdGFuY2VQcm9wcyhwcm9wcykgey8vIE5vb3BcbiAgfSxcbiAgc2hvdWxkUmVzZXRTdHlsZUNhY2hlT25JdGVtU2l6ZUNoYW5nZTogdHJ1ZSxcbiAgdmFsaWRhdGVQcm9wczogZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhfcmVmMTMpIHtcbiAgICB2YXIgY29sdW1uV2lkdGggPSBfcmVmMTMuY29sdW1uV2lkdGgsXG4gICAgICAgIHJvd0hlaWdodCA9IF9yZWYxMy5yb3dIZWlnaHQ7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBjb2x1bW5XaWR0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJjb2x1bW5XaWR0aFwiIHByb3AgaGFzIGJlZW4gc3BlY2lmaWVkLiAnICsgJ1ZhbHVlIHNob3VsZCBiZSBhIG51bWJlci4gJyArIChcIlxcXCJcIiArIChjb2x1bW5XaWR0aCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjb2x1bW5XaWR0aCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHJvd0hlaWdodCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0FuIGludmFsaWQgXCJyb3dIZWlnaHRcIiBwcm9wIGhhcyBiZWVuIHNwZWNpZmllZC4gJyArICdWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXIuICcgKyAoXCJcXFwiXCIgKyAocm93SGVpZ2h0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJvd0hlaWdodCkgKyBcIlxcXCIgd2FzIHNwZWNpZmllZC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBGaXhlZFNpemVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUxpc3RDb21wb25lbnQoe1xuICBnZXRJdGVtT2Zmc2V0OiBmdW5jdGlvbiBnZXRJdGVtT2Zmc2V0KF9yZWYsIGluZGV4KSB7XG4gICAgdmFyIGl0ZW1TaXplID0gX3JlZi5pdGVtU2l6ZTtcbiAgICByZXR1cm4gaW5kZXggKiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0SXRlbVNpemU6IGZ1bmN0aW9uIGdldEl0ZW1TaXplKF9yZWYyLCBpbmRleCkge1xuICAgIHZhciBpdGVtU2l6ZSA9IF9yZWYyLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZTtcbiAgfSxcbiAgZ2V0RXN0aW1hdGVkVG90YWxTaXplOiBmdW5jdGlvbiBnZXRFc3RpbWF0ZWRUb3RhbFNpemUoX3JlZjMpIHtcbiAgICB2YXIgaXRlbUNvdW50ID0gX3JlZjMuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWYzLml0ZW1TaXplO1xuICAgIHJldHVybiBpdGVtU2l6ZSAqIGl0ZW1Db3VudDtcbiAgfSxcbiAgZ2V0T2Zmc2V0Rm9ySW5kZXhBbmRBbGlnbm1lbnQ6IGZ1bmN0aW9uIGdldE9mZnNldEZvckluZGV4QW5kQWxpZ25tZW50KF9yZWY0LCBpbmRleCwgYWxpZ24sIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNC5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY0LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjQuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY0Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNC5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjQud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBzaXplID0gaXNIb3Jpem9udGFsID8gd2lkdGggOiBoZWlnaHQ7XG4gICAgdmFyIGxhc3RJdGVtT2Zmc2V0ID0gTWF0aC5tYXgoMCwgaXRlbUNvdW50ICogaXRlbVNpemUgLSBzaXplKTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gTWF0aC5taW4obGFzdEl0ZW1PZmZzZXQsIGluZGV4ICogaXRlbVNpemUpO1xuICAgIHZhciBtaW5PZmZzZXQgPSBNYXRoLm1heCgwLCBpbmRleCAqIGl0ZW1TaXplIC0gc2l6ZSArIGl0ZW1TaXplKTtcblxuICAgIGlmIChhbGlnbiA9PT0gJ3NtYXJ0Jykge1xuICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgLSBzaXplICYmIHNjcm9sbE9mZnNldCA8PSBtYXhPZmZzZXQgKyBzaXplKSB7XG4gICAgICAgIGFsaWduID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgIHJldHVybiBtYXhPZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgIHJldHVybiBtaW5PZmZzZXQ7XG5cbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBcIkNlbnRlcmVkXCIgb2Zmc2V0IGlzIHVzdWFsbHkgdGhlIGF2ZXJhZ2Ugb2YgdGhlIG1pbiBhbmQgbWF4LlxuICAgICAgICAgIC8vIEJ1dCBuZWFyIHRoZSBlZGdlcyBvZiB0aGUgbGlzdCwgdGhpcyBkb2Vzbid0IGhvbGQgdHJ1ZS5cbiAgICAgICAgICB2YXIgbWlkZGxlT2Zmc2V0ID0gTWF0aC5yb3VuZChtaW5PZmZzZXQgKyAobWF4T2Zmc2V0IC0gbWluT2Zmc2V0KSAvIDIpO1xuXG4gICAgICAgICAgaWYgKG1pZGRsZU9mZnNldCA8IE1hdGguY2VpbChzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBuZWFyIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mZnNldCA+IGxhc3RJdGVtT2Zmc2V0ICsgTWF0aC5mbG9vcihzaXplIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0SXRlbU9mZnNldDsgLy8gbmVhciB0aGUgZW5kXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtaWRkbGVPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHNjcm9sbE9mZnNldCA+PSBtaW5PZmZzZXQgJiYgc2Nyb2xsT2Zmc2V0IDw9IG1heE9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY3JvbGxPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsT2Zmc2V0IDwgbWluT2Zmc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIG1pbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbWF4T2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQ6IGZ1bmN0aW9uIGdldFN0YXJ0SW5kZXhGb3JPZmZzZXQoX3JlZjUsIG9mZnNldCkge1xuICAgIHZhciBpdGVtQ291bnQgPSBfcmVmNS5pdGVtQ291bnQsXG4gICAgICAgIGl0ZW1TaXplID0gX3JlZjUuaXRlbVNpemU7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKGl0ZW1Db3VudCAtIDEsIE1hdGguZmxvb3Iob2Zmc2V0IC8gaXRlbVNpemUpKSk7XG4gIH0sXG4gIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXg6IGZ1bmN0aW9uIGdldFN0b3BJbmRleEZvclN0YXJ0SW5kZXgoX3JlZjYsIHN0YXJ0SW5kZXgsIHNjcm9sbE9mZnNldCkge1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcmVmNi5kaXJlY3Rpb24sXG4gICAgICAgIGhlaWdodCA9IF9yZWY2LmhlaWdodCxcbiAgICAgICAgaXRlbUNvdW50ID0gX3JlZjYuaXRlbUNvdW50LFxuICAgICAgICBpdGVtU2l6ZSA9IF9yZWY2Lml0ZW1TaXplLFxuICAgICAgICBsYXlvdXQgPSBfcmVmNi5sYXlvdXQsXG4gICAgICAgIHdpZHRoID0gX3JlZjYud2lkdGg7XG4gICAgLy8gVE9ETyBEZXByZWNhdGUgZGlyZWN0aW9uIFwiaG9yaXpvbnRhbFwiXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnIHx8IGxheW91dCA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBvZmZzZXQgPSBzdGFydEluZGV4ICogaXRlbVNpemU7XG4gICAgdmFyIHNpemUgPSBpc0hvcml6b250YWwgPyB3aWR0aCA6IGhlaWdodDtcbiAgICB2YXIgbnVtVmlzaWJsZUl0ZW1zID0gTWF0aC5jZWlsKChzaXplICsgc2Nyb2xsT2Zmc2V0IC0gb2Zmc2V0KSAvIGl0ZW1TaXplKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oaXRlbUNvdW50IC0gMSwgc3RhcnRJbmRleCArIG51bVZpc2libGVJdGVtcyAtIDEgLy8gLTEgaXMgYmVjYXVzZSBzdG9wIGluZGV4IGlzIGluY2x1c2l2ZVxuICAgICkpO1xuICB9LFxuICBpbml0SW5zdGFuY2VQcm9wczogZnVuY3Rpb24gaW5pdEluc3RhbmNlUHJvcHMocHJvcHMpIHsvLyBOb29wXG4gIH0sXG4gIHNob3VsZFJlc2V0U3R5bGVDYWNoZU9uSXRlbVNpemVDaGFuZ2U6IHRydWUsXG4gIHZhbGlkYXRlUHJvcHM6IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoX3JlZjcpIHtcbiAgICB2YXIgaXRlbVNpemUgPSBfcmVmNy5pdGVtU2l6ZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW1TaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBFcnJvcignQW4gaW52YWxpZCBcIml0ZW1TaXplXCIgcHJvcCBoYXMgYmVlbiBzcGVjaWZpZWQuICcgKyAnVmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyLiAnICsgKFwiXFxcIlwiICsgKGl0ZW1TaXplID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGl0ZW1TaXplKSArIFwiXFxcIiB3YXMgc3BlY2lmaWVkLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLy8gUHVsbGVkIGZyb20gcmVhY3QtY29tcGF0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC1jb21wYXQvYmxvYi83YzVkZTAwZTdjODVlMmZmZDAxMWJmM2FmMDI4OTliNjNmNjk5ZDNhL3NyYy9pbmRleC5qcyNMMzQ5XG5mdW5jdGlvbiBzaGFsbG93RGlmZmVycyhwcmV2LCBuZXh0KSB7XG4gIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBwcmV2KSB7XG4gICAgaWYgKCEoYXR0cmlidXRlIGluIG5leHQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfYXR0cmlidXRlIGluIG5leHQpIHtcbiAgICBpZiAocHJldltfYXR0cmlidXRlXSAhPT0gbmV4dFtfYXR0cmlidXRlXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBJdCBrbm93cyB0byBjb21wYXJlIGluZGl2aWR1YWwgc3R5bGUgcHJvcHMgYW5kIGlnbm9yZSB0aGUgd3JhcHBlciBvYmplY3QuXG4vLyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0bWVtb1xuXG5mdW5jdGlvbiBhcmVFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgcHJldlN0eWxlID0gcHJldlByb3BzLnN0eWxlLFxuICAgICAgcHJldlJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcmV2UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICB2YXIgbmV4dFN0eWxlID0gbmV4dFByb3BzLnN0eWxlLFxuICAgICAgbmV4dFJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShuZXh0UHJvcHMsIFtcInN0eWxlXCJdKTtcblxuICByZXR1cm4gIXNoYWxsb3dEaWZmZXJzKHByZXZTdHlsZSwgbmV4dFN0eWxlKSAmJiAhc2hhbGxvd0RpZmZlcnMocHJldlJlc3QsIG5leHRSZXN0KTtcbn1cblxuLy8gSXQga25vd3MgdG8gY29tcGFyZSBpbmRpdmlkdWFsIHN0eWxlIHByb3BzIGFuZCBpZ25vcmUgdGhlIHdyYXBwZXIgb2JqZWN0LlxuLy8gU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1jb21wb25lbnQuaHRtbCNzaG91bGRjb21wb25lbnR1cGRhdGVcblxuZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHJldHVybiAhYXJlRXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCBzaGFsbG93RGlmZmVycyh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xufVxuXG5leHBvcnQgeyBWYXJpYWJsZVNpemVHcmlkLCBWYXJpYWJsZVNpemVMaXN0LCBGaXhlZFNpemVHcmlkLCBGaXhlZFNpemVMaXN0LCBhcmVFcXVhbCwgc2hvdWxkQ29tcG9uZW50VXBkYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE2LjEtbHRzXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB0aW1lb3V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59KCk7XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBub2RlIG9mIHRoZSByZWZlcmVuY2Ugb2JqZWN0LCBvciB0aGUgcmVmZXJlbmNlIG9iamVjdCBpdHNlbGYuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlID8gcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgOiByZWZlcmVuY2U7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10pICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiByZWZlcmVuY2UgZWxlbWVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApO1xuXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2VcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUG9wcGVySnMgZnJvbSAncG9wcGVyLmpzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBmbGlwUGxhY2VtZW50KHBsYWNlbWVudCwgdGhlbWUpIHtcbiAgdmFyIGRpcmVjdGlvbiA9IHRoZW1lICYmIHRoZW1lLmRpcmVjdGlvbiB8fCAnbHRyJztcblxuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJykge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgIGNhc2UgJ2JvdHRvbS1lbmQnOlxuICAgICAgcmV0dXJuICdib3R0b20tc3RhcnQnO1xuXG4gICAgY2FzZSAnYm90dG9tLXN0YXJ0JzpcbiAgICAgIHJldHVybiAnYm90dG9tLWVuZCc7XG5cbiAgICBjYXNlICd0b3AtZW5kJzpcbiAgICAgIHJldHVybiAndG9wLXN0YXJ0JztcblxuICAgIGNhc2UgJ3RvcC1zdGFydCc6XG4gICAgICByZXR1cm4gJ3RvcC1lbmQnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgZGVmYXVsdFBvcHBlck9wdGlvbnMgPSB7fTtcbi8qKlxuICogUG9wcGVycyByZWx5IG9uIHRoZSAzcmQgcGFydHkgbGlicmFyeSBbUG9wcGVyLmpzXShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92MS8pIGZvciBwb3NpdGlvbmluZy5cbiAqL1xuXG52YXIgUG9wcGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFuY2hvckVsID0gcHJvcHMuYW5jaG9yRWwsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgX3Byb3BzJGtlZXBNb3VudGVkID0gcHJvcHMua2VlcE1vdW50ZWQsXG4gICAgICBrZWVwTW91bnRlZCA9IF9wcm9wcyRrZWVwTW91bnRlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMka2VlcE1vdW50ZWQsXG4gICAgICBtb2RpZmllcnMgPSBwcm9wcy5tb2RpZmllcnMsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRwbGFjZW1lbnQgPSBwcm9wcy5wbGFjZW1lbnQsXG4gICAgICBpbml0aWFsUGxhY2VtZW50ID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2JvdHRvbScgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgX3Byb3BzJHBvcHBlck9wdGlvbnMgPSBwcm9wcy5wb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IF9wcm9wcyRwb3BwZXJPcHRpb25zID09PSB2b2lkIDAgPyBkZWZhdWx0UG9wcGVyT3B0aW9ucyA6IF9wcm9wcyRwb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmUHJvcCA9IHByb3BzLnBvcHBlclJlZixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbiA9IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICB0cmFuc2l0aW9uID0gX3Byb3BzJHRyYW5zaXRpb24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHRyYW5zaXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yRWxcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXJPcHRpb25zXCIsIFwicG9wcGVyUmVmXCIsIFwic3R5bGVcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB2YXIgdG9vbHRpcFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG93blJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgcmVmKTtcbiAgdmFyIHBvcHBlclJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVBvcHBlclJlZiA9IHVzZUZvcmtSZWYocG9wcGVyUmVmLCBwb3BwZXJSZWZQcm9wKTtcbiAgdmFyIGhhbmRsZVBvcHBlclJlZlJlZiA9IFJlYWN0LnVzZVJlZihoYW5kbGVQb3BwZXJSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQgPSBoYW5kbGVQb3BwZXJSZWY7XG4gIH0sIFtoYW5kbGVQb3BwZXJSZWZdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShwb3BwZXJSZWZQcm9wLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBvcHBlclJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBydGxQbGFjZW1lbnQgPSBmbGlwUGxhY2VtZW50KGluaXRpYWxQbGFjZW1lbnQsIHRoZW1lKTtcbiAgLyoqXG4gICAqIHBsYWNlbWVudCBpbml0aWFsaXplZCBmcm9tIHByb3AgYnV0IGNhbiBjaGFuZ2UgZHVyaW5nIGxpZmV0aW1lIGlmIG1vZGlmaWVycy5mbGlwLlxuICAgKiBtb2RpZmllcnMuZmxpcCBpcyBlc3NlbnRpYWxseSBhIGZsaXAgZm9yIGNvbnRyb2xsZWQvdW5jb250cm9sbGVkIGJlaGF2aW9yXG4gICAqL1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUocnRsUGxhY2VtZW50KSxcbiAgICAgIHBsYWNlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRQbGFjZW1lbnQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHBvcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICBwb3BwZXJSZWYuY3VycmVudC51cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlT3BlbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRvb2x0aXBSZWYuY3VycmVudCB8fCAhYW5jaG9yRWwgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmRlc3Ryb3koKTtcbiAgICAgIGhhbmRsZVBvcHBlclJlZlJlZi5jdXJyZW50KG51bGwpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVQb3BwZXJVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BwZXJVcGRhdGUoZGF0YSkge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChhbmNob3JFbCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBvcHBlciA9IG5ldyBQb3BwZXJKcyhnZXRBbmNob3JFbChhbmNob3JFbCksIHRvb2x0aXBSZWYuY3VycmVudCwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBydGxQbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBkaXNhYmxlUG9ydGFsID8ge30gOiB7XG4gICAgICAgIC8vIEl0J3MgdXNpbmcgc2Nyb2xsUGFyZW50IGJ5IGRlZmF1bHQsIHdlIGNhbiB1c2UgdGhlIHZpZXdwb3J0IHdoZW4gdXNpbmcgYSBwb3J0YWwuXG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnd2luZG93J1xuICAgICAgICB9XG4gICAgICB9LCBtb2RpZmllcnMsIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKSxcbiAgICAgIC8vIFdlIGNvdWxkIGhhdmUgYmVlbiB1c2luZyBhIGN1c3RvbSBtb2RpZmllciBsaWtlIHJlYWN0LXBvcHBlciBpcyBkb2luZy5cbiAgICAgIC8vIEJ1dCBpdCBzZWVtcyB0aGlzIGlzIHRoZSBiZXN0IHB1YmxpYyBBUEkgZm9yIHRoaXMgdXNlIGNhc2UuXG4gICAgICBvbkNyZWF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vbkNyZWF0ZSksXG4gICAgICBvblVwZGF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSlcbiAgICB9KSk7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQocG9wcGVyKTtcbiAgfSwgW2FuY2hvckVsLCBkaXNhYmxlUG9ydGFsLCBtb2RpZmllcnMsIG9wZW4sIHJ0bFBsYWNlbWVudCwgcG9wcGVyT3B0aW9uc10pO1xuICB2YXIgaGFuZGxlUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBzZXRSZWYob3duUmVmLCBub2RlKTtcbiAgICBoYW5kbGVPcGVuKCk7XG4gIH0sIFtvd25SZWYsIGhhbmRsZU9wZW5dKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcigpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKCkge1xuICAgIGlmICghcG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwb3BwZXJSZWYuY3VycmVudC5kZXN0cm95KCk7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQobnVsbCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gICAgaGFuZGxlQ2xvc2UoKTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4gJiYgIXRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBoYW5kbGVFeGl0ZWQgd2lsbCBjYWxsIHRoaXMuXG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIHRyYW5zaXRpb25dKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9O1xuXG4gIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSB7XG4gICAgICBpbjogb3BlbixcbiAgICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgcm9sZTogXCJ0b29sdGlwXCJcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgLy8gUHJldmVudHMgc2Nyb2xsIGlzc3VlLCB3YWl0aW5nIGZvciBQb3BwZXIuanMgdG8gYWRkIHRoaXMgc3R5bGUgb25jZSBpbml0aWF0ZWQuXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIC8vIEZpeCBQb3BwZXIuanMgZGlzcGxheSBpc3N1ZVxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGRpc3BsYXk6ICFvcGVuICYmIGtlZXBNb3VudGVkICYmICF0cmFuc2l0aW9uID8gJ25vbmUnIDogbnVsbFxuICAgIH0sIHN0eWxlKVxuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BwZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIFtyZWZlcmVuY2VPYmplY3RdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLyNyZWZlcmVuY2VPYmplY3QpLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBwYXNzZWQgYXMgdGhlIHJlZmVyZW5jZSBvYmplY3Qgb2YgdGhlIFBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5vcGVuKSB7XG4gICAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKHByb3BzLmFuY2hvckVsKTtcblxuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWRBbmNob3JFbCB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5jbGllbnRXaWR0aCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHJlc29sdmVkQW5jaG9yRWwuY2xpZW50SGVpZ2h0ICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnSXQgc2hvdWxkIGJlIGFuIEhUTUwgZWxlbWVudCBpbnN0YW5jZSBvciBhIHJlZmVyZW5jZU9iamVjdCAnLCAnKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLyNyZWZlcmVuY2VPYmplY3QpLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFBvcHBlciByZW5kZXIgZnVuY3Rpb24gb3Igbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIFBvcHBlci5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUG9wcGVyLmpzIGlzIGJhc2VkIG9uIGEgXCJwbHVnaW4tbGlrZVwiIGFyY2hpdGVjdHVyZSxcbiAgICogbW9zdCBvZiBpdHMgZmVhdHVyZXMgYXJlIGZ1bGx5IGVuY2Fwc3VsYXRlZCBcIm1vZGlmaWVyc1wiLlxuICAgKlxuICAgKiBBIG1vZGlmaWVyIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIFBvcHBlci5qcyBuZWVkcyB0b1xuICAgKiBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBGb3IgdGhpcyByZWFzb24sIG1vZGlmaWVycyBzaG91bGQgYmUgdmVyeSBwZXJmb3JtYW50IHRvIGF2b2lkIGJvdHRsZW5lY2tzLlxuICAgKiBUbyBsZWFybiBob3cgdG8gY3JlYXRlIGEgbW9kaWZpZXIsIFtyZWFkIHRoZSBtb2RpZmllcnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjEvI21vZGlmaWVycykuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcHBlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBPcHRpb25zIHByb3ZpZGVkIHRvIHRoZSBbYHBvcHBlci5qc2BdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLykgaW5zdGFuY2UuXG4gICAqL1xuICBwb3BwZXJPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgdXNlZCBwb3BwZXIgaW5zdGFuY2UuXG4gICAqL1xuICBwb3BwZXJSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBIZWxwIHN1cHBvcnRpbmcgYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24gY29tcG9uZW50LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGRlZXBtZXJnZSwgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBQb3BwZXIgZnJvbSAnLi4vUG9wcGVyJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUlkIGZyb20gJy4uL3V0aWxzL3Vuc3RhYmxlX3VzZUlkJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICcuLi91dGlscy91c2VDb250cm9sbGVkJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbmZ1bmN0aW9uIGFycm93R2VuZXJhdG9yKCkge1xuICByZXR1cm4ge1xuICAgICcmW3gtcGxhY2VtZW50Kj1cImJvdHRvbVwiXSAkYXJyb3cnOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgbWFyZ2luVG9wOiAnLTAuNzFlbScsXG4gICAgICBtYXJnaW5MZWZ0OiA0LFxuICAgICAgbWFyZ2luUmlnaHQ6IDQsXG4gICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDEwMCUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnJlt4LXBsYWNlbWVudCo9XCJ0b3BcIl0gJGFycm93Jzoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbkJvdHRvbTogJy0wLjcxZW0nLFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJyZbeC1wbGFjZW1lbnQqPVwicmlnaHRcIl0gJGFycm93Jzoge1xuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbkxlZnQ6ICctMC43MWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICB3aWR0aDogJzAuNzFlbScsXG4gICAgICBtYXJnaW5Ub3A6IDQsXG4gICAgICBtYXJnaW5Cb3R0b206IDQsXG4gICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDEwMCUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnJlt4LXBsYWNlbWVudCo9XCJsZWZ0XCJdICRhcnJvdyc6IHtcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbWFyZ2luUmlnaHQ6ICctMC43MWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICB3aWR0aDogJzAuNzFlbScsXG4gICAgICBtYXJnaW5Ub3A6IDQsXG4gICAgICBtYXJnaW5Cb3R0b206IDQsXG4gICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBQb3BwZXIgY29tcG9uZW50LiAqL1xuICAgIHBvcHBlcjoge1xuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgudG9vbHRpcCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBkaXNhYmxlIGpzcy1ydGwgcGx1Z2luXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIFBvcHBlciBjb21wb25lbnQgaWYgYGludGVyYWN0aXZlPXt0cnVlfWAuICovXG4gICAgcG9wcGVySW50ZXJhY3RpdmU6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdhdXRvJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgUG9wcGVyIGNvbXBvbmVudCBpZiBgYXJyb3c9e3RydWV9YC4gKi9cbiAgICBwb3BwZXJBcnJvdzogYXJyb3dHZW5lcmF0b3IoKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50LiAqL1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSwgMC45KSxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgcGFkZGluZzogJzRweCA4cHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMCksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxNCAvIDEwKSwgXCJlbVwiKSxcbiAgICAgIG1heFdpZHRoOiAzMDAsXG4gICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBhcnJvdz17dHJ1ZX1gLiAqL1xuICAgIHRvb2x0aXBBcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYXJyb3cgZWxlbWVudC4gKi9cbiAgICBhcnJvdzoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcwLjcxZW0nXG4gICAgICAvKiA9IHdpZHRoIC8gc3FydCgyKSA9IChsZW5ndGggb2YgdGhlIGh5cG90ZW51c2UpICovXG4gICAgICAsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGNvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLCAwLjkpLFxuICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBtYXJnaW46ICdhdXRvJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIHRoZSB0b29sdGlwIGlzIG9wZW5lZCBieSB0b3VjaC4gKi9cbiAgICB0b3VjaDoge1xuICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpLFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMTYgLyAxNCksIFwiZW1cIiksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRSZWd1bGFyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwibGVmdFwiLiAqL1xuICAgIHRvb2x0aXBQbGFjZW1lbnRMZWZ0OiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAncmlnaHQgY2VudGVyJyxcbiAgICAgIG1hcmdpbjogJzAgMjRweCAnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwicmlnaHRcIi4gKi9cbiAgICB0b29sdGlwUGxhY2VtZW50UmlnaHQ6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcicsXG4gICAgICBtYXJnaW46ICcwIDI0cHgnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwidG9wXCIuICovXG4gICAgdG9vbHRpcFBsYWNlbWVudFRvcDogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBib3R0b20nLFxuICAgICAgbWFyZ2luOiAnMjRweCAwJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtYXJnaW46ICcxNHB4IDAnXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdG9vbHRpcCAobGFiZWwgd3JhcHBlcikgZWxlbWVudCBpZiBgcGxhY2VtZW50YCBjb250YWlucyBcImJvdHRvbVwiLiAqL1xuICAgIHRvb2x0aXBQbGFjZW1lbnRCb3R0b206IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyxcbiAgICAgIG1hcmdpbjogJzI0cHggMCdcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWFyZ2luOiAnMTRweCAwJ1xuICAgIH0pXG4gIH07XG59O1xudmFyIGh5c3RlcnNpc09wZW4gPSBmYWxzZTtcbnZhciBoeXN0ZXJzaXNUaW1lciA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gdGVzdFJlc2V0KCkge1xuICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gIGNsZWFyVGltZW91dChoeXN0ZXJzaXNUaW1lcik7XG59XG52YXIgVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2x0aXAocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFycm93ID0gcHJvcHMuYXJyb3csXG4gICAgICBhcnJvdyA9IF9wcm9wcyRhcnJvdyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXJyb3csXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzTGkgPSBwcm9wcy5kaXNhYmxlRm9jdXNMaXN0ZW5lcixcbiAgICAgIGRpc2FibGVGb2N1c0xpc3RlbmVyID0gX3Byb3BzJGRpc2FibGVGb2N1c0xpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNMaSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlSG92ZXJMaSA9IHByb3BzLmRpc2FibGVIb3Zlckxpc3RlbmVyLFxuICAgICAgZGlzYWJsZUhvdmVyTGlzdGVuZXIgPSBfcHJvcHMkZGlzYWJsZUhvdmVyTGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVIb3ZlckxpLFxuICAgICAgX3Byb3BzJGRpc2FibGVUb3VjaExpID0gcHJvcHMuZGlzYWJsZVRvdWNoTGlzdGVuZXIsXG4gICAgICBkaXNhYmxlVG91Y2hMaXN0ZW5lciA9IF9wcm9wcyRkaXNhYmxlVG91Y2hMaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoTGksXG4gICAgICBfcHJvcHMkZW50ZXJEZWxheSA9IHByb3BzLmVudGVyRGVsYXksXG4gICAgICBlbnRlckRlbGF5ID0gX3Byb3BzJGVudGVyRGVsYXkgPT09IHZvaWQgMCA/IDEwMCA6IF9wcm9wcyRlbnRlckRlbGF5LFxuICAgICAgX3Byb3BzJGVudGVyTmV4dERlbGF5ID0gcHJvcHMuZW50ZXJOZXh0RGVsYXksXG4gICAgICBlbnRlck5leHREZWxheSA9IF9wcm9wcyRlbnRlck5leHREZWxheSA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRlbnRlck5leHREZWxheSxcbiAgICAgIF9wcm9wcyRlbnRlclRvdWNoRGVsYSA9IHByb3BzLmVudGVyVG91Y2hEZWxheSxcbiAgICAgIGVudGVyVG91Y2hEZWxheSA9IF9wcm9wcyRlbnRlclRvdWNoRGVsYSA9PT0gdm9pZCAwID8gNzAwIDogX3Byb3BzJGVudGVyVG91Y2hEZWxhLFxuICAgICAgaWRQcm9wID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW50ZXJhY3RpdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZSxcbiAgICAgIGludGVyYWN0aXZlID0gX3Byb3BzJGludGVyYWN0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnRlcmFjdGl2ZSxcbiAgICAgIF9wcm9wcyRsZWF2ZURlbGF5ID0gcHJvcHMubGVhdmVEZWxheSxcbiAgICAgIGxlYXZlRGVsYXkgPSBfcHJvcHMkbGVhdmVEZWxheSA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRsZWF2ZURlbGF5LFxuICAgICAgX3Byb3BzJGxlYXZlVG91Y2hEZWxhID0gcHJvcHMubGVhdmVUb3VjaERlbGF5LFxuICAgICAgbGVhdmVUb3VjaERlbGF5ID0gX3Byb3BzJGxlYXZlVG91Y2hEZWxhID09PSB2b2lkIDAgPyAxNTAwIDogX3Byb3BzJGxlYXZlVG91Y2hEZWxhLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkcGxhY2VtZW50ID0gcHJvcHMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2JvdHRvbScgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgX3Byb3BzJFBvcHBlckNvbXBvbmVuID0gcHJvcHMuUG9wcGVyQ29tcG9uZW50LFxuICAgICAgUG9wcGVyQ29tcG9uZW50ID0gX3Byb3BzJFBvcHBlckNvbXBvbmVuID09PSB2b2lkIDAgPyBQb3BwZXIgOiBfcHJvcHMkUG9wcGVyQ29tcG9uZW4sXG4gICAgICBQb3BwZXJQcm9wcyA9IHByb3BzLlBvcHBlclByb3BzLFxuICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBHcm93IDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFycm93XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzYWJsZUZvY3VzTGlzdGVuZXJcIiwgXCJkaXNhYmxlSG92ZXJMaXN0ZW5lclwiLCBcImRpc2FibGVUb3VjaExpc3RlbmVyXCIsIFwiZW50ZXJEZWxheVwiLCBcImVudGVyTmV4dERlbGF5XCIsIFwiZW50ZXJUb3VjaERlbGF5XCIsIFwiaWRcIiwgXCJpbnRlcmFjdGl2ZVwiLCBcImxlYXZlRGVsYXlcIiwgXCJsZWF2ZVRvdWNoRGVsYXlcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInBsYWNlbWVudFwiLCBcIlBvcHBlckNvbXBvbmVudFwiLCBcIlBvcHBlclByb3BzXCIsIFwidGl0bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSgpLFxuICAgICAgY2hpbGROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0Q2hpbGROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBhcnJvd1JlZiA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRBcnJvd1JlZiA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGlnbm9yZU5vblRvdWNoRXZlbnRzID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGNsb3NlVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGVudGVyVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGxlYXZlVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHRvdWNoVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcblxuICB2YXIgX3VzZUNvbnRyb2xsZWQgPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBuYW1lOiAnVG9vbHRpcCcsXG4gICAgc3RhdGU6ICdvcGVuJ1xuICB9KSxcbiAgICAgIF91c2VDb250cm9sbGVkMiA9IF9zbGljZWRUb0FycmF5KF91c2VDb250cm9sbGVkLCAyKSxcbiAgICAgIG9wZW5TdGF0ZSA9IF91c2VDb250cm9sbGVkMlswXSxcbiAgICAgIHNldE9wZW5TdGF0ZSA9IF91c2VDb250cm9sbGVkMlsxXTtcblxuICB2YXIgb3BlbiA9IG9wZW5TdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9PSB1bmRlZmluZWQpLFxuICAgICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuXG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGlzYWJsZWQgJiYgIWlzQ29udHJvbGxlZCAmJiB0aXRsZSAhPT0gJycgJiYgY2hpbGROb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhIGRpc2FibGVkIGBidXR0b25gIGNoaWxkIHRvIHRoZSBUb29sdGlwIGNvbXBvbmVudC4nLCAnQSBkaXNhYmxlZCBlbGVtZW50IGRvZXMgbm90IGZpcmUgZXZlbnRzLicsIFwiVG9vbHRpcCBuZWVkcyB0byBsaXN0ZW4gdG8gdGhlIGNoaWxkIGVsZW1lbnQncyBldmVudHMgdG8gZGlzcGxheSB0aGUgdGl0bGUuXCIsICcnLCAnQWRkIGEgc2ltcGxlIHdyYXBwZXIgZWxlbWVudCwgc3VjaCBhcyBhIGBzcGFuYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW3RpdGxlLCBjaGlsZE5vZGUsIGlzQ29udHJvbGxlZF0pO1xuICB9XG5cbiAgdmFyIGlkID0gdXNlSWQoaWRQcm9wKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQoZW50ZXJUaW1lci5jdXJyZW50KTtcbiAgICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHZhciBoYW5kbGVPcGVuID0gZnVuY3Rpb24gaGFuZGxlT3BlbihldmVudCkge1xuICAgIGNsZWFyVGltZW91dChoeXN0ZXJzaXNUaW1lcik7XG4gICAgaHlzdGVyc2lzT3BlbiA9IHRydWU7IC8vIFRoZSBtb3VzZW92ZXIgZXZlbnQgd2lsbCB0cmlnZ2VyIGZvciBldmVyeSBuZXN0ZWQgZWxlbWVudCBpbiB0aGUgdG9vbHRpcC5cbiAgICAvLyBXZSBjYW4gc2tpcCByZXJlbmRlcmluZyB3aGVuIHRoZSB0b29sdGlwIGlzIGFscmVhZHkgb3Blbi5cbiAgICAvLyBXZSBhcmUgdXNpbmcgdGhlIG1vdXNlb3ZlciBldmVudCBpbnN0ZWFkIG9mIHRoZSBtb3VzZWVudGVyIGV2ZW50IHRvIGZpeCBhIGhpZGUvc2hvdyBpc3N1ZS5cblxuICAgIHNldE9wZW5TdGF0ZSh0cnVlKTtcblxuICAgIGlmIChvbk9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKCkge1xuICAgIHZhciBmb3J3YXJkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VvdmVyJyAmJiBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyICYmIGZvcndhcmQpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3ZlcihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ICYmIGV2ZW50LnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFJlbW92ZSB0aGUgdGl0bGUgYWhlYWQgb2YgdGltZS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gd2FpdCBmb3IgdGhlIG5leHQgcmVuZGVyIGNvbW1pdC5cbiAgICAgIC8vIFdlIHdvdWxkIHJpc2sgZGlzcGxheWluZyB0d28gdG9vbHRpcHMgYXQgdGhlIHNhbWUgdGltZSAobmF0aXZlICsgdGhpcyBvbmUpLlxuXG5cbiAgICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgICAgY2hpbGROb2RlLnJlbW92ZUF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcblxuICAgICAgaWYgKGVudGVyRGVsYXkgfHwgaHlzdGVyc2lzT3BlbiAmJiBlbnRlck5leHREZWxheSkge1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICAgIGVudGVyVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgICB9LCBoeXN0ZXJzaXNPcGVuID8gZW50ZXJOZXh0RGVsYXkgOiBlbnRlckRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBjaGlsZElzRm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlM1swXSxcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGUzWzFdO1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cigpIHtcbiAgICBpZiAoY2hpbGRJc0ZvY3VzVmlzaWJsZSkge1xuICAgICAgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgICBvbkJsdXJWaXNpYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKCkge1xuICAgIHZhciBmb3J3YXJkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgICAgLy8gVGhlIGF1dG9Gb2N1cyBvZiBSZWFjdCBtaWdodCB0cmlnZ2VyIHRoZSBldmVudCBiZWZvcmUgdGhlIGNvbXBvbmVudERpZE1vdW50LlxuICAgICAgLy8gV2UgbmVlZCB0byBhY2NvdW50IGZvciB0aGlzIGV2ZW50dWFsaXR5LlxuICAgICAgaWYgKCFjaGlsZE5vZGUpIHtcbiAgICAgICAgc2V0Q2hpbGROb2RlKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAgIGhhbmRsZUVudGVyKCkoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuXG4gICAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vbkZvY3VzICYmIGZvcndhcmQpIHtcbiAgICAgICAgY2hpbGRyZW5Qcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50KSB7XG4gICAgY2xlYXJUaW1lb3V0KGh5c3RlcnNpc1RpbWVyKTtcbiAgICBoeXN0ZXJzaXNUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaHlzdGVyc2lzT3BlbiA9IGZhbHNlO1xuICAgIH0sIDgwMCArIGxlYXZlRGVsYXkpO1xuICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG5cbiAgICBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgY2xvc2VUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSwgdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3QpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVMZWF2ZSA9IGZ1bmN0aW9uIGhhbmRsZUxlYXZlKCkge1xuICAgIHZhciBmb3J3YXJkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnYmx1cicpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuUHJvcHMub25CbHVyICYmIGZvcndhcmQpIHtcbiAgICAgICAgICBjaGlsZHJlblByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVCbHVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VsZWF2ZScgJiYgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gY2hpbGROb2RlKSB7XG4gICAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIGxlYXZlVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgICB9LCBsZWF2ZURlbGF5KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBkZXRlY3RUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gZGV0ZWN0VG91Y2hTdGFydChldmVudCkge1xuICAgIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgPSB0cnVlO1xuICAgIHZhciBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG5cbiAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG4gICAgZGV0ZWN0VG91Y2hTdGFydChldmVudCk7XG4gICAgY2xlYXJUaW1lb3V0KGxlYXZlVGltZXIuY3VycmVudCk7XG4gICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIuY3VycmVudCk7XG4gICAgZXZlbnQucGVyc2lzdCgpO1xuICAgIHRvdWNoVGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlRW50ZXIoKShldmVudCk7XG4gICAgfSwgZW50ZXJUb3VjaERlbGF5KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKSB7XG4gICAgICBjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQodG91Y2hUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgbGVhdmVUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfSwgbGVhdmVUb3VjaERlbGF5KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlVXNlUmVmID0gdXNlRm9ya1JlZihzZXRDaGlsZE5vZGUsIHJlZik7XG4gIHZhciBoYW5kbGVGb2N1c1JlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBoYW5kbGVVc2VSZWYpOyAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGRyb3Agc3VwcG9ydCBmb3Igbm9uIHJlZiBmb3J3YXJkaW5nIGNsYXNzIGNvbXBvbmVudHNcblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBzZXRSZWYoaGFuZGxlRm9jdXNSZWYsIFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKSk7XG4gIH0sIFtoYW5kbGVGb2N1c1JlZl0pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGhhbmRsZU93blJlZik7IC8vIFRoZXJlIGlzIG5vIHBvaW50IGluIGRpc3BsYXlpbmcgYW4gZW1wdHkgdG9vbHRpcC5cblxuICBpZiAodGl0bGUgPT09ICcnKSB7XG4gICAgb3BlbiA9IGZhbHNlO1xuICB9IC8vIEZvciBhY2Nlc3NpYmlsaXR5IGFuZCBTRU8gY29uY2VybnMsIHdlIHJlbmRlciB0aGUgdGl0bGUgdG8gdGhlIERPTSBub2RlIHdoZW5cbiAgLy8gdGhlIHRvb2x0aXAgaXMgaGlkZGVuLiBIb3dldmVyLCB3ZSBoYXZlIG1hZGUgYSB0cmFkZW9mZiB3aGVuXG4gIC8vIGBkaXNhYmxlSG92ZXJMaXN0ZW5lcmAgaXMgc2V0LiBUaGlzIHRpdGxlIGxvZ2ljIGlzIGRpc2FibGVkLlxuICAvLyBJdCdzIGFsbG93aW5nIHVzIHRvIGtlZXAgdGhlIGltcGxlbWVudGF0aW9uIHNpemUgbWluaW1hbC5cbiAgLy8gV2UgYXJlIG9wZW4gdG8gY2hhbmdlIHRoZSB0cmFkZW9mZi5cblxuXG4gIHZhciBzaG91bGRTaG93TmF0aXZlVGl0bGUgPSAhb3BlbiAmJiAhZGlzYWJsZUhvdmVyTGlzdGVuZXI7XG5cbiAgdmFyIGNoaWxkcmVuUHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBvcGVuID8gaWQgOiBudWxsLFxuICAgIHRpdGxlOiBzaG91bGRTaG93TmF0aXZlVGl0bGUgJiYgdHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJyA/IHRpdGxlIDogbnVsbFxuICB9LCBvdGhlciwgY2hpbGRyZW4ucHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3gob3RoZXIuY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUpLFxuICAgIG9uVG91Y2hTdGFydDogZGV0ZWN0VG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9KTtcblxuICB2YXIgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzID0ge307XG5cbiAgaWYgKCFkaXNhYmxlVG91Y2hMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0ID0gaGFuZGxlVG91Y2hTdGFydDtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hFbmQgPSBoYW5kbGVUb3VjaEVuZDtcbiAgfVxuXG4gIGlmICghZGlzYWJsZUhvdmVyTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyID0gaGFuZGxlRW50ZXIoKTtcbiAgICBjaGlsZHJlblByb3BzLm9uTW91c2VMZWF2ZSA9IGhhbmRsZUxlYXZlKCk7XG5cbiAgICBpZiAoaW50ZXJhY3RpdmUpIHtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbk1vdXNlT3ZlciA9IGhhbmRsZUVudGVyKGZhbHNlKTtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbk1vdXNlTGVhdmUgPSBoYW5kbGVMZWF2ZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFkaXNhYmxlRm9jdXNMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Gb2N1cyA9IGhhbmRsZUZvY3VzKCk7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbkJsdXIgPSBoYW5kbGVMZWF2ZSgpO1xuXG4gICAgaWYgKGludGVyYWN0aXZlKSB7XG4gICAgICBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMub25Gb2N1cyA9IGhhbmRsZUZvY3VzKGZhbHNlKTtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbkJsdXIgPSBoYW5kbGVMZWF2ZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY2hpbGRyZW4ucHJvcHMudGl0bGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgYSBgdGl0bGVgIHByb3AgdG8gdGhlIGNoaWxkIG9mIDxUb29sdGlwIC8+LicsIFwiUmVtb3ZlIHRoaXMgdGl0bGUgcHJvcCBgXCIuY29uY2F0KGNoaWxkcmVuLnByb3BzLnRpdGxlLCBcImAgb3IgdGhlIFRvb2x0aXAgY29tcG9uZW50LlwiKV0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZWRQb3BwZXJQcm9wcyA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWVwbWVyZ2Uoe1xuICAgICAgcG9wcGVyT3B0aW9uczoge1xuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgZW5hYmxlZDogQm9vbGVhbihhcnJvd1JlZiksXG4gICAgICAgICAgICBlbGVtZW50OiBhcnJvd1JlZlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFBvcHBlclByb3BzKTtcbiAgfSwgW2Fycm93UmVmLCBQb3BwZXJQcm9wc10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkcmVuUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3BwZXJDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wb3BwZXIsIGludGVyYWN0aXZlICYmIGNsYXNzZXMucG9wcGVySW50ZXJhY3RpdmUsIGFycm93ICYmIGNsYXNzZXMucG9wcGVyQXJyb3cpLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgIGFuY2hvckVsOiBjaGlsZE5vZGUsXG4gICAgb3BlbjogY2hpbGROb2RlID8gb3BlbiA6IGZhbHNlLFxuICAgIGlkOiBjaGlsZHJlblByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgdHJhbnNpdGlvbjogdHJ1ZVxuICB9LCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMsIG1lcmdlZFBvcHBlclByb3BzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcGxhY2VtZW50SW5uZXIgPSBfcmVmLnBsYWNlbWVudCxcbiAgICAgICAgVHJhbnNpdGlvblByb3BzSW5uZXIgPSBfcmVmLlRyYW5zaXRpb25Qcm9wcztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgdGltZW91dDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0sIFRyYW5zaXRpb25Qcm9wc0lubmVyLCBUcmFuc2l0aW9uUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy50b29sdGlwLCBjbGFzc2VzW1widG9vbHRpcFBsYWNlbWVudFwiLmNvbmNhdChjYXBpdGFsaXplKHBsYWNlbWVudElubmVyLnNwbGl0KCctJylbMF0pKV0sIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgJiYgY2xhc3Nlcy50b3VjaCwgYXJyb3cgJiYgY2xhc3Nlcy50b29sdGlwQXJyb3cpXG4gICAgfSwgdGl0bGUsIGFycm93ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hcnJvdyxcbiAgICAgIHJlZjogc2V0QXJyb3dSZWZcbiAgICB9KSA6IG51bGwpKTtcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sdGlwLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYWRkcyBhbiBhcnJvdyB0byB0aGUgdG9vbHRpcC5cbiAgICovXG4gIGFycm93OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVG9vbHRpcCByZWZlcmVuY2UgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBmb2N1cyBldmVudHMuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNMaXN0ZW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGhvdmVyIGV2ZW50cy5cbiAgICovXG4gIGRpc2FibGVIb3Zlckxpc3RlbmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gbG9uZyBwcmVzcyB0b3VjaCBldmVudHMuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hMaXN0ZW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGVudGVyIHRvdWNoIGRlbGF5IChgZW50ZXJUb3VjaERlbGF5YCkuXG4gICAqL1xuICBlbnRlckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwIHdoZW4gb25lIHdhcyBhbHJlYWR5IHJlY2VudGx5IG9wZW5lZC5cbiAgICovXG4gIGVudGVyTmV4dERlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhIHVzZXIgbXVzdCB0b3VjaCB0aGUgZWxlbWVudCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcC5cbiAgICovXG4gIGVudGVyVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGlzIHVzZWQgdG8gaGVscCBpbXBsZW1lbnQgdGhlIGFjY2Vzc2liaWxpdHkgbG9naWMuXG4gICAqIElmIHlvdSBkb24ndCBwcm92aWRlIHRoaXMgcHJvcC4gSXQgZmFsbHMgYmFjayB0byBhIHJhbmRvbWx5IGdlbmVyYXRlZCBpZC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIHRvb2x0aXAgaW50ZXJhY3RpdmUsIGkuZS4gd2lsbCBub3QgY2xvc2Ugd2hlbiB0aGUgdXNlclxuICAgKiBob3ZlcnMgb3ZlciB0aGUgdG9vbHRpcCBiZWZvcmUgdGhlIGBsZWF2ZURlbGF5YCBpcyBleHBpcmVkLlxuICAgKi9cbiAgaW50ZXJhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGxlYXZlIHRvdWNoIGRlbGF5IChgbGVhdmVUb3VjaERlbGF5YCkuXG4gICAqL1xuICBsZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhZnRlciB0aGUgdXNlciBzdG9wcyB0b3VjaGluZyBhbiBlbGVtZW50IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqL1xuICBsZWF2ZVRvdWNoRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3Blbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG9vbHRpcCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUb29sdGlwIHBsYWNlbWVudC5cbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBwb3BwZXIuXG4gICAqL1xuICBQb3BwZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQb3BwZXJgXSgvYXBpL3BvcHBlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQb3BwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVG9vbHRpcCB0aXRsZS4gWmVyby1sZW5ndGggdGl0bGVzIHN0cmluZyBhcmUgbmV2ZXIgZGlzcGxheWVkLlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24jVHJhbnNpdGlvbi1wcm9wcykgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sdGlwJyxcbiAgZmxpcDogZmFsc2Vcbn0pKFRvb2x0aXApOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL3RyYW5zaXRpb25zJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH1cbn07XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIFpvb20gdHJhbnNpdGlvbiBjYW4gYmUgdXNlZCBmb3IgdGhlIGZsb2F0aW5nIHZhcmlhbnQgb2YgdGhlXG4gKiBbQnV0dG9uXSgvY29tcG9uZW50cy9idXR0b25zLyNmbG9hdGluZy1hY3Rpb24tYnV0dG9ucykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgWm9vbSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFpvb20ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICB2YXIgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgdmFyIGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBpblByb3AsXG4gICAgbm9kZVJlZjogZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVSZWYgOiB1bmRlZmluZWQsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gWm9vbS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGlzIHByb3AgaWYgeW91IGVuY291bnRlciAnRnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgYmUgZ2l2ZW4gcmVmcycsXG4gICAqIHVzZSBgdW5zdGFibGVfY3JlYXRlU3RyaWN0TW9kZVRoZW1lYCxcbiAgICogYW5kIGNhbid0IGZvcndhcmQgdGhlIHJlZiBpbiB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgWm9vbTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtJztcbmltcG9ydCB7IEZpeGVkU2l6ZUxpc3QgfSBmcm9tICdyZWFjdC13aW5kb3cnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Ub29sdGlwJztcbmltcG9ydCBab29tIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1pvb20nO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcbiAgcm9vdDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiA0MDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gIH0sXG59KSk7XG5cbmZ1bmN0aW9uIHJlbmRlclJvdyhwcm9wcykge1xuICBjb25zdCB7IGluZGV4LCBzdHlsZSwgZGF0YSB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8VG9vbHRpcFxuICAgICAgdGl0bGU9e1xuICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9XCJzcGFuXCIgdmFyaWFudD1cImJvZHkyXCI+XG4gICAgICAgICAge2Ake2RhdGFbaW5kZXhdLm5vdGV3YXZ9YH1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgfVxuICAgICAgc3R5bGU9e3sgbWF4V2lkdGg6IDUwMCB9fVxuICAgICAgYXJyb3dcbiAgICAgIHBsYWNlbWVudD1cInJpZ2h0XCJcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQ9e1pvb219XG4gICAgPlxuICAgICAgPExpc3RJdGVtXG4gICAgICAgIGJ1dHRvblxuICAgICAgICBzdHlsZT17XG4gICAgICAgICAgKHN0eWxlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgPlxuICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgIGNvbXBvbmVudD1cInNwYW5cIlxuICAgICAgICAgIHZhcmlhbnQ9XCJjYXB0aW9uXCJcbiAgICAgICAgICBub1dyYXBcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgd2lkdGg6IDIzOSxcbiAgICAgICAgICB9fVxuICAgICAgICAgIGNvbG9yPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgPlxuICAgICAgICAgIHtgJHtkYXRhW2luZGV4XS5uYW1hX2F1ZGlvfSAtICR7ZGF0YVtpbmRleF0ubm90ZXdhdn1gfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L0xpc3RJdGVtPlxuICAgIDwvVG9vbHRpcD5cbiAgKTtcbn1cblxucmVuZGVyUm93LnByb3BUeXBlcyA9IHtcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IExpc3RGaXhlZCA9ICh7IGl0ZW1zIH0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICA8Rml4ZWRTaXplTGlzdFxuICAgICAgICBoZWlnaHQ9ezQwMH1cbiAgICAgICAgd2lkdGg9ezIzMH1cbiAgICAgICAgaXRlbVNpemU9ezQ2fVxuICAgICAgICBpdGVtQ291bnQ9e2l0ZW1zLmxlbmd0aH1cbiAgICAgICAgaXRlbURhdGE9e2l0ZW1zfVxuICAgICAgPlxuICAgICAgICB7cmVuZGVyUm93fVxuICAgICAgPC9GaXhlZFNpemVMaXN0PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdEZpeGVkO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgTGlzdCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9MaXN0JztcbmltcG9ydCBMaXN0SXRlbSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbSc7XG5pbXBvcnQgTGlzdEl0ZW1JY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtSWNvbic7XG5pbXBvcnQgTGlzdEl0ZW1UZXh0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtVGV4dCc7XG5pbXBvcnQgQXNzaWdubWVudEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Fzc2lnbm1lbnQnO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NvbGxhcHNlJztcbmltcG9ydCBCYWRnZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CYWRnZSc7XG5pbXBvcnQgTGlzdEZpeGVkIGZyb20gJy4vTGlzdEZpeGVkJztcblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XG4gIHJvb3Q6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1heFdpZHRoOiAzNjAsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gIH0sXG4gIG5lc3RlZDoge1xuICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICB9LFxufSkpO1xuXG5jb25zdCBsaXN0SXRlbXMgPSAoeyBjb3VudCwgbm90ZSB9KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgc2V0T3Blbighb3Blbik7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPExpc3RJdGVtIGJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzZXMubmVzdGVkfSBvbkNsaWNrPXtoYW5kbGVDbGlja30+XG4gICAgICAgIDxMaXN0SXRlbUljb24+XG4gICAgICAgICAgPEJhZGdlIGJhZGdlQ29udGVudD17Y291bnR9IGNvbG9yPVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICA8QXNzaWdubWVudEljb24gLz5cbiAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiTm90ZVwiIC8+XG4gICAgICA8L0xpc3RJdGVtPlxuICAgICAgPENvbGxhcHNlIGluPXtvcGVufSB0aW1lb3V0PVwiYXV0b1wiIHVubW91bnRPbkV4aXQ+XG4gICAgICAgIDxMaXN0IGNvbXBvbmVudD1cImRpdlwiIGRpc2FibGVQYWRkaW5nPlxuICAgICAgICAgIDxMaXN0Rml4ZWQgaXRlbXM9e25vdGV9IC8+XG4gICAgICAgIDwvTGlzdD5cbiAgICAgIDwvQ29sbGFwc2U+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbXM7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIC8vIFJlc2V0IGJyb3dzZXIgZGVmYXVsdCBzdHlsZS5cbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5kaXZpZGVyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFic29sdXRlPXt0cnVlfWAuICovXG4gICAgYWJzb2x1dGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluc2V0XCJgLiAqL1xuICAgIGluc2V0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiA3MlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsaWdodD17dHJ1ZX1gLiAqL1xuICAgIGxpZ2h0OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAwLjA4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwibWlkZGxlXCJgLiAqL1xuICAgIG1pZGRsZToge1xuICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwidmVydGljYWxcImAuICovXG4gICAgdmVydGljYWw6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6IDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmxleEl0ZW09e3RydWV9YC4gKi9cbiAgICBmbGV4SXRlbToge1xuICAgICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgRGl2aWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpdmlkZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFic29sdXRlID0gcHJvcHMuYWJzb2x1dGUsXG4gICAgICBhYnNvbHV0ZSA9IF9wcm9wcyRhYnNvbHV0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWJzb2x1dGUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnaHInIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmbGV4SXRlbSA9IHByb3BzLmZsZXhJdGVtLFxuICAgICAgZmxleEl0ZW0gPSBfcHJvcHMkZmxleEl0ZW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZsZXhJdGVtLFxuICAgICAgX3Byb3BzJGxpZ2h0ID0gcHJvcHMubGlnaHQsXG4gICAgICBsaWdodCA9IF9wcm9wcyRsaWdodCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGlnaHQsXG4gICAgICBfcHJvcHMkb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzJG9yaWVudGF0aW9uID09PSB2b2lkIDAgPyAnaG9yaXpvbnRhbCcgOiBfcHJvcHMkb3JpZW50YXRpb24sXG4gICAgICBfcHJvcHMkcm9sZSA9IHByb3BzLnJvbGUsXG4gICAgICByb2xlID0gX3Byb3BzJHJvbGUgPT09IHZvaWQgMCA/IENvbXBvbmVudCAhPT0gJ2hyJyA/ICdzZXBhcmF0b3InIDogdW5kZWZpbmVkIDogX3Byb3BzJHJvbGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdmdWxsV2lkdGgnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWJzb2x1dGVcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZmxleEl0ZW1cIiwgXCJsaWdodFwiLCBcIm9yaWVudGF0aW9uXCIsIFwicm9sZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdmdWxsV2lkdGgnICYmIGNsYXNzZXNbdmFyaWFudF0sIGFic29sdXRlICYmIGNsYXNzZXMuYWJzb2x1dGUsIGZsZXhJdGVtICYmIGNsYXNzZXMuZmxleEl0ZW0sIGxpZ2h0ICYmIGNsYXNzZXMubGlnaHQsIG9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIGNsYXNzZXMudmVydGljYWwpLFxuICAgIHJvbGU6IHJvbGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGl2aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBYnNvbHV0ZWx5IHBvc2l0aW9uIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYWJzb2x1dGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIHRoZSBjb3JyZWN0IGhlaWdodCB3aGVuIHVzZWQgaW4gZmxleCBjb250YWluZXIuXG4gICAqIChCeSBkZWZhdWx0LCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIGEgY2FsY3VsYXRlZCBoZWlnaHQgb2YgYDBweGAgaWYgaXQgaXMgdGhlIGNoaWxkIG9mIGEgZmxleCBjb250YWluZXIuKVxuICAgKi9cbiAgZmxleEl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaXZpZGVyIHdpbGwgaGF2ZSBhIGxpZ2h0ZXIgY29sb3IuXG4gICAqL1xuICBsaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkaXZpZGVyIG9yaWVudGF0aW9uLlxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2Z1bGxXaWR0aCcsICdpbnNldCcsICdtaWRkbGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGl2aWRlcidcbn0pKERpdmlkZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL3RyYW5zaXRpb25zJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59O1xudmFyIGRlZmF1bHRUaW1lb3V0ID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBGYWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW01vZGFsXSgvY29tcG9uZW50cy9tb2RhbC8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEZhZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGYWRlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPSBwcm9wcy5kaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCxcbiAgICAgIGRpc2FibGVTdHJpY3RNb2RlQ29tcGF0ID0gX3Byb3BzJGRpc2FibGVTdHJpY3RNID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU3RyaWN0TSxcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IFRyYW5zaXRpb24gOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdFwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRpbWVvdXRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdGhlbWUudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAhZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgZm9yZWlnblJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCwgZm9yZWlnblJlZik7XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlT3JBcHBlYXJpbmcsIG1heWJlQXBwZWFyaW5nKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9yZWYgPSBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gW25vZGVSZWYuY3VycmVudCwgbm9kZU9yQXBwZWFyaW5nXSA6IFtub2RlT3JBcHBlYXJpbmcsIG1heWJlQXBwZWFyaW5nXSxcbiAgICAgICAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBub2RlID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBpc0FwcGVhcmluZyA9IF9yZWYyWzFdOyAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cblxuXG4gICAgICAgIGlmIChpc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2sobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICB2YXIgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICB2YXIgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgdmFyIGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgfSwgb3RoZXIpLCBmdW5jdGlvbiAoc3RhdGUsIGNoaWxkUHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGlzIHByb3AgaWYgeW91IGVuY291bnRlciAnRnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgYmUgZ2l2ZW4gcmVmcycsXG4gICAqIHVzZSBgdW5zdGFibGVfY3JlYXRlU3RyaWN0TW9kZVRoZW1lYCxcbiAgICogYW5kIGNhbid0IGZvcndhcmQgdGhlIHJlZiBpbiB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRmFkZSBmcm9tICcuLi9GYWRlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgLy8gSW1wcm92ZSBzY3JvbGxhYmxlIGRpYWxvZyBzdXBwb3J0LlxuICAgIHpJbmRleDogLTEsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGludmlzaWJsZT17dHJ1ZX1gLiAqL1xuICBpbnZpc2libGU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfVxufTtcbnZhciBCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRpbnZpc2libGUgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBpbnZpc2libGUgPSBfcHJvcHMkaW52aXNpYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnZpc2libGUsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBGYWRlIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImludmlzaWJsZVwiLCBcIm9wZW5cIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGludmlzaWJsZSAmJiBjbGFzc2VzLmludmlzaWJsZSksXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhY2tkcm9wLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQmFja2Ryb3AnXG59KShCYWNrZHJvcCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7IC8vIFRyYW5zbGF0ZSB0aGUgbm9kZSBzbyBoZSBjYW4ndCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4uXG4vLyBMYXRlciwgd2UgZ29ubmEgdHJhbnNsYXRlIGJhY2sgdGhlIG5vZGUgdG8gaGlzIG9yaWdpbmFsIGxvY2F0aW9uXG4vLyB3aXRoIGBub25lYC5gXG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSkge1xuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciB0cmFuc2Zvcm07XG5cbiAgaWYgKG5vZGUuZmFrZVRyYW5zZm9ybSkge1xuICAgIHRyYW5zZm9ybSA9IG5vZGUuZmFrZVRyYW5zZm9ybTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpO1xuICB9XG5cbiAgdmFyIG9mZnNldFggPSAwO1xuICB2YXIgb2Zmc2V0WSA9IDA7XG5cbiAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJyAmJiB0eXBlb2YgdHJhbnNmb3JtID09PSAnc3RyaW5nJykge1xuICAgIHZhciB0cmFuc2Zvcm1WYWx1ZXMgPSB0cmFuc2Zvcm0uc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJyk7XG4gICAgb2Zmc2V0WCA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s0XSwgMTApO1xuICAgIG9mZnNldFkgPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNV0sIDEwKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVgoXCIuY29uY2F0KHdpbmRvdy5pbm5lcldpZHRoLCBcInB4KSB0cmFuc2xhdGVYKFwiKS5jb25jYXQob2Zmc2V0WCAtIHJlY3QubGVmdCwgXCJweClcIik7XG4gIH1cblxuICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlWCgtXCIuY29uY2F0KHJlY3QubGVmdCArIHJlY3Qud2lkdGggLSBvZmZzZXRYLCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVZKFwiLmNvbmNhdCh3aW5kb3cuaW5uZXJIZWlnaHQsIFwicHgpIHRyYW5zbGF0ZVkoXCIpLmNvbmNhdChvZmZzZXRZIC0gcmVjdC50b3AsIFwicHgpXCIpO1xuICB9IC8vIGRpcmVjdGlvbiA9PT0gJ2Rvd24nXG5cblxuICByZXR1cm4gXCJ0cmFuc2xhdGVZKC1cIi5jb25jYXQocmVjdC50b3AgKyByZWN0LmhlaWdodCAtIG9mZnNldFksIFwicHgpXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKSB7XG4gIHZhciB0cmFuc2Zvcm0gPSBnZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuXG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxudmFyIGRlZmF1bHRUaW1lb3V0ID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBTbGlkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtEcmF3ZXJdKC9jb21wb25lbnRzL2RyYXdlcnMvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbnZhciBTbGlkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgZGlyZWN0aW9uID0gX3Byb3BzJGRpcmVjdGlvbiA9PT0gdm9pZCAwID8gJ2Rvd24nIDogX3Byb3BzJGRpcmVjdGlvbixcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyBkZWZhdWx0VGltZW91dCA6IF9wcm9wcyR0aW1lb3V0LFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IFRyYW5zaXRpb24gOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJkaXJlY3Rpb25cIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgY2hpbGRyZW5SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIC8qKlxuICAgKiB1c2VkIGluIGNsb25lRWxlbWVudChjaGlsZHJlbiwgeyByZWY6IGhhbmRsZVJlZiB9KVxuICAgKi9cblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBjaGlsZHJlblJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWZJbnRlcm1lZGlhcnkgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlUmVmSW50ZXJtZWRpYXJ5LCByZWYpO1xuXG4gIHZhciBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaXNBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhjaGlsZHJlblJlZi5jdXJyZW50LCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKTtcbiAgICByZWZsb3cobm9kZSk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgfSkpO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuXG4gICAgaWYgKG9uRW50ZXJpbmcpIHtcbiAgICAgIG9uRW50ZXJpbmcobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICB2YXIgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgdmFyIGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwXG4gICAgfSkpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICB9KSk7XG4gICAgc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIE5vIG5lZWQgZm9yIHRyYW5zaXRpb25zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRkZW5cbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSAnJztcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcblxuICAgIGlmIChvbkV4aXRlZCkge1xuICAgICAgb25FeGl0ZWQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIHVwZGF0ZVBvc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgfSwgW2RpcmVjdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNraXAgY29uZmlndXJhdGlvbiB3aGVyZSB0aGUgcG9zaXRpb24gaXMgc2NyZWVuIHNpemUgaW52YXJpYW50LlxuICAgIGlmIChpblByb3AgfHwgZGlyZWN0aW9uID09PSAnZG93bicgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2hpbGRyZW5SZWYuY3VycmVudCkge1xuICAgICAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtkaXJlY3Rpb24sIGluUHJvcF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5Qcm9wKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRyYXdlciB3aGVuIHRoZSBkaXJlY3Rpb24gY2hhbmdlIGFuZFxuICAgICAgLy8gd2hlbiBpdCdzIGhpZGRlbi5cbiAgICAgIHVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgfVxuICB9LCBbaW5Qcm9wLCB1cGRhdGVQb3NpdGlvbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIG5vZGVSZWY6IGNoaWxkcmVuUmVmLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBpblByb3AsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgIH0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSlcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogRGlyZWN0aW9uIHRoZSBjaGlsZCBub2RlIHdpbGwgZW50ZXIgZnJvbS5cbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZG93bicsICdsZWZ0JywgJ3JpZ2h0JywgJ3VwJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgYW5pbWF0aW9uLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuLi9CYWNrZHJvcCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgU2xpZGUgZnJvbSAnLi4vU2xpZGUnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwicGVybWFuZW50IG9yIHBlcnNpc3RlbnRcImAuICovXG4gICAgZG9ja2VkOiB7XG4gICAgICBmbGV4OiAnMCAwIGF1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgICBwYXBlcjoge1xuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgZmxleDogJzEgMCBhdXRvJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlcixcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgICAvLyB0ZW1wb3Jhcnkgc3R5bGVcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIC8vIEF0IHNvbWUgcG9pbnQsIGl0IHdvdWxkIGJlIGJldHRlciB0byBrZWVwIGl0IGZvciBrZXlib2FyZCB1c2Vycy5cbiAgICAgIC8vIDpmb2N1cy1yaW5nIENTUyBwc2V1ZG8tY2xhc3Mgd2lsbCBoZWxwLlxuICAgICAgb3V0bGluZTogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImxlZnRcImAuICovXG4gICAgcGFwZXJBbmNob3JMZWZ0OiB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cInJpZ2h0XCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yUmlnaHQ6IHtcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yVG9wOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJib3R0b21cImAuICovXG4gICAgcGFwZXJBbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImxlZnRcImAgYW5kIGB2YXJpYW50YCBpcyBub3QgXCJ0ZW1wb3JhcnlcIi4gKi9cbiAgICBwYXBlckFuY2hvckRvY2tlZExlZnQ6IHtcbiAgICAgIGJvcmRlclJpZ2h0OiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cInRvcFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkVG9wOiB7XG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwicmlnaHRcImAgYW5kIGB2YXJpYW50YCBpcyBub3QgXCJ0ZW1wb3JhcnlcIi4gKi9cbiAgICBwYXBlckFuY2hvckRvY2tlZFJpZ2h0OiB7XG4gICAgICBib3JkZXJMZWZ0OiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImJvdHRvbVwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkQm90dG9tOiB7XG4gICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgTW9kYWxgIGNvbXBvbmVudC4gKi9cbiAgICBtb2RhbDoge31cbiAgfTtcbn07XG52YXIgb3Bwb3NpdGVEaXJlY3Rpb24gPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIHRvcDogJ2Rvd24nLFxuICBib3R0b206ICd1cCdcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNIb3Jpem9udGFsKGFuY2hvcikge1xuICByZXR1cm4gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihhbmNob3IpICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmNob3IodGhlbWUsIGFuY2hvcikge1xuICByZXR1cm4gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyAmJiBpc0hvcml6b250YWwoYW5jaG9yKSA/IG9wcG9zaXRlRGlyZWN0aW9uW2FuY2hvcl0gOiBhbmNob3I7XG59XG52YXIgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG59O1xuLyoqXG4gKiBUaGUgcHJvcHMgb2YgdGhlIFtNb2RhbF0oL2FwaS9tb2RhbC8pIGNvbXBvbmVudCBhcmUgYXZhaWxhYmxlXG4gKiB3aGVuIGB2YXJpYW50PVwidGVtcG9yYXJ5XCJgIGlzIHNldC5cbiAqL1xuXG52YXIgRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRHJhd2VyKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbmNob3IgPSBwcm9wcy5hbmNob3IsXG4gICAgICBhbmNob3JQcm9wID0gX3Byb3BzJGFuY2hvciA9PT0gdm9pZCAwID8gJ2xlZnQnIDogX3Byb3BzJGFuY2hvcixcbiAgICAgIEJhY2tkcm9wUHJvcHMgPSBwcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDE2IDogX3Byb3BzJGVsZXZhdGlvbixcbiAgICAgIF9wcm9wcyRNb2RhbFByb3BzID0gcHJvcHMuTW9kYWxQcm9wcztcbiAgX3Byb3BzJE1vZGFsUHJvcHMgPSBfcHJvcHMkTW9kYWxQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTW9kYWxQcm9wcztcblxuICB2YXIgQmFja2Ryb3BQcm9wc1Byb3AgPSBfcHJvcHMkTW9kYWxQcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgTW9kYWxQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMkTW9kYWxQcm9wcywgW1wiQmFja2Ryb3BQcm9wc1wiXSksXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIF9wcm9wcyRvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIG9wZW4gPSBfcHJvcHMkb3BlbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkb3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIFNsaWRlUHJvcHMgPSBwcm9wcy5TbGlkZVByb3BzLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IFNsaWRlIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAndGVtcG9yYXJ5JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvclwiLCBcIkJhY2tkcm9wUHJvcHNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJlbGV2YXRpb25cIiwgXCJNb2RhbFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiU2xpZGVQcm9wc1wiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpOyAvLyBMZXQncyBhc3N1bWUgdGhhdCB0aGUgRHJhd2VyIHdpbGwgYWx3YXlzIGJlIHJlbmRlcmVkIG9uIHVzZXIgc3BhY2UuXG4gIC8vIFdlIHVzZSB0aGlzIHN0YXRlIGlzIG9yZGVyIHRvIHNraXAgdGhlIGFwcGVhciB0cmFuc2l0aW9uIGR1cmluZyB0aGVcbiAgLy8gaW5pdGlhbCBtb3VudCBvZiB0aGUgY29tcG9uZW50LlxuXG4gIHZhciBtb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBtb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIHZhciBhbmNob3IgPSBnZXRBbmNob3IodGhlbWUsIGFuY2hvclByb3ApO1xuICB2YXIgZHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknID8gZWxldmF0aW9uIDogMCxcbiAgICBzcXVhcmU6IHRydWVcbiAgfSwgUGFwZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBjbGFzc2VzW1wicGFwZXJBbmNob3JcIi5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3IpKV0sIFBhcGVyUHJvcHMuY2xhc3NOYW1lLCB2YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiBjbGFzc2VzW1wicGFwZXJBbmNob3JEb2NrZWRcIi5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3IpKV0pXG4gIH0pLCBjaGlsZHJlbik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJtYW5lbnQnKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuZG9ja2VkLCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciksIGRyYXdlcik7XG4gIH1cblxuICB2YXIgc2xpZGluZ0RyYXdlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBpbjogb3BlbixcbiAgICBkaXJlY3Rpb246IG9wcG9zaXRlRGlyZWN0aW9uW2FuY2hvcl0sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIGFwcGVhcjogbW91bnRlZC5jdXJyZW50XG4gIH0sIFNsaWRlUHJvcHMpLCBkcmF3ZXIpO1xuXG4gIGlmICh2YXJpYW50ID09PSAncGVyc2lzdGVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyKSwgc2xpZGluZ0RyYXdlcik7XG4gIH0gLy8gdmFyaWFudCA9PT0gdGVtcG9yYXJ5XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWwsIF9leHRlbmRzKHtcbiAgICBCYWNrZHJvcFByb3BzOiBfZXh0ZW5kcyh7fSwgQmFja2Ryb3BQcm9wcywgQmFja2Ryb3BQcm9wc1Byb3AsIHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgfSksXG4gICAgQmFja2Ryb3BDb21wb25lbnQ6IEJhY2tkcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMubW9kYWwsIGNsYXNzTmFtZSksXG4gICAgb3Blbjogb3BlbixcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCBNb2RhbFByb3BzKSwgc2xpZGluZ0RyYXdlcik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERyYXdlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBTaWRlIGZyb20gd2hpY2ggdGhlIGRyYXdlciB3aWxsIGFwcGVhci5cbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGRyYXdlci5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIGRyYXdlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNb2RhbGBdKC9hcGkvbW9kYWwvKSBlbGVtZW50LlxuICAgKi9cbiAgTW9kYWxQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRyYXdlciBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgU2xpZGVgXSgvYXBpL3NsaWRlLykgZWxlbWVudC5cbiAgICovXG4gIFNsaWRlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3Blcm1hbmVudCcsICdwZXJzaXN0ZW50JywgJ3RlbXBvcmFyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBmbGlwOiBmYWxzZVxufSkoRHJhd2VyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIHBhZGRpbmc6IDlcbiAgfSxcbiAgY2hlY2tlZDoge30sXG4gIGRpc2FibGVkOiB7fSxcbiAgaW5wdXQ6IHtcbiAgICBjdXJzb3I6ICdpbmhlcml0JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgekluZGV4OiAxXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFN3aXRjaEJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2l0Y2hCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNoZWNrZWRQcm9wID0gcHJvcHMuY2hlY2tlZCxcbiAgICAgIGNoZWNrZWRJY29uID0gcHJvcHMuY2hlY2tlZEljb24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRDaGVja2VkID0gcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Gb2N1c1wiLCBcImNoZWNrZWRcIiwgXCJjaGVja2VkSWNvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0Q2hlY2tlZFwiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogY2hlY2tlZFByb3AsXG4gICAgZGVmYXVsdDogQm9vbGVhbihkZWZhdWx0Q2hlY2tlZCksXG4gICAgbmFtZTogJ1N3aXRjaEJhc2UnLFxuICAgIHN0YXRlOiAnY2hlY2tlZCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSBfc2xpY2VkVG9BcnJheShfdXNlQ29udHJvbGxlZCwgMiksXG4gICAgICBjaGVja2VkID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0Q2hlY2tlZFN0YXRlID0gX3VzZUNvbnRyb2xsZWQyWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIG5ld0NoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICBzZXRDaGVja2VkU3RhdGUobmV3Q2hlY2tlZCk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIC8vIFRPRE8gdjU6IHJlbW92ZSB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgICAgb25DaGFuZ2UoZXZlbnQsIG5ld0NoZWNrZWQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlZFByb3A7XG5cbiAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgaWYgKHR5cGVvZiBkaXNhYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhc0xhYmVsRm9yID0gdHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGVja2VkICYmIGNsYXNzZXMuY2hlY2tlZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHJvbGU6IHVuZGVmaW5lZCxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHtcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBjaGVja2VkOiBjaGVja2VkUHJvcCxcbiAgICBkZWZhdWx0Q2hlY2tlZDogZGVmYXVsdENoZWNrZWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmlucHV0LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBpZDogaGFzTGFiZWxGb3IgJiYgaWQsXG4gICAgbmFtZTogbmFtZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHJlZjogaW5wdXRSZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCBpbnB1dFByb3BzKSksIGNoZWNrZWQgPyBjaGVja2VkSWNvbiA6IGljb24pO1xufSk7IC8vIE5COiBJZiBjaGFuZ2VkLCBwbGVhc2UgdXBkYXRlIENoZWNrYm94LCBTd2l0Y2ggYW5kIFJhZGlvXG4vLyBzbyB0aGF0IHRoZSBBUEkgZG9jdW1lbnRhdGlvbiBpcyB1cGRhdGVkLlxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2l0Y2hCYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jaGVja2VkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyBjaGVja2VkIHN0YXRlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgIChib29sZWFuKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGNvbXBvbmVudCBwcm9wIGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlU3dpdGNoQmFzZSdcbn0pKFN3aXRjaEJhc2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgSWNvbkJ1dHRvblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgU3dpdGNoQmFzZSBmcm9tICcuLi9pbnRlcm5hbC9Td2l0Y2hCYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgd2lkdGg6IDM0ICsgMTIgKiAyLFxuICAgICAgaGVpZ2h0OiAxNCArIDEyICogMixcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICAvLyBSZXNldCB0aGUgc3RhY2tpbmcgY29udGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwic3RhcnRcImAuICovXG4gICAgZWRnZVN0YXJ0OiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFN3aXRjaEJhc2VgIGNvbXBvbmVudCdzIGByb290YCBjbGFzcy4gKi9cbiAgICBzd2l0Y2hCYXNlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB6SW5kZXg6IDEsXG4gICAgICAvLyBSZW5kZXIgYWJvdmUgdGhlIGZvY3VzIHJpcHBsZS5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNTBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0sXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydsZWZ0JywgJ3RyYW5zZm9ybSddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDIwcHgpJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjEyIDogMC4xXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBTd2l0Y2hCYXNlIGNvbXBvbmVudCdzIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs4MDBdXG4gICAgICB9LFxuICAgICAgJyYkY2hlY2tlZCArICR0cmFjayc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIFN3aXRjaEJhc2UgY29tcG9uZW50J3Mgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXVxuICAgICAgfSxcbiAgICAgICcmJGNoZWNrZWQgKyAkdHJhY2snOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICsgJHRyYWNrJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgd2lkdGg6IDQwLFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIHBhZGRpbmc6IDcsXG4gICAgICAnJiAkdGh1bWInOiB7XG4gICAgICAgIHdpZHRoOiAxNixcbiAgICAgICAgaGVpZ2h0OiAxNlxuICAgICAgfSxcbiAgICAgICcmICRzd2l0Y2hCYXNlJzoge1xuICAgICAgICBwYWRkaW5nOiA0LFxuICAgICAgICAnJiRjaGVja2VkJzoge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMTZweCknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBTd2l0Y2hCYXNlYCBjb21wb25lbnQncyBgY2hlY2tlZGAgY2xhc3MuICovXG4gICAgY2hlY2tlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgU3dpdGNoQmFzZSBjb21wb25lbnQncyBkaXNhYmxlZCBjbGFzcy4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgU3dpdGNoQmFzZSBjb21wb25lbnQncyBpbnB1dCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBsZWZ0OiAnLTEwMCUnLFxuICAgICAgd2lkdGg6ICczMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgdXNlZCB0byBjcmVhdGUgdGhlIHRodW1iIHBhc3NlZCB0byB0aGUgaW50ZXJuYWwgYFN3aXRjaEJhc2VgIGNvbXBvbmVudCBgaWNvbmAgcHJvcC4gKi9cbiAgICB0aHVtYjoge1xuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHdpZHRoOiAyMCxcbiAgICAgIGhlaWdodDogMjAsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0cmFjayBlbGVtZW50LiAqL1xuICAgIHRyYWNrOiB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6IDE0IC8gMixcbiAgICAgIHpJbmRleDogLTEsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydvcGFjaXR5JywgJ2JhY2tncm91bmQtY29sb3InXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmNvbW1vbi5ibGFjayA6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gMC4zOCA6IDAuM1xuICAgIH1cbiAgfTtcbn07XG52YXIgU3dpdGNoID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3dpdGNoKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3NlY29uZGFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZWRnZSA9IHByb3BzLmVkZ2UsXG4gICAgICBlZGdlID0gX3Byb3BzJGVkZ2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVkZ2UsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZWRnZVwiLCBcInNpemVcIl0pO1xuXG4gIHZhciBpY29uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudGh1bWJcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwge1xuICAgICAgJ3N0YXJ0JzogY2xhc3Nlcy5lZGdlU3RhcnQsXG4gICAgICAnZW5kJzogY2xhc3Nlcy5lZGdlRW5kXG4gICAgfVtlZGdlXSwgc2l6ZSA9PT0gXCJzbWFsbFwiICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpdGNoQmFzZSwgX2V4dGVuZHMoe1xuICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICBpY29uOiBpY29uLFxuICAgIGNoZWNrZWRJY29uOiBpY29uLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5zd2l0Y2hCYXNlLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSksXG4gICAgICBpbnB1dDogY2xhc3Nlcy5pbnB1dCxcbiAgICAgIGNoZWNrZWQ6IGNsYXNzZXMuY2hlY2tlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFja1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRDaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3dpdGNoIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydlbmQnLCAnc3RhcnQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgc3dpdGNoLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIHN3aXRjaCBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICogVGhlIGJyb3dzZXIgdXNlcyBcIm9uXCIgYXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTd2l0Y2gnXG59KShTd2l0Y2gpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgbWFyZ2luTGVmdDogLTExLFxuICAgICAgbWFyZ2luUmlnaHQ6IDE2LFxuICAgICAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxhYmVsUGxhY2VtZW50PVwic3RhcnRcImAuICovXG4gICAgbGFiZWxQbGFjZW1lbnRTdGFydDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2LFxuICAgICAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICAgICAgbWFyZ2luUmlnaHQ6IC0xMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cInRvcFwiYC4gKi9cbiAgICBsYWJlbFBsYWNlbWVudFRvcDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxhYmVsUGxhY2VtZW50PVwiYm90dG9tXCJgLiAqL1xuICAgIGxhYmVsUGxhY2VtZW50Qm90dG9tOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxhYmVsJ3MgVHlwb2dyYXBoeSBjb21wb25lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogRHJvcCBpbiByZXBsYWNlbWVudCBvZiB0aGUgYFJhZGlvYCwgYFN3aXRjaGAgYW5kIGBDaGVja2JveGAgY29tcG9uZW50LlxuICogVXNlIHRoaXMgY29tcG9uZW50IGlmIHlvdSB3YW50IHRvIGRpc3BsYXkgYW4gZXh0cmEgbGFiZWwuXG4gKi9cblxudmFyIEZvcm1Db250cm9sTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250cm9sID0gcHJvcHMuY29udHJvbCxcbiAgICAgIGRpc2FibGVkUHJvcCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbGFiZWxQbGFjZW1lbnQgPSBwcm9wcy5sYWJlbFBsYWNlbWVudCxcbiAgICAgIGxhYmVsUGxhY2VtZW50ID0gX3Byb3BzJGxhYmVsUGxhY2VtZW50ID09PSB2b2lkIDAgPyAnZW5kJyA6IF9wcm9wcyRsYWJlbFBsYWNlbWVudCxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hlY2tlZFwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb250cm9sXCIsIFwiZGlzYWJsZWRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibGFiZWxQbGFjZW1lbnRcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGRpc2FibGVkID0gZGlzYWJsZWRQcm9wO1xuXG4gIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb250cm9sLnByb3BzLmRpc2FibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRpc2FibGVkID0gY29udHJvbC5wcm9wcy5kaXNhYmxlZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBjb250cm9sUHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH07XG4gIFsnY2hlY2tlZCcsICduYW1lJywgJ29uQ2hhbmdlJywgJ3ZhbHVlJywgJ2lucHV0UmVmJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBjb250cm9sLnByb3BzW2tleV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9wc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udHJvbFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGxhYmVsUGxhY2VtZW50ICE9PSAnZW5kJyAmJiBjbGFzc2VzW1wibGFiZWxQbGFjZW1lbnRcIi5jb25jYXQoY2FwaXRhbGl6ZShsYWJlbFBsYWNlbWVudCkpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNvbnRyb2wsIGNvbnRyb2xQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHtcbiAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxhYmVsLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9LCBsYWJlbCkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBhcHBlYXJzIHNlbGVjdGVkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIGNvbnRyb2wgZWxlbWVudC4gRm9yIGluc3RhbmNlLCBpdCBjYW4gYmUgYmUgYSBgUmFkaW9gLCBhIGBTd2l0Y2hgIG9yIGEgYENoZWNrYm94YC5cbiAgICovXG4gIGNvbnRyb2w6IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbnRyb2wgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaW4gYW4gZW5jbG9zaW5nIGxhYmVsIGVsZW1lbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbFBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2VuZCcsICdzdGFydCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IGNoZWNrZWQgc3RhdGUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAgKGJvb2xlYW4pLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sTGFiZWwnXG59KShGb3JtQ29udHJvbExhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcm93PXt0cnVlfWAuICovXG4gIHJvdzoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnXG4gIH1cbn07XG4vKipcbiAqIGBGb3JtR3JvdXBgIHdyYXBzIGNvbnRyb2xzIHN1Y2ggYXMgYENoZWNrYm94YCBhbmQgYFN3aXRjaGAuXG4gKiBJdCBwcm92aWRlcyBjb21wYWN0IHJvdyBsYXlvdXQuXG4gKiBGb3IgdGhlIGBSYWRpb2AsIHlvdSBzaG91bGQgYmUgdXNpbmcgdGhlIGBSYWRpb0dyb3VwYCBjb21wb25lbnQgaW5zdGVhZCBvZiB0aGlzIG9uZS5cbiAqL1xuXG52YXIgRm9ybUdyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUdyb3VwKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJHJvdyA9IHByb3BzLnJvdyxcbiAgICAgIHJvdyA9IF9wcm9wcyRyb3cgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJvdyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicm93XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcm93ICYmIGNsYXNzZXMucm93KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtR3JvdXAucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgZ3JvdXAgb2YgZWxlbWVudHMgaW4gYSBjb21wYWN0IHJvdy5cbiAgICovXG4gIHJvdzogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUdyb3VwJ1xufSkoRm9ybUdyb3VwKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Td2l0Y2gnO1xuaW1wb3J0IEZvcm1Db250cm9sTGFiZWwgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2xMYWJlbCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Hcm91cCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XG4gIHN3aXRjaDoge1xuICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICB9LFxufSkpO1xuXG5jb25zdCBTd2l0Y2hUaGVtZSA9ICh7IGlzTGlnaHQsIGhhbmRsZUNoYW5nZVRvZ2dsZSB9KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcbiAgcmV0dXJuIChcbiAgICA8Rm9ybUdyb3VwIGNsYXNzTmFtZT17Y2xhc3Nlcy5zd2l0Y2h9PlxuICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgY29udHJvbD17XG4gICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgY2hlY2tlZD17aXNMaWdodH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VUb2dnbGV9XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwidGhlbWUgc3dpdGNoXCJcbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICAgIGxhYmVsPXtpc0xpZ2h0ID8gJ0xpZ2h0IE1vZGUnIDogJ0RhcmsgTW9kZSd9XG4gICAgICAvPlxuICAgIDwvRm9ybUdyb3VwPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhTd2l0Y2hUaGVtZSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgTGlzdEl0ZW1zIGZyb20gJy4vTGlzdEl0ZW1zJztcbmltcG9ydCBEaXZpZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpdmlkZXInO1xuaW1wb3J0IERyYXdlciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EcmF3ZXInO1xuaW1wb3J0IExpc3QgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvTGlzdCc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uJztcbmltcG9ydCBTd2l0Y2hUaGVtZSBmcm9tICcuL1N3aXRjaFRoZW1lJztcblxuLy8gSWNvblxuaW1wb3J0IENoZXZyb25MZWZ0SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQ2hldnJvbkxlZnQnO1xuXG5jb25zdCBkcmF3ZXJXaWR0aCA9IDI0MDtcblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XG4gIGRyYXdlclBhcGVyOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgd2lkdGg6IGRyYXdlcldpZHRoLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycCxcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICB9KSxcbiAgfSxcbiAgdG9vbGJhckljb246IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICAuLi50aGVtZS5taXhpbnMudG9vbGJhcixcbiAgfSxcbiAgc3dpdGNoOiB7XG4gICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gIH0sXG4gIGRyYXdlclBhcGVyQ2xvc2U6IHtcbiAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycCxcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgIH0pLFxuICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDcpLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDkpLFxuICAgIH0sXG4gIH0sXG59KSk7XG5cbmNvbnN0IFNpZGVCYXIgPSAoeyBvcGVuLCBoYW5kbGVEcmF3ZXJDbG9zZSwgY291bnQsIG5vdGUsIHRvZ2dsZVRoZW1lIH0pID0+IHtcbiAgY29uc3Qga2V5U3RvcmUgPSAndGhlbWUnO1xuICBjb25zdCBbaXNMaWdodCwgc2V0SXNMaWdodF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVRvZ2dsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudCkgPT4ge1xuICAgICAgc2V0SXNMaWdodChldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgICB0b2dnbGVUaGVtZSgpO1xuICAgIH0sXG4gICAgW3RvZ2dsZVRoZW1lXVxuICApO1xuXG4gIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgKGF3YWl0IGVsZWN0cm9uLnN0b3JlQXBpLmdldFN0b3JlKGtleVN0b3JlKSkgJiZcbiAgICAoYXdhaXQgZWxlY3Ryb24uc3RvcmVBcGkuZ2V0U3RvcmUoa2V5U3RvcmUpKSA9PT0gJ2xpZ2h0J1xuICAgICAgPyBzZXRJc0xpZ2h0KHRydWUpXG4gICAgICA6IHNldElzTGlnaHQoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RHJhd2VyXG4gICAgICB2YXJpYW50PVwicGVybWFuZW50XCJcbiAgICAgIGNsYXNzZXM9e3tcbiAgICAgICAgcGFwZXI6IGNsc3goY2xhc3Nlcy5kcmF3ZXJQYXBlciwgIW9wZW4gJiYgY2xhc3Nlcy5kcmF3ZXJQYXBlckNsb3NlKSxcbiAgICAgIH19XG4gICAgICBvcGVuPXtvcGVufVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnRvb2xiYXJJY29ufT5cbiAgICAgICAgPEljb25CdXR0b24gb25DbGljaz17aGFuZGxlRHJhd2VyQ2xvc2V9PlxuICAgICAgICAgIDxDaGV2cm9uTGVmdEljb24gLz5cbiAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8RGl2aWRlciAvPlxuICAgICAgPExpc3Q+XG4gICAgICAgIDxMaXN0SXRlbXMgY291bnQ9e2NvdW50fSBub3RlPXtub3RlfSAvPlxuICAgICAgICA8U3dpdGNoVGhlbWVcbiAgICAgICAgICBpc0xpZ2h0PXtpc0xpZ2h0fVxuICAgICAgICAgIGhhbmRsZUNoYW5nZVRvZ2dsZT17aGFuZGxlQ2hhbmdlVG9nZ2xlfVxuICAgICAgICAvPlxuICAgICAgPC9MaXN0PlxuICAgIDwvRHJhd2VyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZUJhcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEdhcCA9ICh7IHdpZHRoLCBoZWlnaHQgfSkgPT4ge1xuICByZXR1cm4gPGRpdiBzdHlsZT17eyB3aWR0aCwgaGVpZ2h0IH19IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhHYXApO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0LCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGhlaWdodDogJzAuMDFlbScsXG4gICAgLy8gRml4IElFIDExIGZsZXhib3ggYWxpZ25tZW50LiBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgICBtYXhIZWlnaHQ6ICcyZW0nLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgZmlsbGVkOiB7XG4gICAgJyYkcG9zaXRpb25TdGFydDpub3QoJGhpZGRlbkxhYmVsKSc6IHtcbiAgICAgIG1hcmdpblRvcDogMTZcbiAgICB9XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJzdGFydFwiYC4gKi9cbiAgcG9zaXRpb25TdGFydDoge1xuICAgIG1hcmdpblJpZ2h0OiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJlbmRcImAuICovXG4gIHBvc2l0aW9uRW5kOiB7XG4gICAgbWFyZ2luTGVmdDogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQb2ludGVyRXZlbnRzPXRydWVgLiAqL1xuICBkaXNhYmxlUG9pbnRlckV2ZW50czoge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIGlmIHRoZSBhZG9ybm1lbnQgaXMgdXNlZCBpbnNpZGUgPEZvcm1Db250cm9sIGhpZGRlbkxhYmVsIC8+LiAqL1xuICBoaWRkZW5MYWJlbDoge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgaWYgdGhlIGFkb3JubWVudCBpcyB1c2VkIGluc2lkZSA8Rm9ybUNvbnRyb2wgbWFyZ2luPVwiZGVuc2VcIiAvPi4gKi9cbiAgbWFyZ2luRGVuc2U6IHt9XG59O1xudmFyIElucHV0QWRvcm5tZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRBZG9ybm1lbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9pbnRlciA9IHByb3BzLmRpc2FibGVQb2ludGVyRXZlbnRzLFxuICAgICAgZGlzYWJsZVBvaW50ZXJFdmVudHMgPSBfcHJvcHMkZGlzYWJsZVBvaW50ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb2ludGVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgdmFyaWFudFByb3AgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVQb2ludGVyRXZlbnRzXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJwb3NpdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCkgfHwge307XG4gIHZhciB2YXJpYW50ID0gdmFyaWFudFByb3A7XG5cbiAgaWYgKHZhcmlhbnRQcm9wICYmIG11aUZvcm1Db250cm9sLnZhcmlhbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHZhcmlhbnRQcm9wID09PSBtdWlGb3JtQ29udHJvbC52YXJpYW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBUaGUgYElucHV0QWRvcm5tZW50YCB2YXJpYW50IGluZmVycyB0aGUgdmFyaWFudCBwcm9wICcgKyAneW91IGRvIG5vdCBoYXZlIHRvIHByb3ZpZGUgb25lLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChtdWlGb3JtQ29udHJvbCAmJiAhdmFyaWFudCkge1xuICAgIHZhcmlhbnQgPSBtdWlGb3JtQ29udHJvbC52YXJpYW50O1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZGlzYWJsZVBvaW50ZXJFdmVudHMgJiYgY2xhc3Nlcy5kaXNhYmxlUG9pbnRlckV2ZW50cywgbXVpRm9ybUNvbnRyb2wuaGlkZGVuTGFiZWwgJiYgY2xhc3Nlcy5oaWRkZW5MYWJlbCwgdmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYgY2xhc3Nlcy5maWxsZWQsIHtcbiAgICAgICdzdGFydCc6IGNsYXNzZXMucG9zaXRpb25TdGFydCxcbiAgICAgICdlbmQnOiBjbGFzc2VzLnBvc2l0aW9uRW5kXG4gICAgfVtwb3NpdGlvbl0sIG11aUZvcm1Db250cm9sLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgJiYgIWRpc2FibGVUeXBvZ3JhcGh5ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIlxuICB9LCBjaGlsZHJlbikgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEFkb3JubWVudC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBhbiBgSWNvbkJ1dHRvbmAgb3Igc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSByb290LlxuICAgKiBUaGlzIGFsbG93cyBmb3IgdGhlIGNvbnRlbnQgb2YgdGhlIGFkb3JubWVudCB0byBmb2N1cyB0aGUgaW5wdXQgb24gY2xpY2suXG4gICAqL1xuICBkaXNhYmxlUG9pbnRlckV2ZW50czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGNoaWxkcmVuIGlzIGEgc3RyaW5nIHRoZW4gZGlzYWJsZSB3cmFwcGluZyBpbiBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIHRoaXMgYWRvcm5tZW50IHNob3VsZCBhcHBlYXIgcmVsYXRpdmUgdG8gdGhlIGBJbnB1dGAuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnc3RhcnQnLCAnZW5kJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIE5vdGU6IElmIHlvdSBhcmUgdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCBvciB0aGUgYEZvcm1Db250cm9sYCBjb21wb25lbnRcbiAgICogeW91IGRvIG5vdCBoYXZlIHRvIHNldCB0aGlzIG1hbnVhbGx5LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0QWRvcm5tZW50J1xufSkoSW5wdXRBZG9ybm1lbnQpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IEdhcCBmcm9tICcuL0dhcCc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9PdXRsaW5lZElucHV0JztcbmltcG9ydCBGb3JtSGVscGVyVGV4dCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Gb3JtSGVscGVyVGV4dCc7XG5pbXBvcnQgSW5wdXRBZG9ybm1lbnQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRBZG9ybm1lbnQnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5cbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xuICBtYXJnaW46IHtcbiAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMSksXG4gIH0sXG4gIHRleHRGaWVsZDoge1xuICAgIHdpZHRoOiAnODAlJyxcbiAgfSxcbiAgd2lkdGhGdWxsOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgfSxcbiAgd2hpdGVTcGFjZVdyYXA6IHtcbiAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJyxcbiAgfSxcbn0pKTtcblxuY29uc3QgRGV0YWlsRmlsZSA9ICh7XG4gIHBhdGgsXG4gIGZpbGVOYW1lLFxuICBjb3VudCxcbiAgbmFtZVdhdixcbiAgY3VycmVudENvdW50LFxuICBoYW5kbGVDaGFuZ2VQb3NpdGlvbixcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xuICByZXR1cm4gKFxuICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJyb3dcIiBjbGFzc05hbWU9e2NsYXNzZXMud2lkdGhGdWxsfT5cbiAgICAgIDxHcmlkIGl0ZW0geHM9ezZ9IG1kPXsxMn0gbGc9ezEyfSBjbGFzc05hbWU9e2NsYXNzZXMud2lkdGhGdWxsfT5cbiAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IG1kPXsxMn0gbGc9ezEyfT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9XCJoNVwiIHZhcmlhbnQ9XCJzdWJ0aXRsZTJcIj5cbiAgICAgICAgICAgIFBhdGhcbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgIGNvbXBvbmVudD1cInBcIlxuICAgICAgICAgICAgdmFyaWFudD1cImNhcHRpb25cIlxuICAgICAgICAgICAgbm9XcmFwXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMud2hpdGVTcGFjZVdyYXB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3BhdGggPyBwYXRoIDogJy0nfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9HcmlkPlxuICAgICAgICA8R2FwIGhlaWdodD17MTB9IC8+XG4gICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBtZD17MTJ9IGxnPXsxMn0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PVwiaDVcIiB2YXJpYW50PVwic3VidGl0bGUyXCI+XG4gICAgICAgICAgICBGaWxlIGNzdlxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9XCJwXCIgdmFyaWFudD1cImNhcHRpb25cIiBub1dyYXA+XG4gICAgICAgICAgICB7ZmlsZU5hbWUgPyBmaWxlTmFtZSA6ICctJ31cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgICAgPEdhcCBoZWlnaHQ9ezEwfSAvPlxuICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0gbWQ9ezEyfSBsZz17MTJ9PlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD1cImg1XCIgdmFyaWFudD1cInN1YnRpdGxlMlwiPlxuICAgICAgICAgICAgRmlsZSB3YXZcbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgIGNvbXBvbmVudD1cInBcIlxuICAgICAgICAgICAgdmFyaWFudD1cImNhcHRpb25cIlxuICAgICAgICAgICAgbm9XcmFwXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMud2hpdGVTcGFjZVdyYXB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge25hbWVXYXYgPyBuYW1lV2F2IDogJy0nfVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPC9HcmlkPlxuICAgICAgPC9HcmlkPlxuICAgICAgPEdhcCBoZWlnaHQ9ezEwfSAvPlxuICAgICAgPEdyaWQgaXRlbSB4cz17Nn0gbWQ9ezEyfSBsZz17MTJ9IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLm1hcmdpbiwgY2xhc3Nlcy50ZXh0RmllbGQpfVxuICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXG4gICAgICAgID5cbiAgICAgICAgICA8T3V0bGluZWRJbnB1dFxuICAgICAgICAgICAgaWQ9XCJvdXRsaW5lZC1hZG9ybm1lbnQtd2VpZ2h0XCJcbiAgICAgICAgICAgIHZhbHVlPXtjdXJyZW50Q291bnR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IGhhbmRsZUNoYW5nZVBvc2l0aW9uKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIG9uS2V5RG93bj17KGUpID0+IGhhbmRsZUNoYW5nZVBvc2l0aW9uKGUudGFyZ2V0LnZhbHVlLCBlLmtleSl9XG4gICAgICAgICAgICBlbmRBZG9ybm1lbnQ9e1xuICAgICAgICAgICAgICA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJlbmRcIj5cbiAgICAgICAgICAgICAgICAvIHtjb3VudCA/IGNvdW50IDogOTk5OX1cbiAgICAgICAgICAgICAgPC9JbnB1dEFkb3JubWVudD5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJvdXRsaW5lZC13ZWlnaHQtaGVscGVyLXRleHRcIlxuICAgICAgICAgICAgaW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICdjdXJyZW50JyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgIGxhYmVsV2lkdGg9ezB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJvdXRsaW5lZC13ZWlnaHQtaGVscGVyLXRleHRcIj5cbiAgICAgICAgICAgIEN1cnJlbnRcbiAgICAgICAgICA8L0Zvcm1IZWxwZXJUZXh0PlxuICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgPC9HcmlkPlxuICAgIDwvR3JpZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oRGV0YWlsRmlsZSk7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYmFja2dyb3VuZENvbG9yRGVmYXVsdCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5hcHBCYXIsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZml4ZWRcImAuICovXG4gICAgcG9zaXRpb25GaXhlZDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGFwcCBiYXIgdG8gYmUgdmlzaWJsZSBvbiBlYWNoIHByaW50ZWQgcGFnZS5cbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICAvLyDimqDvuI8gc3RpY2t5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwicmVsYXRpdmVcImAuICovXG4gICAgcG9zaXRpb25SZWxhdGl2ZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidHJhbnNwYXJlbnRcImAuICovXG4gICAgY29sb3JUcmFuc3BhcmVudDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG52YXIgQXBwQmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcInBvc2l0aW9uXCIuY29uY2F0KGNhcGl0YWxpemUocG9zaXRpb24pKV0sIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGFzc05hbWUsIHBvc2l0aW9uID09PSAnZml4ZWQnICYmICdtdWktZml4ZWQnKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBcHBCYXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndHJhbnNwYXJlbnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbmluZyB0eXBlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZFxuICAgKiBbaW4gdGhlIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9DU1MvQ1NTX2xheW91dC9Qb3NpdGlvbmluZykuXG4gICAqIE5vdGU6IGBzdGlja3lgIGlzIG5vdCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYW5kIHdpbGwgZmFsbCBiYWNrIHRvIGBzdGF0aWNgIHdoZW4gdW5hdmFpbGFibGUuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnLCAncmVsYXRpdmUnLCAnc3RhdGljJywgJ3N0aWNreSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInXG59KShBcHBCYXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMilcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyZWd1bGFyXCJgLiAqL1xuICAgIHJlZ3VsYXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRlbnNlXCJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcbnZhciBUb29sYmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG9vbGJhcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3JlZ3VsYXInIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbGJhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydyZWd1bGFyJywgJ2RlbnNlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRvb2xiYXInXG59KShUb29sYmFyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBBcHBCYXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCBUb29sYmFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXInO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbkJ1dHRvbic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcblxuLy8gSWNvblxuaW1wb3J0IE1lbnVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9NZW51JztcbmltcG9ydCBGb2xkZXJPcGVuSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRm9sZGVyT3Blbic7XG5cbmNvbnN0IGRyYXdlcldpZHRoID0gMjQwO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgfSxcbiAgdG9vbGJhcjoge1xuICAgIHBhZGRpbmdSaWdodDogMjQsIC8vIGtlZXAgcmlnaHQgcGFkZGluZyB3aGVuIGRyYXdlciBjbG9zZWRcbiAgfSxcbiAgYXBwQmFyOiB7XG4gICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyICsgMSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWyd3aWR0aCcsICdtYXJnaW4nXSwge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnAsXG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlbixcbiAgICB9KSxcbiAgfSxcbiAgYXBwQmFyU2hpZnQ6IHtcbiAgICBtYXJnaW5MZWZ0OiBkcmF3ZXJXaWR0aCxcbiAgICB3aWR0aDogYGNhbGMoMTAwJSAtICR7ZHJhd2VyV2lkdGh9cHgpYCxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWyd3aWR0aCcsICdtYXJnaW4nXSwge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnAsXG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgfSksXG4gIH0sXG4gIG1lbnVCdXR0b246IHtcbiAgICBtYXJnaW5SaWdodDogMzYsXG4gIH0sXG4gIG1lbnVCdXR0b25IaWRkZW46IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZmxleEdyb3c6IDEsXG4gIH0sXG4gIGFwcEJhclNwYWNlcjogdGhlbWUubWl4aW5zLnRvb2xiYXIsXG59KSk7XG5cbmNvbnN0IE5hdmJhciA9ICh7IG9wZW4sIGhhbmRsZURyYXdlck9wZW4sIGhhbmRsZVNlbGVjdEZpbGUgfSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8QXBwQmFyXG4gICAgICBwb3NpdGlvbj1cImFic29sdXRlXCJcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmFwcEJhciwgb3BlbiAmJiBjbGFzc2VzLmFwcEJhclNoaWZ0KX1cbiAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgPlxuICAgICAgPFRvb2xiYXIgY2xhc3NOYW1lPXtjbGFzc2VzLnRvb2xiYXJ9PlxuICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgIGVkZ2U9XCJzdGFydFwiXG4gICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwib3BlbiBkcmF3ZXJcIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZURyYXdlck9wZW59XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMubWVudUJ1dHRvbiwgb3BlbiAmJiBjbGFzc2VzLm1lbnVCdXR0b25IaWRkZW4pfVxuICAgICAgICA+XG4gICAgICAgICAgPE1lbnVJY29uIC8+XG4gICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICBjb21wb25lbnQ9XCJoMVwiXG4gICAgICAgICAgdmFyaWFudD1cImg2XCJcbiAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgIG5vV3JhcFxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy50aXRsZX1cbiAgICAgICAgPlxuICAgICAgICAgIFZhbGlkYXRpb25cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJvcGVuIGZvbGRlclwiXG4gICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTZWxlY3RGaWxlfVxuICAgICAgICA+XG4gICAgICAgICAgPEZvbGRlck9wZW5JY29uIGZvbnRTaXplPVwibGFyZ2VcIiAvPlxuICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICA8L1Rvb2xiYXI+XG4gICAgPC9BcHBCYXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKE5hdmJhcik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKCkgPT4gKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICdtYXgtY29udGVudCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICB9LFxufSkpO1xuXG5jb25zdCBXYXZlZm9ybUNvbnRhaW5lciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0+e3Byb3BzLmNoaWxkcmVufTwvZGl2Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdhdmVmb3JtQ29udGFpbmVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCgpID0+ICh7XG4gIGNvbnRhaW5lcjoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiA2MCxcbiAgfSxcbn0pKTtcblxuY29uc3QgV2F2ZSA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IHJlZj17cmVmfSBjbGFzc05hbWU9e2NsYXNzZXMuY29udGFpbmVyfT48L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBXYXZlO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuLi9CYWNrZHJvcCc7XG5pbXBvcnQgRmFkZSBmcm9tICcuLi9GYWRlJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL3RyYW5zaXRpb25zJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgLy8gVXNlICFpbXBvcnRhbnQgdG8gb3ZlcnJpZGUgdGhlIE1vZGFsIGlubGluZS1zdHlsZS5cbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSAhaW1wb3J0YW50J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgaWYgYHNjcm9sbD1cInBhcGVyXCJgLiAqL1xuICAgIHNjcm9sbFBhcGVyOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgaWYgYHNjcm9sbD1cImJvZHlcImAuICovXG4gICAgc2Nyb2xsQm9keToge1xuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICcmOmFmdGVyJzoge1xuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50LiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgICAgfSxcbiAgICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgICBwYXBlcjoge1xuICAgICAgbWFyZ2luOiAzMixcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICAvLyBGaXggSUUgMTEgaXNzdWUsIHRvIHJlbW92ZSBhdCBzb21lIHBvaW50LlxuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgb3ZlcmZsb3dZOiAndmlzaWJsZScsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgc2Nyb2xsPVwicGFwZXJcImAuICovXG4gICAgcGFwZXJTY3JvbGxQYXBlcjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA2NHB4KSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBzY3JvbGw9XCJib2R5XCJgLiAqL1xuICAgIHBhcGVyU2Nyb2xsQm9keToge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnIC8vICdpbml0aWFsJyBkb2Vzbid0IHdvcmsgb24gSUUgMTFcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPWZhbHNlYC4gKi9cbiAgICBwYXBlcldpZHRoRmFsc2U6IHtcbiAgICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJ4c1wiYC4gKi9cbiAgICBwYXBlcldpZHRoWHM6IHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NCksXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24oTWF0aC5tYXgodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzLCA0NDQpICsgMzIgKiAyKSwge1xuICAgICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBtYXhXaWR0aD1cInNtXCJgLiAqL1xuICAgIHBhcGVyV2lkdGhTbToge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbSxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bih0aGVtZS5icmVha3BvaW50cy52YWx1ZXMuc20gKyAzMiAqIDIpLCB7XG4gICAgICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPVwibWRcImAuICovXG4gICAgcGFwZXJXaWR0aE1kOiB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kLFxuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5JzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5tZCArIDMyICogMiksIHtcbiAgICAgICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSA2NHB4KSdcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJsZ1wiYC4gKi9cbiAgICBwYXBlcldpZHRoTGc6IHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGcsXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24odGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLmxnICsgMzIgKiAyKSwge1xuICAgICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBtYXhXaWR0aD1cInhsXCJgLiAqL1xuICAgIHBhcGVyV2lkdGhYbDoge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bCxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bih0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueGwgKyAzMiAqIDIpLCB7XG4gICAgICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIHBhcGVyRnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGZ1bGxTY3JlZW49e3RydWV9YC4gKi9cbiAgICBwYXBlckZ1bGxTY3JlZW46IHtcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXhIZWlnaHQ6ICdub25lJyxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IHtcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIERpYWxvZ3MgYXJlIG92ZXJsYWlkIG1vZGFsIHBhcGVyIGJhc2VkIGNvbXBvbmVudHMgd2l0aCBhIGJhY2tkcm9wLlxuICovXG5cbnZhciBEaWFsb2cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2cocHJvcHMsIHJlZikge1xuICB2YXIgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPSBwcm9wcy5kaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICAgIGRpc2FibGVCYWNrZHJvcENsaWNrID0gX3Byb3BzJGRpc2FibGVCYWNrZHJvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQmFja2RybyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9IHByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFc2NhcGVLLFxuICAgICAgX3Byb3BzJGZ1bGxTY3JlZW4gPSBwcm9wcy5mdWxsU2NyZWVuLFxuICAgICAgZnVsbFNjcmVlbiA9IF9wcm9wcyRmdWxsU2NyZWVuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsU2NyZWVuLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRtYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoLFxuICAgICAgbWF4V2lkdGggPSBfcHJvcHMkbWF4V2lkdGggPT09IHZvaWQgMCA/ICdzbScgOiBfcHJvcHMkbWF4V2lkdGgsXG4gICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkVzY2FwZUtleURvd24gPSBwcm9wcy5vbkVzY2FwZUtleURvd24sXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJDb21wb25lbnQgPSBwcm9wcy5QYXBlckNvbXBvbmVudCxcbiAgICAgIFBhcGVyQ29tcG9uZW50ID0gX3Byb3BzJFBhcGVyQ29tcG9uZW50ID09PSB2b2lkIDAgPyBQYXBlciA6IF9wcm9wcyRQYXBlckNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIF9wcm9wcyRzY3JvbGwgPSBwcm9wcy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfcHJvcHMkc2Nyb2xsID09PSB2b2lkIDAgPyAncGFwZXInIDogX3Byb3BzJHNjcm9sbCxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBGYWRlIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgYXJpYURlc2NyaWJlZGJ5ID0gcHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcbiAgICAgIGFyaWFMYWJlbGxlZGJ5ID0gcHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIkJhY2tkcm9wUHJvcHNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQmFja2Ryb3BDbGlja1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZnVsbFNjcmVlblwiLCBcImZ1bGxXaWR0aFwiLCBcIm1heFdpZHRoXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJDb21wb25lbnRcIiwgXCJQYXBlclByb3BzXCIsIFwic2Nyb2xsXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiLCBcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIl0pO1xuXG4gIHZhciBtb3VzZURvd25UYXJnZXQgPSBSZWFjdC51c2VSZWYoKTtcblxuICB2YXIgaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgbW91c2VEb3duVGFyZ2V0LmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVCYWNrZHJvcENsaWNrKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIHRoZSBldmVudHMgbm90IGNvbWluZyBmcm9tIHRoZSBcImJhY2tkcm9wXCJcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsb3NlIHRoZSBkaWFsb2cgd2hlbiBjbGlja2luZyB0aGUgZGlhbG9nIGNvbnRlbnQuXG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBldmVudCBzdGFydHMgYW5kIGVuZHMgb24gdGhlIHNhbWUgRE9NIGVsZW1lbnQuXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgIT09IG1vdXNlRG93blRhcmdldC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW91c2VEb3duVGFyZ2V0LmN1cnJlbnQgPSBudWxsO1xuXG4gICAgaWYgKG9uQmFja2Ryb3BDbGljaykge1xuICAgICAgb25CYWNrZHJvcENsaWNrKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVCYWNrZHJvcENsaWNrICYmIG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgQmFja2Ryb3BDb21wb25lbnQ6IEJhY2tkcm9wLFxuICAgIEJhY2tkcm9wUHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgfSwgQmFja2Ryb3BQcm9wcyksXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb246IHRydWUsXG4gICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2s6IGRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duOiBkaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICBvbkVzY2FwZUtleURvd246IG9uRXNjYXBlS2V5RG93bixcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBvcGVuLFxuICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgb25FeGl0OiBvbkV4aXQsXG4gICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgb25FeGl0ZWQ6IG9uRXhpdGVkLFxuICAgIHJvbGU6IFwibm9uZSBwcmVzZW50YXRpb25cIlxuICB9LCBUcmFuc2l0aW9uUHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGFpbmVyLCBjbGFzc2VzW1wic2Nyb2xsXCIuY29uY2F0KGNhcGl0YWxpemUoc2Nyb2xsKSldKSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZUJhY2tkcm9wQ2xpY2ssXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93blxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlckNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogMjQsXG4gICAgcm9sZTogXCJkaWFsb2dcIixcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZGJ5XG4gIH0sIFBhcGVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wYXBlciwgY2xhc3Nlc1tcInBhcGVyU2Nyb2xsXCIuY29uY2F0KGNhcGl0YWxpemUoc2Nyb2xsKSldLCBjbGFzc2VzW1wicGFwZXJXaWR0aFwiLmNvbmNhdChjYXBpdGFsaXplKFN0cmluZyhtYXhXaWR0aCkpKV0sIFBhcGVyUHJvcHMuY2xhc3NOYW1lLCBmdWxsU2NyZWVuICYmIGNsYXNzZXMucGFwZXJGdWxsU2NyZWVuLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5wYXBlckZ1bGxXaWR0aClcbiAgfSksIGNoaWxkcmVuKSkpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGlhbG9nLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBpZChzKSBvZiB0aGUgZWxlbWVudChzKSB0aGF0IGRlc2NyaWJlIHRoZSBkaWFsb2cuXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpZChzKSBvZiB0aGUgZWxlbWVudChzKSB0aGF0IGxhYmVsIHRoZSBkaWFsb2cuXG4gICAqL1xuICAnYXJpYS1sYWJlbGxlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogRGlhbG9nIGNoaWxkcmVuLCB1c3VhbGx5IHRoZSBpbmNsdWRlZCBzdWItY29tcG9uZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY2xpY2tpbmcgdGhlIGJhY2tkcm9wIHdpbGwgbm90IGZpcmUgdGhlIGBvbkNsb3NlYCBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpYWxvZyB3aWxsIGJlIGZ1bGwtc2NyZWVuXG4gICAqL1xuICBmdWxsU2NyZWVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGlhbG9nIHN0cmV0Y2hlcyB0byBgbWF4V2lkdGhgLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZGlhbG9nIHdpZHRoIGdyb3cgaXMgbGltaXRlZCBieSB0aGUgZGVmYXVsdCBtYXJnaW4uXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIG1heC13aWR0aCBvZiB0aGUgZGlhbG9nLlxuICAgKiBUaGUgZGlhbG9nIHdpZHRoIGdyb3dzIHdpdGggdGhlIHNpemUgb2YgdGhlIHNjcmVlbi5cbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBgbWF4V2lkdGhgLlxuICAgKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ2xnJywgJ21kJywgJ3NtJywgJ3hsJywgJ3hzJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBkaWFsb2cgZW50ZXJzLlxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGRpYWxvZyBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGRpYWxvZyBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQsXG4gICAqIGBkaXNhYmxlS2V5Ym9hcmRgIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGRpYWxvZyBleGl0cy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGRpYWxvZyBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIERpYWxvZyBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgYm9keSBvZiB0aGUgZGlhbG9nLlxuICAgKi9cbiAgUGFwZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBjb250YWluZXIgZm9yIHNjcm9sbGluZyB0aGUgZGlhbG9nLlxuICAgKi9cbiAgc2Nyb2xsOiBQcm9wVHlwZXMub25lT2YoWydib2R5JywgJ3BhcGVyJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9jb21wb25lbnRzL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uI1RyYW5zaXRpb24tcHJvcHMpIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nJ1xufSkoRGlhbG9nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6ICcxNnB4IDI0cHgnLFxuICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgfVxufTtcbnZhciBEaWFsb2dUaXRsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpYWxvZ1RpdGxlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVUeXBvZ3JhcGh5XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBkaXNhYmxlVHlwb2dyYXBoeSA/IGNoaWxkcmVuIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIGNvbXBvbmVudDogXCJoMlwiLFxuICAgIHZhcmlhbnQ6IFwiaDZcIlxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dUaXRsZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gd29uJ3QgYmUgd3JhcHBlZCBieSBhIHR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBGb3IgaW5zdGFuY2UsIHRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gaDQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBoMi5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dUaXRsZSdcbn0pKERpYWxvZ1RpdGxlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERpYWxvZ011aSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2cnO1xuaW1wb3J0IERpYWxvZ1RpdGxlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ1RpdGxlJztcblxuY29uc3QgRGlhbG9nID0gKHsgb3BlbiwgdGl0bGUsIGNoaWxkcmVuID0gJycgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxEaWFsb2dNdWkgb3Blbj17b3Blbn0gYXJpYS1sYWJlbGxlZGJ5PVwiZm9ybS1kaWFsb2ctdGl0bGVcIj5cbiAgICAgIDxEaWFsb2dUaXRsZSBpZD1cImZvcm0tZGlhbG9nLXRpdGxlXCI+e3RpdGxlfTwvRGlhbG9nVGl0bGU+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9EaWFsb2dNdWk+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEaWFsb2c7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiA4LFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3BhY2luZz17ZmFsc2V9YC4gKi9cbiAgc3BhY2luZzoge1xuICAgICcmID4gOm5vdCg6Zmlyc3QtY2hpbGQpJzoge1xuICAgICAgbWFyZ2luTGVmdDogOFxuICAgIH1cbiAgfVxufTtcbnZhciBEaWFsb2dBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQWN0aW9ucyhwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZGlzYWJsZVNwYWNpbmcgPSBwcm9wcy5kaXNhYmxlU3BhY2luZyxcbiAgICAgIGRpc2FibGVTcGFjaW5nID0gX3Byb3BzJGRpc2FibGVTcGFjaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU3BhY2luZyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVTcGFjaW5nXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsICFkaXNhYmxlU3BhY2luZyAmJiBjbGFzc2VzLnNwYWNpbmcpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0FjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGlvbnMgZG8gbm90IGhhdmUgYWRkaXRpb25hbCBtYXJnaW4uXG4gICAqL1xuICBkaXNhYmxlU3BhY2luZzogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQWN0aW9ucydcbn0pKERpYWxvZ0FjdGlvbnMpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogJzhweCAyNHB4JyxcbiAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICAvLyBkaWFsb2cgd2l0aG91dCB0aXRsZVxuICAgICAgICBwYWRkaW5nVG9wOiAyMFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXZpZGVycz17dHJ1ZX1gLiAqL1xuICAgIGRpdmlkZXJzOiB7XG4gICAgICBwYWRkaW5nOiAnMTZweCAyNHB4JyxcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlciksXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9O1xufTtcbnZhciBEaWFsb2dDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQ29udGVudChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXZpZGVycyA9IHByb3BzLmRpdmlkZXJzLFxuICAgICAgZGl2aWRlcnMgPSBfcHJvcHMkZGl2aWRlcnMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpdmlkZXJzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXZpZGVyc1wiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGRpdmlkZXJzICYmIGNsYXNzZXMuZGl2aWRlcnMpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0NvbnRlbnQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgdGhlIHRvcCBhbmQgYm90dG9tIGRpdmlkZXJzLlxuICAgKi9cbiAgZGl2aWRlcnM6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZ0NvbnRlbnQnXG59KShEaWFsb2dDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbWFyZ2luQm90dG9tOiAxMlxuICB9XG59O1xudmFyIERpYWxvZ0NvbnRlbnRUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQ29udGVudFRleHQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJwXCIsXG4gICAgdmFyaWFudDogXCJib2R5MVwiLFxuICAgIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIixcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dDb250ZW50VGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudFRleHQnXG59KShEaWFsb2dDb250ZW50VGV4dCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBFbnN1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge1xuICAgICAgcGFkZGluZzogJzZweCA4cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgcGFkZGluZzogJzVweCAxNXB4JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJyksXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNF0sXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb250YWluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVFbGV2YXRpb249e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlRWxldmF0aW9uOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3RhcnRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgc3RhcnRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IC00LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGVuZEljb24gZWxlbWVudCBpZiBzdXBwbGllZC4gKi9cbiAgICBlbmRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwic21hbGxcImAuICovXG4gICAgaWNvblNpemVTbWFsbDoge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMThcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJtZWRpdW1cImAuICovXG4gICAgaWNvblNpemVNZWRpdW06IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgaWNvblNpemVMYXJnZToge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVsZXZhdGkgPSBwcm9wcy5kaXNhYmxlRWxldmF0aW9uLFxuICAgICAgZGlzYWJsZUVsZXZhdGlvbiA9IF9wcm9wcyRkaXNhYmxlRWxldmF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVsZXZhdGksXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZW5kSWNvblByb3AgPSBwcm9wcy5lbmRJY29uLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0YXJ0SWNvblByb3AgPSBwcm9wcy5zdGFydEljb24sXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRWxldmF0aW9uXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZW5kSWNvblwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcImZ1bGxXaWR0aFwiLCBcInNpemVcIiwgXCJzdGFydEljb25cIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHN0YXJ0SWNvbiA9IHN0YXJ0SWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zdGFydEljb24sIGNsYXNzZXNbXCJpY29uU2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0pXG4gIH0sIHN0YXJ0SWNvblByb3ApO1xuICB2YXIgZW5kSWNvbiA9IGVuZEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZW5kSWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgZW5kSWNvblByb3ApO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgY29sb3IgPT09ICdpbmhlcml0JyA/IGNsYXNzZXMuY29sb3JJbmhlcml0IDogY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQpLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBzaXplICE9PSAnbWVkaXVtJyAmJiBbY2xhc3Nlc1tcIlwiLmNvbmNhdCh2YXJpYW50LCBcIlNpemVcIikuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldXSwgZGlzYWJsZUVsZXZhdGlvbiAmJiBjbGFzc2VzLmRpc2FibGVFbGV2YXRpb24sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgc3RhcnRJY29uLCBjaGlsZHJlbiwgZW5kSWNvbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnY29udGFpbmVkJywgJ291dGxpbmVkJywgJ3RleHQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnO1xuaW1wb3J0IERpYWxvZyBmcm9tICcuL0RpYWxvZyc7XG5pbXBvcnQgRGlhbG9nQWN0aW9ucyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dBY3Rpb25zJztcbmltcG9ydCBEaWFsb2dDb250ZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnQnO1xuaW1wb3J0IERpYWxvZ0NvbnRlbnRUZXh0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnRUZXh0JztcbmltcG9ydCBEaWFsb2dUaXRsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dUaXRsZSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5cbmNvbnN0IERpYWxvZ0lucHV0ID0gKHtcbiAgdGl0bGUgPSAnVGl0bGUnLFxuICBuYW1lV2F2ID0gJ05hbWUgV2F2JyxcbiAgb3BlbixcbiAgaGFuZGxlQ2xvc2VEaWFsb2csXG4gIHZhbHVlID0gJycsXG4gIGhhbmRsZU9uQ2hhbmdlLFxuICBoYW5kbGVPblNhdmUsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPERpYWxvZ1xuICAgICAgb3Blbj17b3Blbn1cbiAgICAgIG9uQ2xvc2U9e2hhbmRsZUNsb3NlRGlhbG9nfVxuICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZm9ybS1kaWFsb2ctdGl0bGVcIlxuICAgICAgbWF4V2lkdGg9XCJzbVwiXG4gICAgPlxuICAgICAgPERpYWxvZ1RpdGxlIGlkPVwiZm9ybS1kaWFsb2ctdGl0bGVcIj57dGl0bGV9PC9EaWFsb2dUaXRsZT5cbiAgICAgIDxEaWFsb2dDb250ZW50XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgd2lkdGg6IDUwMCxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPERpYWxvZ0NvbnRlbnRUZXh0PntuYW1lV2F2fTwvRGlhbG9nQ29udGVudFRleHQ+XG4gICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBoYW5kbGVPbkNoYW5nZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgcm93cz17NX1cbiAgICAgICAgICBtYXJnaW49XCJkZW5zZVwiXG4gICAgICAgICAgaWQ9XCJub3RlXCJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgIC8+XG4gICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgICA8RGlhbG9nQWN0aW9ucz5cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDbG9zZURpYWxvZ30gY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgQ2FuY2VsXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU9uU2F2ZX0gY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgU2F2ZVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvRGlhbG9nQWN0aW9ucz5cbiAgICA8L0RpYWxvZz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oRGlhbG9nSW5wdXQpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBEaWFsb2dBY3Rpb25zIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0FjdGlvbnMnO1xuaW1wb3J0IERpYWxvZ0NvbnRlbnQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQ29udGVudCc7XG5pbXBvcnQgRGlhbG9nQ29udGVudFRleHQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQ29udGVudFRleHQnO1xuaW1wb3J0IERpYWxvZyBmcm9tICcuL0RpYWxvZyc7XG5cbmNvbnN0IERpYWxvZ0NvbmZpciA9ICh7XG4gIG9wZW4gPSBmYWxzZSxcbiAgdGl0bGUgPSAnJyxcbiAgdGV4dCA9ICcnLFxuICBoYW5kbGVPbkNsb3NlLFxuICBoYW5kbGVPbk9rLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxEaWFsb2cgb3Blbj17b3Blbn0gdGl0bGU9e3RpdGxlfT5cbiAgICAgIDxEaWFsb2dDb250ZW50PlxuICAgICAgICA8RGlhbG9nQ29udGVudFRleHQgaWQ9XCJhbGVydC1kaWFsb2ctZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9EaWFsb2dDb250ZW50VGV4dD5cbiAgICAgIDwvRGlhbG9nQ29udGVudD5cbiAgICAgIDxEaWFsb2dBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU9uQ2xvc2V9IGNvbG9yPVwicHJpbWFyeVwiPlxuICAgICAgICAgIENhbmNlbFxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVPbk9rfSBjb2xvcj1cInByaW1hcnlcIiBhdXRvRm9jdXM+XG4gICAgICAgICAgT2tcbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0RpYWxvZ0FjdGlvbnM+XG4gICAgPC9EaWFsb2c+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKERpYWxvZ0NvbmZpcik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJ1dHRvbk11aSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuXG5jb25zdCBmaXhlZFdpZHRoQnV0dG9uID0ge1xuICB3aWR0aDogMTAwLFxufTtcblxuY29uc3QgQnV0dG9uID0gKHsgdmFyaWFudCwgaGFuZGxlQ2xpY2ssIHRleHQgPSAnJywgY29sb3IgPSAnZGVmYXVsdCcgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCdXR0b25NdWlcbiAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgIHN0eWxlPXtmaXhlZFdpZHRoQnV0dG9ufVxuICAgICAgdmFyaWFudD17dmFyaWFudH1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxuICAgID5cbiAgICAgIHt0ZXh0fVxuICAgIDwvQnV0dG9uTXVpPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhCdXR0b24pO1xuIiwiLy8gcGF0aFxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IFdhdmVTdXJmZXIgZnJvbSAnd2F2ZXN1cmZlci5qcyc7XG5cbmltcG9ydCBDc3NCYXNlbGluZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Dc3NCYXNlbGluZSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JY29uQnV0dG9uJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ29udGFpbmVyJztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkJztcblxuLy8gY29tcG9uZW50c1xuaW1wb3J0IFNpZGVCYXIgZnJvbSAnLi9TaWRlQmFyJztcbmltcG9ydCBEZXRhaWxGaWxlIGZyb20gJy4vRGV0YWlsRmlsZSc7XG5pbXBvcnQgTmF2YmFyIGZyb20gJy4vTmF2YmFyJztcbmltcG9ydCBXYXZlZm9ybUNvbnRhaW5lciBmcm9tICcuL1dhdmVmb3JtQ29udGFpbmVyJztcbmltcG9ydCBXYXZlIGZyb20gJy4vV2F2ZSc7XG5pbXBvcnQgRGlhbG9nSW5wdXQgZnJvbSAnLi9EaWFsb2dJbnB1dCc7XG5pbXBvcnQgRGlhbG9nQ29uZmlyQXBwbHkgZnJvbSAnLi9EaWFsb2dDb25maXInO1xuaW1wb3J0IERpYWxvZ0NvbmZpclNhdmUgZnJvbSAnLi9EaWFsb2dDb25maXInO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5cbi8vIGljb25zXG5pbXBvcnQgUGxheUFycm93SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGxheUFycm93JztcbmltcG9ydCBOYXZpZ2F0ZU5leHRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9OYXZpZ2F0ZU5leHQnO1xuaW1wb3J0IE5hdmlnYXRlQmVmb3JlSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTmF2aWdhdGVCZWZvcmUnO1xuaW1wb3J0IFBhdXNlSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGF1c2UnO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgfSxcblxuICBhcHBCYXJTcGFjZXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuICBjb250ZW50OiB7XG4gICAgZmxleEdyb3c6IDEsXG4gICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgIG92ZXJmbG93OiAnYXV0bycsXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZyg0KSxcbiAgfSxcbiAgcGFwZXI6IHtcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICB9LFxuICBmaXhlZEhlaWdodDoge1xuICAgIGhlaWdodDogMjAwLFxuICB9LFxuICBmaXhlZFdpZHRoQnV0dG9uOiB7XG4gICAgd2lkdGg6IDEwMCxcbiAgfSxcbiAgcGFwZXJNb2RhbDoge1xuICAgIC8vIE1vZGFsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgd2lkdGg6IDQwMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICBib3JkZXI6ICcycHggc29saWQgIzAwMCcsXG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzVdLFxuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMiwgNCwgMyksXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgcGFkZGluZ1RvcDogMjAsXG4gICAgcGFkZGluZ0JvdHRvbTogMjIsXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBwYWRkaW5nVG9wOiAyMCxcbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDEpLFxuICB9LFxuICB3aXRob3V0TGFiZWw6IHtcbiAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMyksXG4gIH0sXG59KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERhc2hib2FyZCh7IG9uVG9nZ2xlVGhlbWUgfSkge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbb3BlbkRpYWxvZ0lucHV0LCBzZXRPcGVuRGlhbG9nSW5wdXRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbb3BlbkRpYWxvZ0FwcGx5LCBzZXRPcGVuRGlhbG9nQXBwbHldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbb3BlbkRpYWxvZ1NhdmUsIHNldE9wZW5EaWFsb2dTYXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBjb250ZW50XG4gIGNvbnN0IFtmaWxlUGF0aCwgc2V0RmlsZVBhdGhdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZmlsZU5hbWUsIHNldEZpbGVOYW1lXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcG9zaXRpb24sIHNldFBvc2l0aW9uXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbY3VycmVudENvdW50LCBzZXRDdXJyZW50Q291bnRdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcGxheWluZywgc2V0UGxheWluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkYXRhQ29udGFpbnNOb3Rlcywgc2V0RGF0YUNvbnRhaW5zTm90ZXNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbbm90ZSwgc2V0Tm90ZV0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgbGV0IHdhdmVmb3JtID0gdXNlUmVmKCk7XG4gIGNvbnN0IGNvbnRhaW5lcldhdmVSZWYgPSB1c2VSZWYoKTtcblxuICAvLyBvcGVuIGRpYWxvZyBpbnB1dFxuICBjb25zdCBoYW5kbGVPcGVuRGlhbG9nSW5wdXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgZGF0YS5sZW5ndGggPiAxICYmXG4gICAgICBkYXRhW3Bvc2l0aW9uXS5oYXNPd25Qcm9wZXJ0eSgnbm90ZXdhdicpICYmXG4gICAgICBzZXROb3RlKGRhdGFbcG9zaXRpb25dLm5vdGV3YXYpO1xuICAgIHNldE9wZW5EaWFsb2dJbnB1dCh0cnVlKTtcbiAgfSwgW2RhdGEsIHBvc2l0aW9uXSk7XG5cbiAgLy8gY2xvc2UgZGlhbG9nIGlucHV0XG4gIGNvbnN0IGhhbmRsZUNsb3NlRGlhbG9nSW5wdXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0T3BlbkRpYWxvZ0lucHV0KGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZVdyaXRlTm90ZSA9IHVzZUNhbGxiYWNrKCh2YWx1ZSkgPT4ge1xuICAgIHNldE5vdGUodmFsdWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlU2F2ZU5vdGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgZGF0YVtwb3NpdGlvbl0ubm90ZXdhdiA9IG5vdGU7XG4gICAgc2V0RGF0YShbLi4uZGF0YV0pO1xuICAgIHNldE9wZW5EaWFsb2dJbnB1dChmYWxzZSk7XG4gICAgc2V0Tm90ZSgnJyk7XG4gIH0sIFtkYXRhLCBwb3NpdGlvbiwgbm90ZV0pO1xuXG4gIC8vIERpYWxvZyBjb25maXJtYXRpb25cbiAgY29uc3QgaGFuZGxlT3BlbkRpYWxvZ0FwcGx5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE9wZW5EaWFsb2dBcHBseSh0cnVlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZUNsb3NlRGlhbG9nQXBwbHkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0T3BlbkRpYWxvZ0FwcGx5KGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZU9wZW5EaWFsb2dTYXZlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE9wZW5EaWFsb2dTYXZlKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xvc2VEaWFsb2dTYXZlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE9wZW5EaWFsb2dTYXZlKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZVNhdmVFeHBvcnRUb1hsc3ggPSAoKSA9PiB7XG4gICAgZWxlY3Ryb24uZmlsZXNBcGkuZXhwb3J0VG9Dc3YoZGF0YSwgZmlsZVBhdGgpO1xuXG4gICAgc2V0T3BlbkRpYWxvZ1NhdmUoZmFsc2UpO1xuICB9O1xuXG4gIC8vIG9wZW4gZHJhd2VyXG4gIGNvbnN0IGhhbmRsZURyYXdlck9wZW4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0T3Blbih0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVEcmF3ZXJDbG9zZSA9ICgpID0+IHtcbiAgICBzZXRPcGVuKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTZWxlY3RGaWxlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGVsZWN0cm9uLmZpbGVzQXBpLnNlbGVjdEZpbGUoKTtcblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYXdhaXQgcmVzdWx0LnBhdGg7XG4gICAgY29uc3QgZGF0YVByZWxvYWQgPSBhd2FpdCByZXN1bHQuZGF0YTtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgZnVsbFBhdGgucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpO1xuXG4gICAgc2V0RmlsZU5hbWUoZmlsZSk7XG4gICAgc2V0RmlsZVBhdGgoZnVsbFBhdGgpO1xuICAgIHNldERhdGEoZGF0YVByZWxvYWQpO1xuXG4gICAgc2V0RGF0YUNvbnRhaW5zTm90ZXMoW10pO1xuICAgIHNldFBvc2l0aW9uKDApO1xuICAgIHNldFBsYXlpbmcoZmFsc2UpO1xuICAgIHNldE5vdGUoJycpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsaXN0Tm90ZSA9IGRhdGEuZmlsdGVyKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0ubm90ZXdhdiAhPT0gJycgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eSgnbm90ZXdhdicpXG4gICAgKTtcbiAgICBzZXREYXRhQ29udGFpbnNOb3RlcyhsaXN0Tm90ZSk7XG5cbiAgICBpZiAoY3VycmVudENvdW50ID09PSAnMCcpIHtcbiAgICAgIHJldHVybiBzZXRDdXJyZW50Q291bnQoJzAnKTtcbiAgICB9XG4gICAgY29uc3QgY291bnQgPSBwb3NpdGlvbiArIDE7XG4gICAgc2V0Q3VycmVudENvdW50KGNvdW50LnRvU3RyaW5nKCkpO1xuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZGlyID0gZmlsZVBhdGguc3Vic3RyaW5nKDAsIGZpbGVQYXRoLmxhc3RJbmRleE9mKCcvJykpO1xuICAgICAgY29uc3QgYXVkaW9EaXIgPSBmaWxlTmFtZS5zdWJzdHJpbmcoMCwgZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSk7XG4gICAgICBjb25zdCBhdWRpb1BhdGggPSBgJHtkaXJ9LyR7YXVkaW9EaXJ9LyR7ZGF0YVtwb3NpdGlvbl0ubmFtYV9hdWRpb30ud2F2YDtcbiAgICAgIGNvbnNvbGUubG9nKGF1ZGlvUGF0aCk7XG5cbiAgICAgIGlmICh3YXZlZm9ybS5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coKHdhdmVmb3JtLmN1cnJlbnQubWVkaWFDb250YWluZXIuaW5uZXJIVE1MID0gJycpKTtcbiAgICAgIH1cbiAgICAgIHdhdmVmb3JtLmN1cnJlbnQgPSBXYXZlU3VyZmVyLmNyZWF0ZSh7XG4gICAgICAgIHdhdmVDb2xvcjogJyNEOURDRkYnLFxuICAgICAgICBwcm9ncmVzc0NvbG9yOiAnI2Y0OGZiMScsXG4gICAgICAgIGN1cnNvckNvbG9yOiAnIzhjNGY2NCcsXG4gICAgICAgIGN1cnNvcldpZHRoOiAxLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcldhdmVSZWYuY3VycmVudCxcbiAgICAgICAgYmFja2VuZDogJ1dlYkF1ZGlvJyxcbiAgICAgICAgYmFyV2lkdGg6IDMsXG4gICAgICAgIGJhclJhZGl1czogMyxcbiAgICAgICAgYmFyR2FwOiAzLFxuICAgICAgICBoZWlnaHQ6IDE2MCxcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgd2F2ZWZvcm0uY3VycmVudC5sb2FkKGF1ZGlvUGF0aCk7XG4gICAgfVxuICB9LCBbcG9zaXRpb24sIGRhdGFdKTtcblxuICBjb25zdCBoYW5kbGVOZXh0ID0gKCkgPT4ge1xuICAgIGlmIChjdXJyZW50Q291bnQgPT09ICcwJykge1xuICAgICAgc2V0UG9zaXRpb24oMCk7XG4gICAgICByZXR1cm4gc2V0Q3VycmVudENvdW50KCcxJyk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gZGF0YS5sZW5ndGgudG9TdHJpbmcoKSkge1xuICAgICAgc2V0UG9zaXRpb24oZGF0YS5sZW5ndGggLSAxKTtcbiAgICAgIHJldHVybiBzZXRDdXJyZW50Q291bnQoZGF0YS5sZW5ndGgudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgaWYgKHdhdmVmb3JtLmN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd2F2ZWZvcm0uY3VycmVudC5wYXVzZSgpO1xuICAgIH1cbiAgICBzZXRQb3NpdGlvbihwb3NpdGlvbiArIDEpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVByZXZpb3VzID0gKCkgPT4ge1xuICAgIGlmICh3YXZlZm9ybS5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdhdmVmb3JtLmN1cnJlbnQucGF1c2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNldFBvc2l0aW9uKHBvc2l0aW9uIC0gMSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUGxheSA9ICgpID0+IHtcbiAgICBpZiAod2F2ZWZvcm0uY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRQbGF5aW5nKCFwbGF5aW5nKTtcbiAgICAgIHdhdmVmb3JtLmN1cnJlbnQucGxheVBhdXNlKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVBvc2l0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlLCBrZXkgPSAnJykgPT4ge1xuICAgICAgbGV0IGNvdW50O1xuICAgICAgaWYgKGtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICBpZiAocGFyc2VJbnQodmFsdWUpID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICBzZXRQb3NpdGlvbigwKTtcbiAgICAgICAgICByZXR1cm4gc2V0Q3VycmVudENvdW50KCcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlSW50KHZhbHVlKSA8IDApIHtcbiAgICAgICAgICBzZXRQb3NpdGlvbigwKTtcbiAgICAgICAgICByZXR1cm4gc2V0Q3VycmVudENvdW50KCcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICAgIGNvdW50ID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICAgIHNldFBvc2l0aW9uKGNvdW50IC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSAnMCcpIHtcbiAgICAgICAgICBzZXRQb3NpdGlvbigwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3YXZlZm9ybS5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB3YXZlZm9ybS5jdXJyZW50LnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEN1cnJlbnRDb3VudCh2YWx1ZSk7XG4gICAgfSxcbiAgICBbZGF0YV1cbiAgKTtcblxuICBjb25zdCBmaW5kSW5kZXhJbk5ld0RhdGEgPSAoZGF0YSA9IFtdLCBpdGVtKSA9PiB7XG4gICAgY29uc3QgZm91bmRJdCA9IGRhdGEuZmluZEluZGV4KFxuICAgICAgKGRhdGEpID0+IGRhdGEubmFtYV9hdWRpbyA9PT0gaXRlbS5uYW1hX2F1ZGlvXG4gICAgKTtcbiAgICByZXR1cm4gZm91bmRJdDtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQdXNoTmV3RGF0YSA9IGFzeW5jIChuZXdJdGVtKSA9PiB7XG4gICAgY29uc3QgaW5kZXhJbk5ld0RhdGEgPSBmaW5kSW5kZXhJbk5ld0RhdGEoZGF0YSwgbmV3SXRlbSk7XG5cbiAgICBpZiAoaW5kZXhJbk5ld0RhdGEgIT09IC0xKSB7XG4gICAgICBkYXRhW2luZGV4SW5OZXdEYXRhXSA9IG5ld0l0ZW07XG4gICAgfVxuICAgIGVsZWN0cm9uLmZpbGVzQXBpLm1vZGlmeUZpbGVDc3YoZGF0YSwgZmlsZVBhdGgpO1xuICAgIHNldE9wZW5EaWFsb2dBcHBseShmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgZml4ZWRIZWlnaHRQYXBlciA9IGNsc3goY2xhc3Nlcy5wYXBlciwgY2xhc3Nlcy5maXhlZEhlaWdodCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cbiAgICAgIDxDc3NCYXNlbGluZSAvPlxuICAgICAgPE5hdmJhclxuICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICBoYW5kbGVEcmF3ZXJPcGVuPXtoYW5kbGVEcmF3ZXJPcGVufVxuICAgICAgICBoYW5kbGVTZWxlY3RGaWxlPXtoYW5kbGVTZWxlY3RGaWxlfVxuICAgICAgLz5cbiAgICAgIHsvKiBEcmF3ZXIgKi99XG4gICAgICA8U2lkZUJhclxuICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICBoYW5kbGVEcmF3ZXJDbG9zZT17aGFuZGxlRHJhd2VyQ2xvc2V9XG4gICAgICAgIGNvdW50PXtkYXRhQ29udGFpbnNOb3Rlcy5sZW5ndGggPiAwID8gZGF0YUNvbnRhaW5zTm90ZXMubGVuZ3RoIDogMH1cbiAgICAgICAgbm90ZT17ZGF0YUNvbnRhaW5zTm90ZXMubGVuZ3RoID4gMCA/IGRhdGFDb250YWluc05vdGVzIDogW119XG4gICAgICAgIHRvZ2dsZVRoZW1lPXtvblRvZ2dsZVRoZW1lfVxuICAgICAgLz5cblxuICAgICAgPG1haW4gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hcHBCYXJTcGFjZXJ9IC8+XG4gICAgICAgIDxDb250YWluZXIgbWF4V2lkdGg9XCJsZ1wiIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxuICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBkaXJlY3Rpb249XCJyb3ctcmV2ZXJzZVwiIHNwYWNpbmc9ezR9PlxuICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IG1kPXs0fSBsZz17NH0+XG4gICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBtZD17MTJ9IGxnPXsxMn0+XG4gICAgICAgICAgICAgICAgPFBhcGVyIHN0eWxlPXt7IGhlaWdodDogJ21heC1jb250ZW50JywgcGFkZGluZzogMjAgfX0+XG4gICAgICAgICAgICAgICAgICA8RGV0YWlsRmlsZVxuICAgICAgICAgICAgICAgICAgICBwYXRoPXtmaWxlUGF0aH1cbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU9e2ZpbGVOYW1lfVxuICAgICAgICAgICAgICAgICAgICBjb3VudD17ZGF0YSAmJiBkYXRhLmxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENvdW50PXtjdXJyZW50Q291bnR9XG4gICAgICAgICAgICAgICAgICAgIG5hbWVXYXY9e2RhdGEubGVuZ3RoID4gMSAmJiBkYXRhW3Bvc2l0aW9uXS5uYW1hX2F1ZGlvfVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2VQb3NpdGlvbj17aGFuZGxlQ2hhbmdlUG9zaXRpb259XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBtZD17OH0gbGc9ezh9PlxuICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0gbWQ9ezEyfSBsZz17MTJ9PlxuICAgICAgICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2ZpeGVkSGVpZ2h0UGFwZXJ9PlxuICAgICAgICAgICAgICAgICAgPFdhdmVmb3JtQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8V2F2ZSBpZD1cIndhdmVmb3JtXCIgcmVmPXtjb250YWluZXJXYXZlUmVmfSAvPlxuICAgICAgICAgICAgICAgICAgPC9XYXZlZm9ybUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBqdXN0aWZ5PVwiY2VudGVyXCIgY2xhc3NOYW1lPXtjbGFzc2VzLnBhZGRpbmdZfT5cbiAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXszfSBtZD17M30gbGc9ezJ9IHN0eWxlPXt7IHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwib3BlbiBmb2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA+IDAgPyBoYW5kbGVQcmV2aW91cyA6ICgpID0+IHNldFBvc2l0aW9uKDApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPE5hdmlnYXRlQmVmb3JlSWNvbiBmb250U2l6ZT1cImxhcmdlXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17M30gbWQ9ezN9IGxnPXsyfSBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInIH19PlxuICAgICAgICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIm9wZW4gZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUGxheX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFBsYXlBcnJvd0ljb24gZm9udFNpemU9XCJsYXJnZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgICAgICAgICAgICAgPFBhdXNlSWNvbiBmb250U2l6ZT1cImxhcmdlXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17M30gbWQ9ezN9IGxnPXsyfSBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInIH19PlxuICAgICAgICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIm9wZW4gZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTmV4dH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPE5hdmlnYXRlTmV4dEljb24gZm9udFNpemU9XCJsYXJnZVwiIC8+XG4gICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBtZD17MTJ9IGxnPXsxMn0+XG4gICAgICAgICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT17Zml4ZWRIZWlnaHRQYXBlcn0+XG4gICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsbGVkLW11bHRpbGluZS1zdGF0aWNcIlxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlRyYW5za3JpcFwiXG4gICAgICAgICAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgICAgICAgICByb3dzPXs2fVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNvbWUgdGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxlbmd0aCA+IDEgPyBkYXRhW3Bvc2l0aW9uXS50ZWtzX3RyYW5zY3JpcHQgOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIGp1c3RpZnk9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgeHM9ezZ9XG4gICAgICAgICAgICAgICAgICBzbT17M31cbiAgICAgICAgICAgICAgICAgIG1kPXszfVxuICAgICAgICAgICAgICAgICAgbGc9ezN9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucGFkZGluZ1RvcH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlT3BlbkRpYWxvZ0lucHV0fVxuICAgICAgICAgICAgICAgICAgICB0ZXh0PVwiTm90ZVwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgeHM9ezZ9XG4gICAgICAgICAgICAgICAgICBzbT17M31cbiAgICAgICAgICAgICAgICAgIG1kPXszfVxuICAgICAgICAgICAgICAgICAgbGc9ezN9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucGFkZGluZ1RvcH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlT3BlbkRpYWxvZ0FwcGx5fVxuICAgICAgICAgICAgICAgICAgICB0ZXh0PVwiQXBwbHlcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG5cbiAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgeHM9ezZ9XG4gICAgICAgICAgICAgICAgICBzbT17M31cbiAgICAgICAgICAgICAgICAgIG1kPXszfVxuICAgICAgICAgICAgICAgICAgbGc9ezN9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucGFkZGluZ1RvcH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGljaz17aGFuZGxlT3BlbkRpYWxvZ1NhdmV9XG4gICAgICAgICAgICAgICAgICAgIHRleHQ9XCJTYXZlXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgIDwvbWFpbj5cbiAgICAgIDxEaWFsb2dJbnB1dFxuICAgICAgICB0aXRsZT1cIk5vdGVcIlxuICAgICAgICBuYW1lV2F2PXtkYXRhLmxlbmd0aCA+IDEgPyBkYXRhW3Bvc2l0aW9uXS5uYW1hX2F1ZGlvIDogJyd9XG4gICAgICAgIG9wZW49e29wZW5EaWFsb2dJbnB1dH1cbiAgICAgICAgaGFuZGxlQ2xvc2VEaWFsb2c9e2hhbmRsZUNsb3NlRGlhbG9nSW5wdXR9XG4gICAgICAgIHZhbHVlPXtub3RlfVxuICAgICAgICBoYW5kbGVPbkNoYW5nZT17aGFuZGxlV3JpdGVOb3RlfVxuICAgICAgICBoYW5kbGVPblNhdmU9e2RhdGEubGVuZ3RoID4gMSA/IGhhbmRsZVNhdmVOb3RlIDogaGFuZGxlQ2xvc2VEaWFsb2dJbnB1dH1cbiAgICAgIC8+XG4gICAgICA8RGlhbG9nQ29uZmlyQXBwbHlcbiAgICAgICAgdGl0bGU9XCJDb25maXJtYXRpb25cIlxuICAgICAgICBvcGVuPXtvcGVuRGlhbG9nQXBwbHl9XG4gICAgICAgIGhhbmRsZU9uQ2xvc2U9e2hhbmRsZUNsb3NlRGlhbG9nQXBwbHl9XG4gICAgICAgIGhhbmRsZU9uT2s9e1xuICAgICAgICAgIGRhdGEubGVuZ3RoID4gMVxuICAgICAgICAgICAgPyAoKSA9PiBoYW5kbGVQdXNoTmV3RGF0YShkYXRhW3Bvc2l0aW9uXSlcbiAgICAgICAgICAgIDogaGFuZGxlQ2xvc2VEaWFsb2dBcHBseVxuICAgICAgICB9XG4gICAgICAgIHRleHQ9XCJBcGFrYWggYW5kYSBpbmdpbiBtZW55aW1wYW4gZm9ybSB2YWxpZGFzaSBhZ2FyIGRhcGF0IGRpbGFuanV0a2FuIGxhaW4gd2FrdHUgP1wiXG4gICAgICAvPlxuXG4gICAgICA8RGlhbG9nQ29uZmlyU2F2ZVxuICAgICAgICB0aXRsZT1cIkNvbmZpcm1hdGlvblwiXG4gICAgICAgIG9wZW49e29wZW5EaWFsb2dTYXZlfVxuICAgICAgICBoYW5kbGVPbkNsb3NlPXtoYW5kbGVDbG9zZURpYWxvZ1NhdmV9XG4gICAgICAgIGhhbmRsZU9uT2s9e2hhbmRsZVNhdmVFeHBvcnRUb1hsc3h9XG4gICAgICAgIHRleHQ9XCJBcGFrYWggcHJvc2VzIHZhbGlkYXNpIHN1ZGFoIHNlbGVzYWkgP1wiXG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4uL3VzZVRoZW1lL1RoZW1lQ29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICcuL25lc3RlZCc7IC8vIFRvIHN1cHBvcnQgY29tcG9zaXRpb24gb2YgdGhlbWUuXG5cbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gbG9jYWxUaGVtZShvdXRlclRoZW1lKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17KCkgPT4gKHt9KX0gLz4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3AuXG4gKiBJdCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZSB0aGFua3MgdG8gUmVhY3QgY29udGV4dC5cbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cblxuXG5mdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgbG9jYWxUaGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgb3V0ZXJUaGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhIHRoZW1lIGZ1bmN0aW9uIHByb3AgdG8gdGhlIFRoZW1lUHJvdmlkZXIgY29tcG9uZW50OicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17b3V0ZXJUaGVtZSA9PiBvdXRlclRoZW1lfSAvPicsICcnLCAnSG93ZXZlciwgbm8gb3V0ZXIgdGhlbWUgaXMgcHJlc2VudC4nLCAnTWFrZSBzdXJlIGEgdGhlbWUgaXMgYWxyZWFkeSBpbmplY3RlZCBoaWdoZXIgaW4gdGhlIFJlYWN0IHRyZWUgJyArICdvciBwcm92aWRlIGEgdGhlbWUgb2JqZWN0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcblxuICAgIGlmIChvdXRwdXQgIT0gbnVsbCkge1xuICAgICAgb3V0cHV0W25lc3RlZF0gPSBvdXRlclRoZW1lICE9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtsb2NhbFRoZW1lLCBvdXRlclRoZW1lXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRGFzaGJvYXJkIGZyb20gJy4vY29tcG9uZW50cy9EYXNoYm9hcmQnO1xuaW1wb3J0IHtcbiAgTXVpVGhlbWVQcm92aWRlcixcbiAgY3JlYXRlTXVpVGhlbWUsXG4gIFRoZW1lUHJvdmlkZXIsXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgY29uc3Qga2V5U3RvcmUgPSAndGhlbWUnO1xuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IHVzZVN0YXRlKHtcbiAgICBwYWxldHRlOiB7XG4gICAgICB0eXBlOiAnbGlnaHQnLFxuICAgICAgcHJpbWFyeToge1xuICAgICAgICBsaWdodDogJyNjM2ZkZmYnLFxuICAgICAgICBtYWluOiAnIzkwY2FmOScsXG4gICAgICAgIGRhcms6ICcjNWQ5OWM2JyxcbiAgICAgICAgY29udHJhc3RUZXh0OiAnIzE0MUQyMycsXG4gICAgICB9LFxuICAgICAgc2Vjb25kYXJ5OiB7XG4gICAgICAgIGxpZ2h0OiAnI2ZmYzFlMycsXG4gICAgICAgIG1haW46ICcjZjQ4ZmIxJyxcbiAgICAgICAgZGFyazogJyNiZjVmODInLFxuICAgICAgICBjb250cmFzdFRleHQ6ICcjMTQxRDIzJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICBzZXRUaGVtZSh7XG4gICAgICAuLi50aGVtZSxcbiAgICAgIHBhbGV0dGU6IHtcbiAgICAgICAgLi4udGhlbWUucGFsZXR0ZSxcbiAgICAgICAgdHlwZTogKGF3YWl0IGVsZWN0cm9uLnN0b3JlQXBpLmdldFN0b3JlKGtleVN0b3JlKSlcbiAgICAgICAgICA/IGF3YWl0IGVsZWN0cm9uLnN0b3JlQXBpLmdldFN0b3JlKGtleVN0b3JlKVxuICAgICAgICAgIDogJ2xpZ2h0JyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB0b2dnbGVEYXJrVGhlbWUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbGV0IG5ld1BhbGV0dGVUeXBlID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ2RhcmsnIDogJ2xpZ2h0JztcbiAgICBlbGVjdHJvbi5zdG9yZUFwaS5zZXRTdG9yZShrZXlTdG9yZSwgbmV3UGFsZXR0ZVR5cGUpO1xuICAgIHNldFRoZW1lKHtcbiAgICAgIC4uLnRoZW1lLFxuICAgICAgcGFsZXR0ZToge1xuICAgICAgICAuLi50aGVtZS5wYWxldHRlLFxuICAgICAgICB0eXBlOiBuZXdQYWxldHRlVHlwZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sIFt0aGVtZV0pO1xuXG4gIGNvbnN0IG11aVRoZW1lID0gY3JlYXRlTXVpVGhlbWUodGhlbWUpO1xuXG4gIHJldHVybiAoXG4gICAgPE11aVRoZW1lUHJvdmlkZXIgdGhlbWU9e211aVRoZW1lfT5cbiAgICAgIDxEYXNoYm9hcmQgb25Ub2dnbGVUaGVtZT17dG9nZ2xlRGFya1RoZW1lfSAvPlxuICAgIDwvTXVpVGhlbWVQcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuXG5pbXBvcnQgJy4vaW5kZXguc2Nzcyc7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=